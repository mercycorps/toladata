# Generated by Django 2.2.14 on 2021-03-16 21:46

from django.db import migrations, models


class Migration(migrations.Migration):

    def insert_sort_order(apps, schema_editor):
        for model_name in ['datacollectionfrequency', 'reportingfrequency']:
            model = apps.get_model('indicators', model_name)
            frequency_names = []
            for i, obj in enumerate(model.objects.all()):
                obj.sort_order = i

                name_increment = 1
                while obj.frequency in frequency_names:
                    name_increment += 1
                    obj.frequency = f'{obj.frequency} {name_increment}'
                frequency_names.append(obj.frequency)
                obj.save(update_fields=['frequency', 'sort_order'])

    def convert_references(apps, schema_editor):
        indicator_model = apps.get_model('indicators', 'indicator')
        for i in indicator_model.objects.all():
            if i.data_collection_frequency:
                i.data_collection_frequencies.add(i.data_collection_frequency)
            if i.reporting_frequency:
                i.reporting_frequencies.add(i.reporting_frequency)

    dependencies = [
        ('indicators', '0095_help_text_updates'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='datacollectionfrequency',
            name='numdays',
        ),
        migrations.AddField(
            model_name='datacollectionfrequency',
            name='sort_order',
            field=models.IntegerField(null=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reportingfrequency',
            name='sort_order',
            field=models.IntegerField(null=True),
            preserve_default=False,
        ),
        migrations.RunPython(insert_sort_order, reverse_code=migrations.RunPython.noop),
        migrations.AddField(
            model_name='indicator',
            name='data_collection_frequencies',
            field=models.ManyToManyField(
                help_text='How frequently will you collect data for this indicator? The frequency and timing of data collection should be based on how often data are needed for management purposes, the cost of data collection, and the pace of change anticipated. If an indicator requires multiple data sources collected at varying frequencies, then it is recommended to select the frequency at which all data will be collected for calculation.',
                related_name='indicators', to='indicators.DataCollectionFrequency', blank=True,
                verbose_name='Frequency of data collection'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='reporting_frequencies',
            field=models.ManyToManyField(
                help_text='This frequency should make sense in relation to the data collection frequency and target frequency and should adhere to any requirements regarding program, stakeholder, and/or donor accountability and reporting.',
                related_name='indicators', to='indicators.ReportingFrequency', blank=True,
                verbose_name='Frequency of reporting'),
        ),
        migrations.RunPython(convert_references, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='datacollectionfrequency',
            name='frequency',
            field=models.CharField(max_length=135, unique=True, verbose_name='Frequency'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='reportingfrequency',
            name='frequency',
            field=models.CharField(max_length=135, unique=True, verbose_name='Frequency'),
        ),
        migrations.AlterField(
            model_name='datacollectionfrequency',
            name='sort_order',
            field=models.IntegerField(unique=True),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='reportingfrequency',
            name='sort_order',
            field=models.IntegerField(unique=True),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='indicator',
            name='data_collection_frequency',
        ),
        migrations.RemoveField(
            model_name='indicator',
            name='reporting_frequency',
        ),
    ]
