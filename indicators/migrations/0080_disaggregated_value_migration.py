# Generated by Django 2.2.5 on 2019-11-18 19:57

from django.db import migrations, models, utils
import django.db.models.deletion


def non_reversible_migration(apps, schema_editor):
    """Operation to "reverse" an unreversible change"""
    pass


def clear_unassigned_disaggregation_values(apps, schema_editor):
    """Disaggregated values with no result associated should be deleted outright"""
    DisaggregationValue = apps.get_model('indicators', 'DisaggregationValue')
    for orphan in DisaggregationValue.objects.filter(result=None):
        orphan.delete()

def get_decimal_value(value):
    if value is None or value == '':
        return None
    if isinstance(value, str) and ',' in value:
        value = ''.join([c for c in value if c != ','])
    try:
        value = round(float(value), 2)
    except ValueError:
        return False
    if value == int(value):
        return int(value)
    return value

def assign_all_new_disaggregated_values(apps, schema_editor):
    """For all indicators assigned a dissagregation_type, ensure the disaggregated values objects are created"""
    Indicator = apps.get_model('indicators', 'Indicator')
    DisaggregatedValue = apps.get_model('indicators', 'DisaggregatedValue')
    DisaggregationValue = apps.get_model('indicators', 'DisaggregationValue')
    disaggregated_indicators = Indicator.objects.filter(disaggregation__isnull=False)
    for indicator in disaggregated_indicators:
        for result in indicator.result_set.all():
            for disaggregation_type in indicator.disaggregation.all():
                for label in disaggregation_type.disaggregationlabel_set.all():    
                    old_disagg = result.disaggregation_value.filter(
                        disaggregation_label=label
                    )
                    if old_disagg.count() > 0:
                        value = old_disagg.first().value
                        if value == '':
                            value = None
                    else:
                        value = None
                    value = get_decimal_value(value)
                    if value is False:
                        pass
                    elif DisaggregatedValue.objects.filter(result=result, category=label).exists():
                        pass
                    else:
                        disaggregated_value = DisaggregatedValue(
                            result=result,
                            category=label,
                            value=value
                        )
                        disaggregated_value.save()
                        old_disagg.delete()


def assign_all_sadd_disaggregated_values(apps, schema_editor):
    """For all disaggregated values that are SADD without a type assigned, assign the SADD type to the

    associated indicator, and copy the value over"""
    DisaggregatedValue = apps.get_model('indicators', 'DisaggregatedValue')
    DisaggregationValue = apps.get_model('indicators', 'DisaggregationValue')
    DisaggregationType = apps.get_model('indicators', 'DisaggregationType')
    try:
        SADD_disagg = DisaggregationType.objects.get(pk=109)
    except DisaggregationType.DoesNotExist:
        # test database - no sadd migrations, skip it:
        return
    for label in SADD_disagg.disaggregationlabel_set.all():
        for sadd_value in DisaggregationValue.objects.filter(disaggregation_label=label).exclude(
            models.Q(value__isnull=True) | models.Q(value='')
            ):
            for result in sadd_value.result_set.all():
                if not SADD_disagg in result.indicator.disaggregation.all():
                    result.indicator.disaggregation.add(SADD_disagg)
                    result.indicator.save()
                value = get_decimal_value(sadd_value.value)
                if value is False:
                    pass
                elif DisaggregatedValue.objects.filter(result=result, category=label).exists():
                    pass
                else:
                    disaggregated_value = DisaggregatedValue(
                        result=result,
                        category=label,
                        value=value
                    )
                    disaggregated_value.save()
                    sadd_value.delete()

def clear_blank_old_values(apps, schema_editor):
    DisaggregationValue = apps.get_model('indicators', 'DisaggregationValue')
    blank_disaggregations = DisaggregationValue.objects.filter(
        models.Q(value__isnull=True) | models.Q(value='')
    )
    blank_disaggregations.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('indicators', '0079_auto_20191107_1344'),
    ]

    operations = [
        migrations.AlterField(
            model_name='indicator',
            name='justification',
            field=models.TextField(blank=True, help_text=' ', max_length=500, null=True, verbose_name='Rationale or justification for indicator'),
        ),
        migrations.CreateModel(
            name='DisaggregatedValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=20, blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='indicators.DisaggregationLabel', verbose_name='Disaggregation category')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='indicators.Result')),
            ],
        ),
        migrations.AddConstraint(
            model_name='disaggregatedvalue',
            constraint=models.UniqueConstraint(fields=('result', 'category'), name='unique_disaggregation_per_result'),
        ),
        migrations.RunPython(clear_unassigned_disaggregation_values, non_reversible_migration),
        migrations.RunPython(assign_all_new_disaggregated_values, non_reversible_migration),
        migrations.RunPython(assign_all_sadd_disaggregated_values, non_reversible_migration),
        migrations.RunPython(clear_blank_old_values, non_reversible_migration)
    ]
