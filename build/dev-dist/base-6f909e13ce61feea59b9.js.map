{"version":3,"file":"base-6f909e13ce61feea59b9.js","sources":["webpack:///./js/components/changesetNotice.js","webpack:///./scss/tola.scss?3670","webpack:///./js/general_utilities.js","webpack:///./js/base.js","webpack:///./js/constants.js"],"sourcesContent":["import { RFC_OPTIONS } from '../constants';\n//import PNotify from 'pnotify/dist/es/PNotify.js'; // needed for jest teseting, leaving in for future testing attempts\n//import 'pnotify/dist/es/PNotifyCallbacks.js';\n//import 'pnotify/dist/es/PNotifyButtons.js';\n\nconst create_rfc_dropdown = ({\n    custom_rfc_options = null,\n} = {}) => {\n    let options = custom_rfc_options || RFC_OPTIONS;\n    if (!options) {\n        return '';\n    }\n    let rfc_section = document.createElement('section');\n    rfc_section.classList.add('pnotify__reason-for-change');\n    let form_div = document.createElement('div');\n    form_div.classList.add('form-group');\n    let label = document.createElement('label');\n    // # Translators: This is a label for a dropdown that presents several possible justifications for changing a value\n    label.appendChild(document.createTextNode(gettext('Reason for change')));\n    label.htmlFor = 'reasons_for_change_select';\n    form_div.appendChild(label);\n    let select = document.createElement('select');\n    select.name = 'reasons_for_change';\n    select.id = 'reasons_for_change_select';\n    select.setAttribute('multiple', '');\n    select.classList.add('form-control');\n    for (let i=0; i<options.length; i++) {\n        let optionElement = document.createElement('option');\n        optionElement.value = options[i].value;\n        optionElement.label = options[i].label;\n        optionElement.text = options[i].label;\n        if (i == options.length-1) {\n            let divider = document.createElement('option');\n            divider.setAttribute('data-role', 'divider');\n            select.appendChild(divider);\n        }\n        select.appendChild(optionElement);\n    }\n    form_div.appendChild(select);\n    rfc_section.appendChild(form_div);\n    return rfc_section;\n}\n\n/*\n* Consider using this notification function rather than the more specific ones above.  It should be able to\n* everything they can do. The configurable parameters are for the 4 sections of the notification and\n* for other visual and functional elements. Leave any of these null or false to omit them.\n* There is NO DEFAULT TEXT. You must explicitly provide text to text elements.\n*/\n\nconst create_unified_changeset_notice = ({\n    header = null, // text for the header\n    show_icon = true, // show an appropriate icon in the header\n    message_text = null, // appears in black (body color) text\n    preamble = null, // appears in colored text below the header\n    on_submit = () => {}, // action to trigger on submit\n    on_cancel = () => {}, // action to trigger on cancel\n    rfc_required = true, // is reason for change required (can be overridden by validation_type)\n    rfc_options = null, // reason for change dropdown options or true for default\n    rationale_required = true, // do not allow submission without writing a rationale (can be overridden by validation_type)\n    include_rationale = false, // shows rationale textarea\n    validation_type = 0, // Types - 0: use paramaters/defaults, 1: rationale is optional if rfc is chosen, unless rfc value is other\n    showCloser = true, // show close box\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    context = null,\n    notice_type = 'notice', // possible values: error (danger/red), info (blue), success (green), notice (warning/yellow)\n    blocking = true,\n    self_dismissing = false, // automatically hides the notice after 8000 ms (default). NOTE: this is the OPPOSITE behavior as default PNotify\n    dismiss_delay = 8000, // also PNotify default\n} = {}) => {\n    let header_icons = {\n        'error': 'fa-exclamation-triangle',\n        'info': 'fa-info-circle',\n        'success': 'fa-check-circle',\n        'notice': 'fa-exclamation-triangle',\n    };\n    let color_classes = {\n        'error': 'danger',\n        'info': 'info',\n        'success': 'success',\n        'notice': 'primary',\n    };\n\n    let icon = '';\n\n    if (show_icon) {\n        icon = `<i class=\"fas ${header_icons[notice_type]}\"></i>`\n    }\n\n    const header_section = (header || icon) ?\n        `<header class=\"pnotify__header\">\n            <h4>\n                ${icon}\n                ${header ? header : ''}\n            </h4>\n        </header>` : '';\n\n    const preamble_section = !preamble ? '' :\n        `<section class=\"pnotify__preamble\">\n            <p><b>${preamble}</b></p>\n        </section>`;\n\n    const message_section = ! message_text ? '' :\n        `<section class=\"pnotify__message\">\n            <p>${message_text}</p>\n        </section>`;\n\n    let rfc_section = '';\n    if (rfc_options !== null) {\n        let custom_rfc_options = rfc_options === true ? null : rfc_options;\n        rfc_section = create_rfc_dropdown({custom_rfc_options: custom_rfc_options}).outerHTML;\n    }\n\n    // # Translators: This is the label for a textbox where a user can provide details about their reason for selecting a particular option\n    const rationale_label = rfc_section.length > 0 ?  `<label>${gettext(\"Details\")}</label>` : '';\n    const rationale_section = ! include_rationale ? '' :\n        `<section class=\"pnotify__rationale\">\n            <div class=\"form-group\">\n                ${rationale_label}\n                <textarea class=\"form-control\" name=\"rationale\" />\n            </div>\n        </section>`;\n\n    const inner = `\n        ${header_section}\n        ${preamble_section}\n        ${message_section}\n        ${rfc_section}\n        ${rationale_section}\n    `;\n\n\n    // IMPORTANT TODO\n    // **************\n    // Following code cribs from create_changeset_notice\n    // I left create_changeset_notice untouched to avoid lots of regressions\n    // I think we should deprecate create_changeset_notice entirely\n\n    let confirm_button = {\n        text: confirm_text,\n        primary: true,\n        addClass: 'btn-sm btn-' + color_classes[notice_type],\n        click: function (notice) {\n            let close = true;\n            let textarea = $(notice.refs.elem).find('textarea[name=\"rationale\"]');\n            textarea.parent().find('.invalid-feedback').remove();\n            let rationale = textarea.val() ? textarea.val().trim() : undefined; // trim whitespace to disallow whitespace-only submission\n            let rfc_select  = $(notice.refs.elem).find('select[name=\"reasons_for_change\"]');\n            let reasons_for_change = (rfc_select.val() || []).map(v => parseInt(v));\n            let is_valid = false;\n            switch (validation_type) {\n                case 1:\n                    // Uses RFC dropdown logic (either a rationale or a non-Other reason for change required):\n                    is_valid = (rationale || (reasons_for_change.length > 0 && reasons_for_change.indexOf(1) == -1))\n                    break;\n                case 0:\n                default:\n                    // Either a rationale is submitted, or there was no rationale form, or it was optional:\n                    is_valid = ((rationale || !include_rationale || !rationale_required) &&\n                    // Either one or more reasons for change or there were no options or they weren't required:\n                                (reasons_for_change.length > 0 || !rfc_options || !rfc_required));\n            }\n            if (is_valid){\n                textarea.removeClass('is-invalid');\n            } else {\n                textarea.addClass('is-invalid');\n                textarea.parent().append(\n                    '<div class=\"invalid-feedback\">'\n                    + gettext('A reason is required.')\n                    + '</div>'\n                );\n                return false;\n            }\n\n            if(on_submit) {\n                close = on_submit(rationale, reasons_for_change, validation_type);\n                if(close === undefined) {\n                    close = true;\n                }\n            }\n            if(close) {\n                document.getElementById('notification_blocking_div').style.display='none';\n                notice.close();\n            }\n        }\n    }\n\n    let cancel_button = {\n        text: cancel_text,\n        addClass: 'btn-sm',\n        click: function (notice) {\n            close = on_cancel()\n            if(close === undefined) {\n                close = true;\n            }\n\n            if(close) {\n                document.getElementById('notification_blocking_div').style.display='none';\n                notice.close();\n            }\n        }\n    }\n\n    var changeset_buttons = []\n\n    if (confirm_text) {\n        changeset_buttons.push(confirm_button)\n    }\n\n    if (cancel_text) {\n        changeset_buttons.push(cancel_button)\n    }\n\n    var notice = PNotify.alert({\n        text: $(`<div><form action=\"\" method=\"post\" class=\"form\">${inner}</form></div>`).html(),\n        textTrusted: true,\n        icon: false,\n        width: '350px',\n        hide: self_dismissing,\n        delay: dismiss_delay,\n        type: notice_type,\n        addClass: 'program-page__rationale-form',\n        stack: {\n            'overlayClose': true,\n            'dir1': 'right',\n            'dir2': 'up',\n            'firstpos1': 20,\n            'firstpos2': 20,\n            'context': context\n        },\n        modules: {\n            Buttons: {\n                closer: showCloser,\n                closerHover: false,\n                sticker: false\n            },\n            Confirm: {\n                align: 'flex-start',\n                confirm: true,\n                buttons: changeset_buttons\n            }\n        }\n    });\n\n    $('.pnotify__reason-for-change select').multiselect({\n        numberDisplayed: 1,\n        // # Translators: (preceded by a number) e.g. \"4 options selected\"\n        nSelectedText: ` ${gettext('selected')}`,\n        // # Translators: for a dropdown menu with no options checked:\n        nonSelectedText: gettext('None selected')\n    });\n\n\n\n    if (on_cancel) {\n        notice.on('click', function(e) {\n            if ($(e.target).is('.ui-pnotify-closer *')) {\n                let close = on_cancel();\n                if (close || close === undefined) {\n                    document.getElementById('notification_blocking_div').style.display='none';\n                    notice.close();\n                }\n        }});\n    }\n\n    // END CRIBBED CODE\n\n}\n\nexport { create_unified_changeset_notice };\n\nexport const testables = {\n    create_rfc_dropdown: create_rfc_dropdown,\n};\n","// extracted by mini-css-extract-plugin\nexport {};","const SPANISH = 'es';\nconst FRENCH = 'fr';\nconst ENGLISH = 'en';\n\nfunction flattenArray(arr, depth = 1) {\n    if (depth == 5) {\n        return arr;\n    }\n    let flattened = [];\n    arr.forEach(item => {\n        if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item, depth+1));\n        } else {\n            flattened.push(item);\n        }\n    });\n    return flattened;\n}\n\nfunction ensureNumericArray(value) {\n    if (!Array.isArray(value)) {\n        value = parseInt(value);\n        if (value && !isNaN(value)) {\n            return [value];\n        }\n        return false;\n    }\n    let arr = value.map(x => parseInt(x)).filter(x => !isNaN(x));\n    if (arr && Array.isArray(arr) && arr.length > 0) {\n        return arr;\n    }\n    return false;\n}\n\n/*\n * Are we loading a cached page? If so, reload to avoid displaying stale indicator data\n * See ticket #1423\n */\nfunction reloadPageIfCached() {\n    // moving the cache check to after page load as firefox calculates transfer size at the end\n    $(function () {\n        let isCached = window.performance.getEntriesByType(\"navigation\")[0].transferSize === 0;\n        //adding a second check to ensure that if for whatever reason teh transfersize reads wrong, we don't reload on\n        //a reload:\n        let isReload = window.performance.getEntriesByType(\"navigation\")[0].type === \"reload\";\n        if (isCached && !isReload) {\n            window.location.reload();\n        }\n    });\n}\n\nconst indicatorManualNumberSort = (levelFunc, numberFunc) => {\n    return (indicatorA, indicatorB) => {\n        let levelA = levelFunc(indicatorA);\n        let levelB = levelFunc(indicatorB);\n        if (levelA && !levelB) {\n            return 1;\n        }\n        if (levelB && !levelA) {\n            return -1;\n        }\n        if (levelA != levelB) {\n            return parseInt(levelA) - parseInt(levelB);\n        }\n        let numberA = (numberFunc(indicatorA) || '').split('.');\n        let numberB = (numberFunc(indicatorB) || '').split('.');\n        for (let i=0; i < Math.max(numberA.length, numberB.length); i++) {\n            if (numberA[i] && numberB[i]) {\n                for (let j=0; j < Math.max(numberA[i].length, numberB[i].length); j++) {\n                    if (numberA[i][j] && numberB[i][j]) {\n                        if (numberA[i].charCodeAt(j) != numberB[i].charCodeAt(j)) {\n                            return numberA[i].charCodeAt(j) - numberB[i].charCodeAt(j);\n                        }\n                    } else if (numberA[i][j]) {\n                        return 1;\n                    } else if (numberB[i][j]) {\n                        return -1;\n                    }\n                }\n            } else if (numberA[i]) {\n                return 1;\n            } else if (numberB[i]) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n\nconst localizeNumber = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    var intPart = val.toString();\n    var floatPart = null;\n    if (val.toString().includes(\",\")) {\n        intPart = val.toString().split(\",\")[0];\n        floatPart = val.toString().split(\",\").length > 1 ? val.toString().split(\",\")[1 ] : null;\n    } else if (val.toString().includes(\".\")) {\n        intPart = val.toString().split(\".\")[0];\n        floatPart = val.toString().split(\".\").length > 1 ? val.toString().split(\".\")[1 ] : null;\n    }\n    floatPart = (floatPart && floatPart.length > 0) ? floatPart : null;\n    var displayValue;\n    switch(window.userLang) {\n        case SPANISH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case FRENCH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160)); //nbsp\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case ENGLISH:\n        default:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            if (floatPart) {\n                displayValue += `.${floatPart}`;\n            }\n        break;\n    }\n    return displayValue;\n};\n\nconst localizePercent = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    let percent = localizeNumber(Math.round(val * 10000)/100);\n    return (percent === null) ? null : `${percent}%`;\n}\n\nconst sortObjectListByValue = (objects, key='label') => objects.sort((a, b) => {\n    return a[key].toUpperCase() > b[key].toUpperCase() ? 1 : -1\n})\n\nexport { flattenArray, ensureNumericArray, reloadPageIfCached, indicatorManualNumberSort,\n          localizeNumber, localizePercent, sortObjectListByValue };\n","// Run the app's SCSS through webpack\nimport '@babel/polyfill'\nimport '../scss/tola.scss';\nimport 'react-virtualized/styles.css'\n\n\n/*\n * Moved legacy app.js code here - Contains global functions called by template code\n * along with global setup to be performed on every page\n *\n * If you decide to add a new function to this grab bag, and want to call it from Django\n * template code, make sure to add it to the `window` obj to make it globally accessible\n */\n\n\n/*\n * Global AJAX handlers for CSRF handling and redirection on logout for AJAX requests\n */\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie != '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nfunction csrfSafeMethod(method) {\n    // these HTTP methods do not require CSRF protection\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n}\n\nfunction redirectToLoginOnLoginScreenHeader(jqxhr) {\n    if (jqxhr.getResponseHeader(\"Login-Screen\") != null && jqxhr.getResponseHeader(\"Login-Screen\").length) {\n        // Not logged in - the 302 redirect is implicit and jQuery has no way to know it happened\n        // check special header set by our login view to see if that's where we ended up\n        window.location = js_context.loginUrl;\n    }\n}\n\n/*\n * Set the csrf header before sending the actual ajax request\n * while protecting csrf token from being sent to other domains\n *\n * Attach to success/error here instead of ajaxSuccess()/ajaxError() below\n * as these take priority and will not fail to run if an exception is\n * thrown in the app code handler\n */\n$.ajaxSetup({\n    crossDomain: false, // obviates need for sameOrigin test\n    beforeSend: function(xhr, settings) {\n        if (!csrfSafeMethod(settings.type)) {\n            xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        }\n    },\n    success: function(data, status, jqxhr) {\n        redirectToLoginOnLoginScreenHeader(jqxhr);\n    },\n    error: function(jqxhr) {\n        redirectToLoginOnLoginScreenHeader(jqxhr);\n    }\n});\n\n\n/*\n * Global AJAX handlers for indicating a request in progress + error reporting\n */\n$( document )\n    .ajaxStart( function() {\n        $('#ajaxloading').show();\n    })\n    .ajaxStop( function() {\n        $('#ajaxloading').hide();\n    })\n    .ajaxError(function( event, jqxhr, settings, thrownError ) {\n        if (settings.suppressErrors === true) {\n            //do nothing\n        } else {\n            if (jqxhr.readyState === 4) {\n                // HTTP error (can be checked by XMLHttpRequest.status and XMLHttpRequest.statusText)\n                // TODO: Give better error mssages based on HTTP status code\n                let errorStr = `${jqxhr.status}: ${jqxhr.statusText}`;\n\n                if (jqxhr.status === 403) {\n                    // Permission denied\n                    notifyError(js_context.strings.permissionError, js_context.strings.permissionErrorDescription);\n                } else {\n                    // all other errors\n                    notifyError(js_context.strings.serverError, errorStr);\n                }\n            }\n            else if (jqxhr.readyState === 0) {\n                // Network error (i.e. connection refused, access denied due to CORS, etc.)\n                notifyError(js_context.strings.networkError, js_context.strings.networkErrorTryAgain);\n            }\n            else {\n                // something weird is happening\n                notifyError(js_context.strings.unknownNetworkError, jqxhr.statusText);\n            }\n        }\n    });\n\n\n\nif (!Date.prototype.toISODate) {\n  Date.prototype.toISODate = function() {\n    return this.getFullYear() + '-' +\n           ('0'+ (this.getMonth()+1)).slice(-2) + '-' +\n           ('0'+ this.getDate()).slice(-2);\n  }\n}\n\n\nfunction zeroPad(n, width) {\n    n = n + '';\n    return n.length >= width ? n : new Array(width - n.length + 1).join(0) + n;\n}\n\nfunction isDate(dateVal) {\n    /*\n    var pattern = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\n    var dateArray = dateVal.match(pattern);\n    if (dateArray == null) return false;\n\n    var currentYear = (new Date).getFullYear();\n    var year = dateArray[1];\n    var month = dateArray[2];\n    var day = dateArray[3];\n    if (year < 2010 || year > (currentYear+3)) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    return new Date(dateVal) === 'Invalid Date' ? false : true;\n    */\n    var date = new Date(dateVal);\n    if (date == 'Invalid Date') {\n        return false;\n    }\n    var currentYear = (new Date).getFullYear();\n    if (date.getFullYear() > currentYear + 100 || date.getFullYear() < 1980 ) {\n        return false;\n    }\n    return true;\n}\nwindow.isDate = isDate;\n\nfunction formatDate(dateString, day=0) {\n    // Returns an ISO formatted naive datestring\n    // Use only to sanitize simplified date strings e.g. for hidden fields or data attributes\n    // If you’re trying to format a date[string] for user display, you probably want something else\n    if (dateString == null || dateString == undefined || dateString.length == 0 || dateString == 'undefined' || dateString == 'null' ) {\n        return '';\n    }\n    try {\n        var dateval = new Date(dateString);\n        var tz = dateval.getTimezoneOffset();\n        var hrs = dateval.getHours();\n        if (hrs > 0) {\n            // alert(\"offsetting timezone tz=\" + tz + \" hrs = \" + hrs);\n            dateval.setMinutes(dateval.getMinutes() + tz);\n        }\n        var year = dateval.getFullYear()\n        var month = zeroPad((dateval.getMonth() + 1), 2);\n        var paddedDay = zeroPad((day == 0 ? dateval.getDate() : day), 2);\n        var ret = year + '-' + month + '-' + paddedDay\n        return ret;\n    } catch (err) {\n        console.log(err);\n        try {\n            var dateArray = dateString.split('-');\n            var year = dateArray[0];\n            var month = zeroPad(parseInt(dateArray[1]), 2);\n            var paddedDay = zeroPad((day == 0 ? dateArray[2] : day), 2);\n            var ret = year + '-' + month + '-' + paddedDay\n            return ret\n        }\n        catch (err) {\n            return dateString == (null ? '' : dateString);\n        }\n    }\n}\nwindow.formatDate = formatDate;\n\n// \"2017-01-01\" -> Date with local timezone (not UTC)\nfunction localDateFromISOStr(dateStr) {\n    let dateInts = dateStr.split('-').map(function(x) {return parseInt(x)});\n    return new Date(dateInts[0], dateInts[1]-1, dateInts[2]);\n}\nwindow.localDateFromISOStr = localDateFromISOStr;\n\n// Return Date() with local timezone at midnight\nfunction localdate() {\n    let today = new Date();\n    today.setHours(0,0,0,0);\n    return today;\n}\nwindow.localdate = localdate;\n\nconst n = \"numeric\",\n    s = \"short\",\n    l = \"long\",\n    d2 = \"2-digit\";\n\n\nconst DATE_MED = {\n    year: n,\n    month: s,\n    day: n\n};\n\n// Date() -> \"Oct 2, 2018\" (localized)\n// JS equiv of the Django template filter:   |date:\"MEDIUM_DATE_FORMAT\"\nfunction mediumDateFormatStr(date) {\n    const languageCode = window.userLang; // set in base.html by Django\n    return new Intl.DateTimeFormat(languageCode, DATE_MED).format(date);\n}\nwindow.mediumDateFormatStr = mediumDateFormatStr;\n\n/**\n *  updates session variables for the currently logged in user\n *  @param {Object} sessionVarsToUpdate - key value pairs of session variable name and updated value\n *  @param {function} [callback] - callback to run upon successful session update\n *  @returns {Promise} Promise object with the resutls of the ajax call\n */\nfunction sendSessionVariableUpdate(sessionVarsToUpdate, callback=null) {\n    let ajaxSettings = {\n        url: '/update_user_session/',\n        type: 'PUT',\n        contentType: 'application/json',\n        data: JSON.stringify(sessionVarsToUpdate),\n        processData: false\n    };\n    let updateRequest = $.ajax(ajaxSettings);\n    if (callback) {\n        updateRequest.done(callback);\n    }\n    return updateRequest;\n}\n\n$(function() {\n     // Javascript to enable link to tab\n    var hash = document.location.hash;\n    if (hash) {\n        $('.nav-tabs a[href=\"'+hash+'\"]').tab('show');\n    }\n\n    // Change hash for page-reload\n    $('a[data-toggle=\"tab\"]').on('show.bs.tab', function (e) {\n    window.location.hash = e.target.hash;\n    });\n\n    // Enable popovers\n    $('[data-toggle=\"popover\"]').popover({\n        html: true\n    })\n    $('[data-toggle=\"popover\"]').on('click', function(e){\n        e.preventDefault();\n    });\n\n    /* specific actions tied to item-specific site-wide events here: */\n    // in case of covid alert dismissal, update the session to clear it for the rest of this login session:\n    $('#covid-banner-alert').on('close.bs.alert', function() {\n        sendSessionVariableUpdate({show_covid_banner: false});\n    });\n});\n\n\n\n//App specific JavaScript\n$(function () {\n  $('[data-toggle=\"tooltip\"]').tooltip()\n});\n\n//custom jquery to trigger date picker, info pop-over and print category text\n$(document).ready(function() {\n    $('.datepicker').datepicker({ dateFormat: \"yy-mm-dd\" });\n});\n\n\n/*\n * Create and show a Bootstrap alert.\n */\nfunction createAlert (type, message, fade, whereToAppend) {\n    if (whereToAppend == undefined ){\n        whereToAppend = \"#messages\";\n    }\n    $(whereToAppend).append(\n        $(\n            \"<div class='alert alert-\" + type + \" dynamic-alert alert-dismissable' style='margin-top:0;'>\" +\n            \"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;</button>\" +\n            \"<p>\" + message + \"</p>\" +\n            \"</div>\"\n        )\n    );\n    if (fade == true) {\n        // Remove the alert after 5 seconds if the user does not close it.\n        $(\".dynamic-alert\").delay(5000).fadeOut(\"slow\", function () { $(this).remove(); });\n    }\n}\nwindow.createAlert = createAlert;\n\n\n/* Configure PNotify global settings */\n/* Do so on document ready since lib is included after app.js */\n$(function() {\n    PNotify.defaults.styling = 'bootstrap4'; // Bootstrap version 4\n    PNotify.defaults.icons = 'fontawesome5'; // Font Awesome 5\n\n    // Show close button and hide pin button\n    PNotify.modules.Buttons.defaults.closerHover = false;\n    PNotify.modules.Buttons.defaults.sticker = false;\n});\n\n\n/* Notifications */\n\nfunction notifyError(title, msg) {\n    PNotify.alert({\n        text: msg,\n        title: title,\n        hide: false,\n        type: 'error',\n    });\n}\nwindow.notifyError = notifyError;\n\nfunction autoDismissingNotification({\n    message = '',\n    type = 'success',\n    title = gettext(\"Success\"),\n    hide = true,\n    textTrusted = false\n} = {}) {\n    const notice = PNotify.alert({\n        title: title,\n        text: message,\n        type: type,\n        hide: hide,\n        textTrusted: textTrusted,\n        width: '350px',\n        minHeight: '150px',\n        delay: 3000,\n        stack: {\n            'dir1': 'right',\n            'dir2': 'up',\n            'firstpos1': 0,\n            'firstpos2': 0\n        },\n        modules: {\n            Buttons: {\n                closer: true,\n                closerHover: false,\n                sticker: false\n            }\n        }\n    });\n    return notice;\n}\n\nwindow.autoDismissingNotification = autoDismissingNotification;\n\n$(document).ready(function() {\n    $(document).on('hidden.bs.modal', '.modal', function () {\n        if ($('.modal:visible').length) {\n            $(document.body).addClass('modal-open');\n        } else {\n            $(document.body).removeClass('modal-open');\n        }\n    });\n});\n\n\n\n/*\n* Pop-up window for help docs and guidance on forms\n*/\n\nfunction newPopup(url, windowName) {\n    return window.open(url,windowName,'height=768,width=1366,left=1200,top=10,titlebar=no,toolbar=no,menubar=no,location=no,directories=no,status=no');\n}\nwindow.newPopup = newPopup;\n\n// EXAMPLE: <a onclick=\"newPopup('https://docs.google.com/document/d/1tDwo3m1ychefNiAMr-8hCZnhEugQlt36AOyUYHlPbVo/edit?usp=sharing','Form Help/Guidance'); return false;\" href=\"#\" class=\"btn btn-sm btn-info\">Form Help/Guidance</a>\n\nconst DEFAULT_DESTRUCTIVE_MESSAGE = gettext(\"Your changes will be recorded in a change log. For future reference, please share your reason for these changes.\")\nconst DEFAULT_NONDESTRUCTIVE_MESSAGE = gettext('Your changes will be recorded in a change log. For future reference, please share your reason for these changes.')\nconst DEFAULT_NO_RATIONALE_TEXT = gettext(\"This action cannot be undone\");\n\nwindow.DEFAULT_DESTRUCTIVE_MESSAGE = DEFAULT_DESTRUCTIVE_MESSAGE;\nwindow.DEFAULT_NONDESTRUCTIVE_MESSAGE = DEFAULT_NONDESTRUCTIVE_MESSAGE;\nwindow.DEFAULT_NO_RATIONALE_TEXT = DEFAULT_NO_RATIONALE_TEXT;\n\n// This is only until we get indicator_form_common_js moved to webpack and out of html (makemessages bug)\n// these translation strings are used exclusively in the indicator setup form:\nconst target_with_results_text = (numResults) => {\n    return interpolate(\n        ngettext('Removing this target means that %s result will no longer have targets associated with it.',\n                 'Removing this target means that %s results will no longer have targets associated with them.',\n                 numResults),\n        [numResults]);\n}\nwindow.target_with_results_text = target_with_results_text;\n\n\nconst create_changeset_notice = ({\n    on_submit = () => {},\n    on_cancel = () => {},\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    type = 'notice',\n    inner = '',\n    context = null,\n    rationale_required = true,\n    showCloser = false,\n} = {}) => {\n    var notice = PNotify.alert({\n        text: $(`<div><form action=\"\" method=\"post\" class=\"form\">${inner}</form></div>`).html(),\n        textTrusted: true,\n        icon: false,\n        width: '350px',\n        hide: false,\n        type: type,\n        addClass: 'program-page__rationale-form',\n        stack: {\n            'overlayClose': true,\n            'dir1': 'right',\n            'dir2': 'up',\n            'firstpos1': 20,\n            'firstpos2': 20,\n            'context': context\n        },\n        modules: {\n            Buttons: {\n                closer: showCloser,\n                closerHover: false,\n                sticker: false\n            },\n            Confirm: {\n                confirm: true,\n                buttons: [\n                    {\n                        text: confirm_text,\n                        primary: true,\n                        addClass:(type == 'error')?'btn-danger':'',\n                        click: function (notice) {\n                            var close = true;\n                            var textarea = $(notice.refs.elem).find('textarea[name=\"rationale\"]')\n                            var rationale = textarea.val();\n                            textarea.parent().find('.invalid-feedback').remove();\n                            if(!rationale && rationale_required) {\n                                textarea.addClass('is-invalid');\n                                textarea.parent().append(\n                                    '<div class=\"invalid-feedback\">'\n                                    + gettext('A reason is required.')\n                                    + '</div>'\n                                );\n                                return false;\n                            } else {\n                                textarea.removeClass('is-invalid');\n                            }\n                            if(on_submit) {\n                                close = on_submit(rationale);\n                                if(close === undefined) {\n                                    close = true;\n                                }\n                            }\n                            if(close) {\n                                document.getElementById('notification_blocking_div').style.display='none';\n                                notice.close();\n                            }\n                        }\n                    },\n                    {\n                        text: cancel_text,\n                        click: function (notice) {\n                            close = on_cancel()\n                            if(close === undefined) {\n                                close = true;\n                            }\n\n                            if(close) {\n                                document.getElementById('notification_blocking_div').style.display='none';\n                                notice.close();\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    });\n    if (on_cancel) {\n        notice.on('click', function(e) {\n            if ($(e.target).is('.ui-pnotify-closer *')) {\n                let close = on_cancel();\n                if (close || close === undefined) {\n                    document.getElementById('notification_blocking_div').style.display='none';\n                    notice.close();\n                }\n        }});\n    }\n}\n\n// Consider using the create_unified_changeset_notice instead of this one\nwindow.create_destructive_changeset_notice = ({\n    message_text = DEFAULT_DESTRUCTIVE_MESSAGE,\n    on_submit = () => {},\n    on_cancel = () => {},\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    context = null,\n    no_preamble = false,\n    showCloser = false,\n    preamble = false\n} = {}) => {\n    if(!message_text) {message_text = DEFAULT_DESTRUCTIVE_MESSAGE}\n    if (!preamble) { preamble = (no_preamble)?'':`<span class='text-danger'>${gettext(\"This action cannot be undone.\")}</span>`}\n    const inner = `\n        <div class=\"row\">\n            <div class=\"col\">\n                <h2 class=\"text-danger\">${gettext(\"Warning\")}</h2>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                ${preamble}\n                ${message_text}\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <div class=\"form-group\">\n                    <textarea class=\"form-control\" name=\"rationale\"></textarea>\n                </div>\n            </div>\n        </div>\n    `;\n    return create_changeset_notice({\n        message_text: message_text,\n        on_submit: on_submit,\n        on_cancel: on_cancel,\n        confirm_text: confirm_text,\n        cancel_text: cancel_text,\n        type: 'error',\n        inner: inner,\n        context: context,\n        showCloser: showCloser\n    })\n}\n\n// Consider using the create_unified_changeset_notice instead of this one\nwindow.create_nondestructive_changeset_notice = ({\n    message_text = DEFAULT_NONDESTRUCTIVE_MESSAGE,\n    on_submit = () => {},\n    on_cancel = () => {},\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    context = null\n} = {}) => {\n    if(!message_text) {message_text = DEFAULT_NONDESTRUCTIVE_MESSAGE}\n    const inner = `\n        <div class=\"row\">\n            <div class=\"col\">\n                <h2>${gettext(\"Reason for change\")}</h2>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                ${message_text}\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <div class=\"form-group\">\n                    <textarea class=\"form-control\" name=\"rationale\"></textarea>\n                </div>\n            </div>\n        </div>\n    `;\n    return create_changeset_notice({\n        message_text: message_text,\n        on_submit: on_submit,\n        on_cancel: on_cancel,\n        confirm_text: confirm_text,\n        cancel_text: cancel_text,\n        type: 'notice',\n        inner: inner,\n        context: context\n    })\n}\n\n// Consider using the create_unified_changeset_notice instead of this one\nwindow.create_no_rationale_changeset_notice = ({\n    message_text = DEFAULT_NO_RATIONALE_TEXT,\n    on_submit = () => {},\n    on_cancel = () => {},\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    context = null,\n    type = 'error',\n    preamble = false,\n    blocking = false\n} = {}) => {\n    if (blocking) {\n        document.getElementById('notification_blocking_div').style.display='block';\n    }\n    if (!message_text) {message_text = DEFAULT_NO_RATIONALE_TEXT}\n    if (!preamble) {preamble = gettext(\"This action cannot be undone.\")};\n    const inner = `\n        <div class=\"row\">\n            <div class=\"col\">\n                <h2 class=\"pnotify--header\"><i class=\"fas fa-exclamation-triangle\"></i>${gettext(\"Warning\")}</h2>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <span class='text-danger'>\n                    ${preamble}\n                </span>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <span>\n                    ${message_text}\n                </span>\n            </div>\n        </div>\n    `;\n    return create_changeset_notice({\n        message_text: message_text,\n        on_submit: on_submit,\n        on_cancel: on_cancel,\n        confirm_text: confirm_text,\n        cancel_text: cancel_text,\n        type: type,\n        inner: inner,\n        context: context,\n        rationale_required: false,\n        showCloser: true\n    });\n}\n\n/*\n* Consider using this notification function rather than the more specific ones above.  It should be able to\n* everything they can do. The configurable parameters are for the 4 sections of the notification and\n* for other visual and functional elements. Leave any of these null or false to omit them.\n* There is NO DEFAULT TEXT. You must explicitly provide text to text elements.\n*/\n\nimport { create_unified_changeset_notice } from 'components/changesetNotice.js';\nwindow.create_unified_changeset_notice = create_unified_changeset_notice;\n\n\nconst createPnotifyAlert = (passedInConfig) => {\n    let config = {\n        textTrusted: true,\n        icon: false,\n        width: '350px',\n        hide: true,\n        delay: 2000,\n        type: 'alert',\n    };\n    Object.assign(config, passedInConfig);\n\n    let faClass = \"fa-exclamation-triangle\";\n    if (config.type == \"success\"){\n        faClass = \"fa-check-circle\";\n    }\n\n    const inner = `\n        <div class=\"row\">\n            <div class=\"col\">\n                <h2 class=\"pnotify--header\"><i class=\"fas ${faClass}\"></i>${gettext(\"Success!\")}</h2>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <span class='text-success'>\n                    ${config.preamble}\n                </span>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col\">\n                <span>\n                    ${config.message_text}\n                </span>\n            </div>\n        </div>\n    `;\n\n    config.text = $(`<div><form action=\"\" method=\"post\" class=\"form container\">${inner}</form></div>`).html();\n    PNotify.alert(config);\n};\n\nwindow.success_notice = (userConfig) =>{\n    let config = {\n        message_text: \"Update successful.\",\n        preamble: \"\",\n        animation: \"fade\",\n        type: \"success\",\n    }\n    Object.assign(config, userConfig);\n\n    createPnotifyAlert(config);\n};\n\n\n/*\n * Take a jquery element and scroll the to the bottom of said element\n * The element should represent the top level element controlled by a scroll bar\n * One might think that is always 'html' but can also be a modal div overlay or possibly\n * a div with overflow: scroll\n */\nfunction scrollToBottom($el) {\n    let height = $el.prop('scrollHeight');\n    $el.animate({ scrollTop: height }, 'slow');\n}\nwindow.scrollToBottom = scrollToBottom;\n\n\nconst CONTROL_CHARACTER_KEYCODES = [\n    8, //backspace\n    9, //tab\n    13, //enter\n    27, //escape\n    35, //end,\n    36, //home\n    37, //arrow left\n    39, //arrow right\n    46, //delete\n]\n\nconst SPANISH = 'es';\nconst FRENCH = 'fr';\nconst ENGLISH = 'en';\n\n/***********\n * LOCALE-AWARE FORM INPUT FUNCTIONS:\n *  these functions are for _inputs_ (and divs/spans being used to show user input)\n *  they do not account for thousands separators, and merely convert back and forth between ',' and '.' floating-point separators\n **********/\n\n/**\n * takes a selector string, (i.e. '#id_achieved') returns an input that is validated based on\n * universal rules (2 decimal places, comma or period as floating-point separator, no negative signs)\n * e.g.```\n *      let $myInput = window.getValidatedNumericInput('#my_input_id');\n * ```\n * returns the input selected by $('#my_input_id') but with rules preventing non-numeric input, and with an auto-updating\n * display value (strips trailing zeros, converts floating point to locale-aware display of a number)\n */\nfunction getValidatedNumericInput(selector) {\n    let $input = $(selector);\n    const floatingPointSeparator = [FRENCH, SPANISH].includes(userLang) ? 188 : 190;\n    function preventNonNumericInput(e) {\n        // allow cursor control characters:\n        if (CONTROL_CHARACTER_KEYCODES.includes(e.keyCode) ||\n            // allow: Ctrl characters (don't break browsers):\n            (e.ctrlKey === true || e.metaKey === true)\n           ) {\n            // don't do anything (allow key to be used as normal)\n            return;\n        }\n        // if decimal point/comma, and already 2 digits to the right of it, and cursor is to the right of it, prevent:\n        let curVal = `${$(e.target).val()}`;\n        let floatingPointPosition = Math.max(curVal.indexOf('.'), curVal.indexOf(','));\n        let curSelection = curVal.slice(e.target.selectionStart, e.target.selectionEnd);\n        let selectionContainsSeparator = (curSelection && curSelection.length > 0 && (curSelection.match(/[,.]/) || []).length > 0);\n        if ((curVal.match(/[,.]/) || []).length > 0 &&\n            curVal.length - floatingPointPosition > 2 &&\n            e.target.selectionStart > floatingPointPosition && (!curSelection || curSelection.length < 1)) {\n            //prevent numbers more than 2 spaces to the right of the decimal/comma from being entered:\n            e.preventDefault();\n            return;\n        }\n        // allow numbers (48 - 57 map to 0-9):\n        if ((e.keyCode >= 48 && e.keyCode <= 57 && !e.shiftKey) ||\n            // allow numpad numbers:\n            ((e.keyCode >= 96 && e.keyCode <= 105) && !e.shiftKey) ||\n            // allow comma or period if there isn't one already:\n            (e.keyCode == floatingPointSeparator && ((curVal.match(/[,.]/) || []).length < 1 || selectionContainsSeparator)) &&\n            !e.shiftKey) {\n            // don't do anything (allow number / decimal / comma to be entered as normal)\n            return;\n        }\n        // prevent any key not mentioned above from being entered:\n        e.preventDefault();\n        return;\n    }\n    $input.keydown(preventNonNumericInput);\n    $input.each(function() {\n        $(this).updateDisplayVal();\n    });\n    $input.on('blur', function(e) {\n        $(e.target).updateDisplayVal();\n    });\n    return $input;\n}\n\nwindow.getValidatedNumericInput = getValidatedNumericInput;\n\n\njQuery.fn.extend({\n    // $input.numericVal() returns a float or null, and handles a displayed value with a comma floating-point separator or decimal\n    // so \"43,2\" as a French/Spanish number returns, from numericVal(), the float 43.2\n    numericVal: function() {\n        if (this.is('input')) {\n            return !isNaN(parseFloat(this.val().replace(',', '.'))) ? parseFloat(this.val().replace(',', '.')) : null;\n        }\n        if (this.is('div')) {\n            let value = this.html();\n            value = value.replace(\"%\", \"\");\n            value = value.replace(',', '.');\n            value = parseFloat(value);\n            return !isNaN(value) ? value : null;\n        }\n    },\n    // updates the displayed value based on the stored numeric value of an input:\n    updateDisplayVal: function() {\n        this.displayVal(this.val());\n    },\n    // helper function: called with a float/int/string representation of a number, returns a display-ready string,\n    // with trailing zeros removed (and trailing , or .) and the correct floating-point separator based on language\n    toDisplayVal: function(value) {\n        value = `${value}`.replace(',', '.');\n        if (isNaN(parseFloat(value))) {\n            return '';\n        }\n        value = `${parseFloat(value).toFixed(2)}`;\n        if ([FRENCH, SPANISH].includes(userLang)) {\n            value = value.replace('.', ',');\n        } else {\n            value = value.replace(',', '.');\n        }\n        value = value.replace(new RegExp(\"([,\\.][1-9])?[,\\.]?0+$\"), \"$1\");\n        return value;\n    },\n    // called with a float/int/string representation of a number, processes it with the above helper function toDisplayVal,\n    // and sets the val (if an input) or the inner html (if a span/div)\n    displayVal: function(value, percent = false) {\n        value = this.toDisplayVal(value);\n        if (this.is('input')) {\n            this.val(value);\n        }\n        if (this.is('div') || this.is('span')) {\n            this.html(`${value}`);\n        }\n    }\n});\n\n\n/***********\n * LOCALE-AWARE DISPLAY FUNCTIONS\n *  these functions are for _display_ - they will break forms\n *  they account for thousands separators and floating point separators, and trim zeros.\n *  12423.40:\n *      ES: 12.423,4\n *      FR: 12 423,4\n *      EN: 12,423.4\n **********/\n\n\nimport { localizeNumber, localizePercent } from 'general_utilities';\nwindow.localizeNumber = localizeNumber;\nwindow.localizePercent = localizePercent;\n\n\n// Useful if you need to delocalize form values, e.g. to evaluate if the form has changed.\n// Doesn't delocalize the thousands separator.\nwindow.delocalizeRadix = function (localizedValue) {\n    let delocalized = localizedValue.replace(\",\", \".\");\n    return isNaN(delocalized) ? localizedValue : delocalized;\n}\n\n\nwindow.normalizeNumber = function (value) {\n    if (isNaN(parseFloat(value)) || isDate(value)) {\n        return value;\n    }\n    else {\n        return parseFloat(value).toString();\n    }\n};\n\n","/* Site-wide constants */\n\n\n/**\n * JS_GLOBALS is in base.html (base Tola template) - delivered by middleware from the backend\n * this function returns the global constant for a given key (i.e. 'reason_for_change_options')\n */\n\nfunction getGlobal(key) {\n    if ((typeof JS_GLOBALS !== 'undefined')  && JS_GLOBALS.hasOwnProperty(key)) {\n        return JS_GLOBALS[key];\n    }\n    return null;\n}\n\n\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\nconst EM_DASH = \"—\";\nconst BLANK_TABLE_CELL = EM_DASH;\n\n\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nconst TIME_AWARE_FREQUENCIES = [3, 4, 5, 6, 7];\nconst IRREGULAR_FREQUENCIES = [1, 2];\n\nconst TVA_FREQUENCY_LABELS = Object.freeze(\n    {\n        1: gettext(\"Life of Program (LoP) only\"),\n        2: gettext(\"Midline and endline\"),\n        3: gettext(\"Annual\"),\n        4: gettext(\"Semi-annual\"),\n        5: gettext(\"Tri-annual\"),\n        6: gettext(\"Quarterly\"),\n        7: gettext(\"Monthly\")\n    }\n);\n\nconst TIMEPERIODS_FREQUENCY_LABELS = Object.freeze(\n    {\n        3: gettext(\"Years\"),\n        4: gettext(\"Semi-annual periods\"),\n        5: gettext(\"Tri-annual periods\"),\n        6: gettext(\"Quarters\"),\n        7: gettext(\"Months\")\n    }\n);\n\nexport { BLANK_OPTION, BLANK_LABEL, BLANK_TABLE_CELL, EM_DASH, TVA, TIMEPERIODS, TIME_AWARE_FREQUENCIES,\n         IRREGULAR_FREQUENCIES, TVA_FREQUENCY_LABELS, TIMEPERIODS_FREQUENCY_LABELS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nfunction getPeriodLabels() {\n    return {\n        targetperiodLabels: {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        },\n        timeperiodLabels: {\n            3: _gettext(\"Years\"),\n            5: _gettext(\"Tri-annual periods\"),\n            4: _gettext(\"Semi-annual periods\"),\n            7: _gettext(\"Months\"),\n            6: _gettext(\"Quarters\")\n        }\n    };\n}\n\nexport {getPeriodLabels};\n\nexport const STATUS_CODES = {\n    NO_INDICATOR_IN_UPDATE: 1\n};\n\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n    nonReporting: 8\n});\n\nexport const RFC_OPTIONS = getGlobal('reason_for_change_options') ?? [];"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAKA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA9CA;AAiDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAjBA;AA+BA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AADA;;;;;;;;;;;;AClRA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAnBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAgBA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAHA;AADA;AAfA;AAuBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAEA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA9BA;AAiCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAnCA;AANA;AAhBA;AACA;AA0EA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAsiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACj4BA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAYA;;;;A","sourceRoot":""}