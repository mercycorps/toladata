{"version":3,"file":"tola_management_country-13acbd9c7daf682abc7d.js","sources":["webpack:///./js/pages/tola_management_pages/country/views.js","webpack:///./js/pages/tola_management_pages/country/components/edit_country_profile.js","webpack:///./js/components/helpPopover.js","webpack:///./js/components/changesetNotice.js","webpack:///./js/pages/tola_management_pages/country/models.js","webpack:///./js/pages/tola_management_pages/country/components/edit_objectives.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/pages/tola_management_pages/country/components/country_history.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/components/changelog.js","webpack:///./js/pages/tola_management_pages/country/index.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/general_utilities.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/country/api.js","webpack:///./js/pages/tola_management_pages/country/components/edit_disaggregations.js","webpack:///./js/pages/tola_management_pages/country/components/country_editor.js","webpack:///./js/components/folding-sidebar.js","webpack:///./js/constants.js"],"sourcesContent":["import React from 'react'\nimport { observer } from \"mobx-react\"\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CountryEditor from './components/country_editor'\nimport EditCountryProfile from './components/edit_country_profile'\nimport EditDisaggregations from './components/edit_disaggregations'\nimport EditObjectives from './components/edit_objectives'\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CountryHistory from \"./components/country_history\";\nimport {sortObjectListByValue} from \"../../../general_utilities\";\n\nconst CountryFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"countries_filter\">{gettext(\"Find a Country\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('countries', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"countries_filter\" />\n    </div>\n})\n\nconst OrganizationFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"organizations_filter\">{gettext(\"Organizations\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.organizations}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('organizations', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"organizations_filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, filterOptions}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"programs-filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={filterOptions}\n            onChange={(e) => store.changeFilter('programs', e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"programs-filter\" />\n    </div>\n})\n\nexport const IndexView = observer(\n    ({store}) => {\n        const countryFilterOptions = sortObjectListByValue(store.allCountries.map(country => {return {value: country.id, label: country.country}}))\n        const organizationFilterOptions = sortObjectListByValue(Object.entries(store.organizations).map(([id, org]) => ({value: org.id, label: org.name})))\n        const programFilterOptions = sortObjectListByValue(Object.entries(store.allPrograms).map(([id, program]) => ({value: program.id, label: program.name})))\n        return <div id=\"country-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <OrganizationFilter store={store} filterOptions={organizationFilterOptions} />\n                    <ProgramFilter store={store} filterOptions={programFilterOptions} />\n\n                </div>\n                <div className=\"filter-section filter-buttons\">\n                    <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                    <button className=\"btn btn-reset\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col admin-list\">\n                <header className=\"page-title\">\n                    <h1>{gettext(\"Admin:\")} <small>{gettext(\"Countries\")}</small></h1>\n                </header>\n                <div className=\"admin-list__controls\">\n                    <div className=\"controls__top-filter\">\n                        <CountryFilter store={store} filterOptions={countryFilterOptions} />\n                    </div>\n                    {store.is_superuser &&\n                    <div className=\"controls__buttons\">\n                        <a href=\"#\" tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => store.addCountry()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add Country\")}\n                        </a>\n                    </div>\n                    }\n                </div>\n                <LoadingSpinner isLoading={store.fetching_main_listing || store.applying_bulk_updates }>\n                    <div className=\"admin-list__table\">\n                        <ManagementTable\n                            newData={store.new_country}\n                            data={store.countries}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\"1\"></Col>\n                                    <Col size=\"60\">{gettext(\"Country\")}</Col>\n                                    <Col>{gettext(\"Organizations\")}</Col>\n                                    <Col>{gettext(\"Programs\")}</Col>\n                                    <Col>{gettext(\"Users\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                            <Row\n                                expanded={data.id == store.editing_target}\n                                Expando={observer(({Wrapper}) =>\n                                    <Wrapper>\n                                        <CountryEditor\n                                            notifyPaneChange={(new_pane) => store.onProfilePaneChange(new_pane)}\n                                            active_pane={store.active_editor_pane}\n                                            new={data.id == 'new'}\n                                            ProfileSection={observer(() =>\n                                                <LoadingSpinner isLoading={\n                                                    store.fetching_editing_data ||\n                                                    store.saving ||\n                                                    store.fetching_editing_history\n                                                }>\n                                                    <EditCountryProfile\n                                                        new={data.id == 'new'}\n                                                        country_data={data}\n                                                        organizationOptions={organizationFilterOptions}\n                                                        onUpdate={(id, data) => store.updateCountry(id, data)}\n                                                        onCreate={(new_country_data) => store.saveNewCountry(new_country_data)}\n                                                        errors={store.editing_errors}\n                                                        onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            StrategicObjectiveSection={observer(() =>\n                                                <LoadingSpinner isLoading={\n                                                    store.fetching_editing_data ||\n                                                    store.saving ||\n                                                    store.fetching_editing_history\n                                                }>\n                                                    <EditObjectives\n                                                        country_id={data.id}\n                                                        objectives={store.editing_objectives_data}\n                                                        addObjective={() => store.addObjective()}\n                                                        onUpdate={(id, data) => store.updateObjective(id, data)}\n                                                        onCreate={(data) => store.createObjective(data)}\n                                                        onDelete={(id) => store.deleteObjective(id)}\n                                                        errors={store.editing_objectives_errors}\n                                                        clearErrors={() => store.clearObjectiveEditingErrors()}\n                                                        onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            DisaggregationSection={observer(() =>\n                                                <LoadingSpinner isLoading={\n                                                    store.fetching_editing_data ||\n                                                    store.saving ||\n                                                    store.fetching_editing_history\n                                                }>\n                                                    <EditDisaggregations\n                                                        country_id={data.id}\n                                                        countryName={data.country}\n                                                        programs={store.getCountryPrograms(data.id)}\n                                                        disaggregations={store.editing_disaggregations_data}\n                                                        addDisaggregation={() => store.addDisaggregation()}\n                                                        assignLabelErrors={store.assignDisaggregationLabelErrors}\n                                                        onDelete={store.deleteDisaggregation.bind(store)}\n                                                        onArchive={(id) => store.archiveDisaggregation(id)}\n                                                        onUnarchive={(id) => store.unarchiveDisaggregation(id)}\n                                                        onUpdate={(id, data) => store.updateDisaggregation(id, data)}\n                                                        onCreate={(data) => store.createDisaggregation(data)}\n                                                        errors={store.editing_disaggregations_errors}\n                                                        clearErrors={() => store.clearDisaggregationEditingErrors()}\n                                                        onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            HistorySection={observer(() =>\n                                                <LoadingSpinner isLoading={\n                                                    store.fetching_editing_data ||\n                                                    store.saving ||\n                                                    store.fetching_editing_history\n                                                }>\n                                                    <CountryHistory\n                                                        store={store}\n                                                        history={store.editing_history}\n                                                    />\n                                                </LoadingSpinner>\n                                            )}\n                                            fetchObjectives={(countryId) => store.fetchObjectives(countryId)}\n                                        />\n                                    </Wrapper>\n                                )}>\n                                    <Col size=\"0.2\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        <div className=\"expando-toggle icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                            <div className=\"expando-toggle__icon\">\n                                                <FontAwesomeIcon icon={(store.editing_target == data.id) ? 'caret-down' : 'caret-right'} />\n                                            </div>\n                                            <div className=\"expando-toggle__label\">\n                                                <i className=\"fas fa-globe\"/>&nbsp;\n                                                {data.country || \"---\"}\n                                            </div>\n                                        </div>\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.organizations_count ?\n                                            <a href={`/tola_management/organization/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-building\"/>&nbsp;{\n                                                    // # Translators: preceded by a number, i.e. \"3 organizations\" or \"1 organization\"\n                                                    interpolate(ngettext(\"%s organization\", \"%s organizations\", data.organizations_count), [data.organizations_count])\n                                                    }\n                                            </a>\n                                        : <span><i className=\"fas fa-building\"/>&nbsp;{\n                                            // # Translators: when no organizations are connected to the item\n                                            gettext(\"0 organizations\")}</span>}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.programs_count ?\n                                            <a href={`/tola_management/program/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-cubes\"/>&nbsp;{\n                                                    // # Translators: preceded by a number, i.e. \"3 programs\" or \"1 program\"\n                                                    interpolate(ngettext(\"%s program\", \"%s programs\", data.programs_count), [data.programs_count])\n                                                }\n                                            </a>\n                                        : <span><i className=\"fas fa-cubes\"/>&nbsp;{\n                                            // # Translators: when no programs are connected to the item\n                                            gettext(\"0 programs\")\n                                            }</span>}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                        { data.users_count ?\n                                            <a href={`/tola_management/user/?countries[]=${data.id}`}>\n                                                <i className=\"fas fa-users\"/>&nbsp;{\n                                                    // # Translators: preceded by a number, i.e. \"3 users\" or \"1 user\"\n                                                    interpolate(ngettext(\"%s user\", \"%s users\", data.users_count), [data.users_count])\n                                                }\n                                            </a>\n                                        : <span><i className=\"fas fa-users\"/>&nbsp;{\n                                            // # Translators: when no users are connected to the item\n                                            gettext(\"0 users\")\n                                        }</span>}\n                                    </Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.country_count ? `${store.country_count} ${gettext(\"countries\")}`:`---`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport Select from 'react-select'\nimport { observer } from \"mobx-react\"\nimport classNames from 'classnames'\n\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n    <div className=\"invalid-feedback\">\n        {errorMessages.map((message, index) =>\n            <span key={index}>{message}</span>\n        )}\n    </div>\n    )\n})\n@observer\nexport default class EditCountryProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const {country_data} = props\n\n        this.state = {\n            original_data: Object.assign({}, country_data),\n            managed_data: Object.assign({}, country_data)\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_data) != JSON.stringify(this.state.original_data))\n    }\n\n    save() {\n        const country_id = this.props.country_data.id\n        const country_data = this.state.managed_data\n        this.props.onUpdate(country_id, country_data)\n    }\n\n    saveNew() {\n        const country_data = this.state.managed_data\n        this.props.onCreate(country_data)\n    }\n\n    updateFormField(fieldKey, val) {\n        this.setState({\n            managed_data: Object.assign(this.state.managed_data, {[fieldKey]: val})\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    resetForm() {\n        this.setState({\n            managed_data: Object.assign({}, this.state.original_data)\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    render() {\n        const formdata = this.state.managed_data\n        const selectedOrganization = this.props.organizationOptions.find(x=>x.value==formdata.organization)\n        return (\n            <div className=\"tab-pane--react\">\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-name-input\">{gettext(\"Country name\")}<span className=\"required\">*</span></label>\n                        <input\n                            type=\"text\"\n                            value={formdata.country}\n                            onChange={(e) => this.updateFormField('country', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('country') })}\n                            id=\"country-name-input\"\n                            required />\n                        <ErrorFeedback errorMessages={this.formErrors('country')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-description-input\">{gettext(\"Description\")}</label>\n                        <textarea\n                            value={formdata.description}\n                            onChange={(e) => this.updateFormField('description', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('description') })}\n                            id=\"country-description-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('description')} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"country-code-input\">{gettext(\"Country Code\")}</label>\n                        <input\n                            value={formdata.code}\n                            onChange={(e) => this.updateFormField('code', e.target.value) }\n                            className={classNames('form-control', { 'is-invalid': this.formErrors('code') })}\n                            id=\"country-code-input\"\n                            />\n                        <ErrorFeedback errorMessages={this.formErrors('code')} />\n                    </div>\n                    {this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save Changes\")}</button>\n                        {/* <button className=\"btn btn-primary\" onClick={(e) => this.saveNewAndAddAnother(e)}>Save And Add Another</button> */}\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom';\n\nexport default class HelpPopover extends React.Component {\n    constructor(props) {\n        super(props)\n        this.placement = props.placement || null;\n        this.popoverRef = props.innerRef || React.createRef();\n        this.iconClass = props.iconClass || \"far fa-question-circle\";\n        this.iconStyle = props.iconStyle || {};\n        this.linkStyle = {};\n        if (props.linkHeight) {\n            this.linkStyle.height = props.linkHeight;\n        }\n    }\n\n    render() {\n        return (\n            <a\n                tabIndex=\"0\"\n                style={ this.linkStyle }\n                data-toggle=\"popover\"\n                data-trigger=\"focus\"\n                data-html=\"true\"\n                data-placement={this.placement}\n                data-content={this.props.content}\n                className={this.props.className}\n                ref={this.popoverRef}\n                >\n            <i aria-label={ this.props.ariaText } style={ this.iconStyle } className={ this.iconClass }></i></a>\n        )\n    }\n}\n\nexport class BootstrapPopoverButton extends React.Component {\n    popoverName = 'base';\n\n    componentDidMount = () => {\n        // make a cancelable (class method) function so clicking out of the popover will close it:\n        this.bodyClickHandler = (ev) => {\n            if ($(`#${this.popoverName}_popover_content`).parent().find($(ev.target)).length == 0) {\n                $(this.refs.target).popover('hide');\n            }\n        }\n        const popoverOpenHandler = () => {\n            // first make it so any click outside of the popover will hide it:\n            $('body').on('click', this.bodyClickHandler);\n            // update position (it's had content loaded):\n            $(this.refs.target).popover('update')\n                //when it hides destroy the body clickhandler:\n                .on('hide.bs.popover', () => {$('body').off('click', this.bodyClickHandler);});\n        };\n        const shownFn = (ev) => {\n            ReactDOM.render(\n                this.getPopoverContent(),\n                document.querySelector(`#${this.popoverName}_popover_content`),\n                popoverOpenHandler\n            );\n        };\n        $(this.refs.target).popover({\n            content: `<div id=\"${this.popoverName}_popover_content\"></div>`,\n            html: true,\n            placement: 'bottom'\n        }).on('shown.bs.popover', shownFn);\n    }\n\n    getPopoverContent = () => {\n        throw new Error('not implemented');\n    }\n}\n","import { RFC_OPTIONS } from '../constants';\n//import PNotify from 'pnotify/dist/es/PNotify.js'; // needed for jest teseting, leaving in for future testing attempts\n//import 'pnotify/dist/es/PNotifyCallbacks.js';\n//import 'pnotify/dist/es/PNotifyButtons.js';\n\nconst create_rfc_dropdown = ({\n    custom_rfc_options = null,\n} = {}) => {\n    let options = custom_rfc_options || RFC_OPTIONS;\n    if (!options) {\n        return '';\n    }\n    let rfc_section = document.createElement('section');\n    rfc_section.classList.add('pnotify__reason-for-change');\n    let form_div = document.createElement('div');\n    form_div.classList.add('form-group');\n    let label = document.createElement('label');\n    // # Translators: This is a label for a dropdown that presents several possible justifications for changing a value\n    label.appendChild(document.createTextNode(gettext('Reason for change')));\n    label.htmlFor = 'reasons_for_change_select';\n    form_div.appendChild(label);\n    let select = document.createElement('select');\n    select.name = 'reasons_for_change';\n    select.id = 'reasons_for_change_select';\n    select.setAttribute('multiple', '');\n    select.classList.add('form-control');\n    for (let i=0; i<options.length; i++) {\n        let optionElement = document.createElement('option');\n        optionElement.value = options[i].value;\n        optionElement.label = options[i].label;\n        optionElement.text = options[i].label;\n        if (i == options.length-1) {\n            let divider = document.createElement('option');\n            divider.setAttribute('data-role', 'divider');\n            select.appendChild(divider);\n        }\n        select.appendChild(optionElement);\n    }\n    form_div.appendChild(select);\n    rfc_section.appendChild(form_div);\n    return rfc_section;\n}\n\n/*\n* Consider using this notification function rather than the more specific ones above.  It should be able to\n* everything they can do. The configurable parameters are for the 4 sections of the notification and\n* for other visual and functional elements. Leave any of these null or false to omit them.\n* There is NO DEFAULT TEXT. You must explicitly provide text to text elements.\n*/\n\nconst create_unified_changeset_notice = ({\n    header = null, // text for the header\n    show_icon = true, // show an appropriate icon in the header\n    message_text = null, // appears in black (body color) text\n    preamble = null, // appears in colored text below the header\n    on_submit = () => {}, // action to trigger on submit\n    on_cancel = () => {}, // action to trigger on cancel\n    rfc_required = true, // is reason for change required (can be overridden by validation_type)\n    rfc_options = null, // reason for change dropdown options or true for default\n    rationale_required = true, // do not allow submission without writing a rationale (can be overridden by validation_type)\n    include_rationale = false, // shows rationale textarea\n    validation_type = 0, // Types - 0: use paramaters/defaults, 1: rationale is optional if rfc is chosen, unless rfc value is other\n    showCloser = true, // show close box\n    // # Translators: Button to approve a form\n    confirm_text = gettext('Ok'),\n    // # Translators: Button to cancel a form submission\n    cancel_text = gettext('Cancel'),\n    context = null,\n    notice_type = 'notice', // possible values: error (danger/red), info (blue), success (green), notice (warning/yellow)\n    blocking = true,\n    self_dismissing = false, // automatically hides the notice after 8000 ms (default). NOTE: this is the OPPOSITE behavior as default PNotify\n    dismiss_delay = 8000, // also PNotify default\n} = {}) => {\n    let header_icons = {\n        'error': 'fa-exclamation-triangle',\n        'info': 'fa-info-circle',\n        'success': 'fa-check-circle',\n        'notice': 'fa-exclamation-triangle',\n    };\n    let color_classes = {\n        'error': 'danger',\n        'info': 'info',\n        'success': 'success',\n        'notice': 'primary',\n    };\n\n    let icon = '';\n\n    if (show_icon) {\n        icon = `<i class=\"fas ${header_icons[notice_type]}\"></i>`\n    }\n\n    const header_section = (header || icon) ?\n        `<header class=\"pnotify__header\">\n            <h4>\n                ${icon}\n                ${header ? header : ''}\n            </h4>\n        </header>` : '';\n\n    const preamble_section = !preamble ? '' :\n        `<section class=\"pnotify__preamble\">\n            <p><b>${preamble}</b></p>\n        </section>`;\n\n    const message_section = ! message_text ? '' :\n        `<section class=\"pnotify__message\">\n            <p>${message_text}</p>\n        </section>`;\n\n    let rfc_section = '';\n    if (rfc_options !== null) {\n        let custom_rfc_options = rfc_options === true ? null : rfc_options;\n        rfc_section = create_rfc_dropdown({custom_rfc_options: custom_rfc_options}).outerHTML;\n    }\n\n    // # Translators: This is the label for a textbox where a user can provide details about their reason for selecting a particular option\n    const rationale_label = rfc_section.length > 0 ?  `<label>${gettext(\"Details\")}</label>` : '';\n    const rationale_section = ! include_rationale ? '' :\n        `<section class=\"pnotify__rationale\">\n            <div class=\"form-group\">\n                ${rationale_label}\n                <textarea class=\"form-control\" name=\"rationale\" />\n            </div>\n        </section>`;\n\n    const inner = `\n        ${header_section}\n        ${preamble_section}\n        ${message_section}\n        ${rfc_section}\n        ${rationale_section}\n    `;\n\n\n    // IMPORTANT TODO\n    // **************\n    // Following code cribs from create_changeset_notice\n    // I left create_changeset_notice untouched to avoid lots of regressions\n    // I think we should deprecate create_changeset_notice entirely\n\n    let confirm_button = {\n        text: confirm_text,\n        primary: true,\n        addClass: 'btn-sm btn-' + color_classes[notice_type],\n        click: function (notice) {\n            let close = true;\n            let textarea = $(notice.refs.elem).find('textarea[name=\"rationale\"]');\n            textarea.parent().find('.invalid-feedback').remove();\n            let rationale = textarea.val() ? textarea.val().trim() : undefined; // trim whitespace to disallow whitespace-only submission\n            let rfc_select  = $(notice.refs.elem).find('select[name=\"reasons_for_change\"]');\n            let reasons_for_change = (rfc_select.val() || []).map(v => parseInt(v));\n            let is_valid = false;\n            switch (validation_type) {\n                case 1:\n                    // Uses RFC dropdown logic (either a rationale or a non-Other reason for change required):\n                    is_valid = (rationale || (reasons_for_change.length > 0 && reasons_for_change.indexOf(1) == -1))\n                    break;\n                case 0:\n                default:\n                    // Either a rationale is submitted, or there was no rationale form, or it was optional:\n                    is_valid = ((rationale || !include_rationale || !rationale_required) &&\n                    // Either one or more reasons for change or there were no options or they weren't required:\n                                (reasons_for_change.length > 0 || !rfc_options || !rfc_required));\n            }\n            if (is_valid){\n                textarea.removeClass('is-invalid');\n            } else {\n                textarea.addClass('is-invalid');\n                textarea.parent().append(\n                    '<div class=\"invalid-feedback\">'\n                    + gettext('A reason is required.')\n                    + '</div>'\n                );\n                return false;\n            }\n\n            if(on_submit) {\n                close = on_submit(rationale, reasons_for_change, validation_type);\n                if(close === undefined) {\n                    close = true;\n                }\n            }\n            if(close) {\n                document.getElementById('notification_blocking_div').style.display='none';\n                notice.close();\n            }\n        }\n    }\n\n    let cancel_button = {\n        text: cancel_text,\n        addClass: 'btn-sm',\n        click: function (notice) {\n            close = on_cancel()\n            if(close === undefined) {\n                close = true;\n            }\n\n            if(close) {\n                document.getElementById('notification_blocking_div').style.display='none';\n                notice.close();\n            }\n        }\n    }\n\n    var changeset_buttons = []\n\n    if (confirm_text) {\n        changeset_buttons.push(confirm_button)\n    }\n\n    if (cancel_text) {\n        changeset_buttons.push(cancel_button)\n    }\n\n    var notice = PNotify.alert({\n        text: $(`<div><form action=\"\" method=\"post\" class=\"form\">${inner}</form></div>`).html(),\n        textTrusted: true,\n        icon: false,\n        width: '350px',\n        hide: self_dismissing,\n        delay: dismiss_delay,\n        type: notice_type,\n        addClass: 'program-page__rationale-form',\n        stack: {\n            'overlayClose': true,\n            'dir1': 'right',\n            'dir2': 'up',\n            'firstpos1': 20,\n            'firstpos2': 20,\n            'context': context\n        },\n        modules: {\n            Buttons: {\n                closer: showCloser,\n                closerHover: false,\n                sticker: false\n            },\n            Confirm: {\n                align: 'flex-start',\n                confirm: true,\n                buttons: changeset_buttons\n            }\n        }\n    });\n\n    $('.pnotify__reason-for-change select').multiselect({\n        numberDisplayed: 1,\n        // # Translators: (preceded by a number) e.g. \"4 options selected\"\n        nSelectedText: ` ${gettext('selected')}`,\n        // # Translators: for a dropdown menu with no options checked:\n        nonSelectedText: gettext('None selected')\n    });\n\n\n\n    if (on_cancel) {\n        notice.on('click', function(e) {\n            if ($(e.target).is('.ui-pnotify-closer *')) {\n                let close = on_cancel();\n                if (close || close === undefined) {\n                    document.getElementById('notification_blocking_div').style.display='none';\n                    notice.close();\n                }\n        }});\n    }\n\n    // END CRIBBED CODE\n\n}\n\nexport { create_unified_changeset_notice };\n\nexport const testables = {\n    create_rfc_dropdown: create_rfc_dropdown,\n};\n","import { observable, computed, action, runInAction, toJS } from \"mobx\";\nimport {create_unified_changeset_notice} from '../../../components/changesetNotice';\n\n\nconst new_objective_data = {\n    id: 'new',\n    name: '',\n    description: '',\n    status: '',\n};\n\n\nexport class CountryStore {\n\n    //filter options\n    @observable organizations = {};\n    @observable users = [];\n    @observable sectors = [];\n\n    @observable filters = {\n        countries: [],\n        organizations: [],\n        sectors: [],\n        programStatus: null,\n        programs: [],\n    }\n\n    @observable appliedFilters = {};\n\n    @observable is_superuser = false;\n    @observable allCountries = [];\n    @observable countries = [];\n    @observable country_count = 0;\n    @observable new_country = null;\n    @observable fetching_main_listing = false;\n    @observable current_page = 0;\n    @observable total_pages = null;\n    @observable bulk_targets = new Map();\n    @observable bulk_targets_all = false;\n\n    @observable editing_target = null;\n    @observable editing_errors = {};\n    @observable fetching_editing_data = false;\n    @observable editing_objectives_data = [];\n    @observable editing_objectives_errors = {};\n    @observable editing_disaggregations_data = [];\n    @observable editing_disaggregations_errors = {};\n    @observable fetching_editing_history = false;\n    @observable editing_history = [];\n    @observable saving = false;\n\n    @observable bulk_targets = new Map();\n    @observable applying_bulk_updates = false;\n    @observable bulk_targets_all = false;\n\n    @observable changelog_expanded_rows = new Set();\n\n    constructor(\n        api,\n        initialData,\n    ) {\n        this.api = api\n        Object.assign(this, initialData)\n        this.appliedFilters = {...this.filters}\n        this.fetchCountries()\n    }\n\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, [filterKey, filterValue]) => {\n            if (Array.isArray(filterValue)) {\n                xs[filterKey] = filterValue.map(x => x.value)\n            } else if (filterValue) {\n                xs[filterKey] = filterValue.value\n            }\n            return xs\n        }, {})\n    }\n\n    getCountryPrograms(countryID) {\n        return this.allPrograms.filter((program) => program.country.includes(countryID))\n    }\n\n    @action\n    fetchCountries() {\n        if(this.dirtyConfirm()) {\n            this.fetching_main_listing = true\n            this.api.fetchCountries(this.current_page + 1, this.marshalFilters(this.appliedFilters)).then(results => {\n                runInAction(() => {\n                    this.active_editor_pane = 'profile'\n                    this.active_pane_is_dirty = false\n                    this.fetching_main_listing = false\n                    this.countries = results.results\n                    this.country_count = results.total_results\n                    this.total_pages = results.total_pages\n                    this.next_page =results.next_page\n                    this.previous_page = results.previous_page\n                })\n            })\n        }\n\n    }\n\n    @action\n    applyFilters() {\n        this.appliedFilters = {...this.filters}\n        this.current_page = 0\n        this.fetchCountries()\n    }\n\n    @action\n    changePage(page) {\n        if (page.selected == this.current_page) {\n            return\n        }\n        this.current_page = page.selected\n        this.bulk_targets = new Map()\n        this.bulk_targets_all = false;\n        this.fetchCountries()\n    }\n\n    @action\n    changeFilter(filterKey, value) {\n        this.filters = Object.assign(this.filters, {[filterKey]: value})\n        if (filterKey === \"countries\") {\n            // for \"Find a country\" filter, immediately apply filters when value changes:\n            this.applyFilters();\n        }\n    }\n\n    @action\n    clearFilters() {\n        let clearFilters = {\n            countries: this.filters.countries || [],\n            organizations: [],\n            sectors: [],\n            programStatus: null,\n            programs: [],\n        }\n        this.filters = Object.assign(this.filters, clearFilters);\n    }\n\n    @action\n    toggleEditingTarget(id) {\n        if(this.dirtyConfirm()){\n            if(this.editing_target === 'new') {\n                this.countries.shift();\n                this.editing_errors = {};\n            }\n\n            this.active_editor_pane = 'profile';\n            this.active_pane_is_dirty = false;\n            this.editing_disaggregations_errors = {};\n            if(this.editing_target === id) {\n                this.editing_target = false;\n                this.editing_errors = {};\n            } else {\n\n                this.editing_target = id;\n                this.fetching_editing_data = true;\n                this.fetching_editing_history = true;\n                Promise.all([\n                    this.api.fetchCountryObjectives(id),\n                    this.api.fetchCountryDisaggregations(id),\n                ]).then(([objectives_resp, disaggregations_resp]) => {\n                    runInAction(() => {\n                        this.fetching_editing_data = false;\n                        this.fetching_editing_history = true;\n                        this.editing_objectives_data = objectives_resp.data;\n                        this.editing_disaggregations_data = disaggregations_resp.data;\n                        this.updateHistory(id)\n                    })\n                })\n            }\n        }\n    }\n\n    updateLocalList(updated) {\n        this.countries = this.countries.reduce((acc, current) => {\n            if (current.id == updated.id) {\n                acc.push(updated)\n            } else {\n                acc.push(current)\n            }\n            return acc\n        }, [])\n    }\n\n    updateHistory(id) {\n        if (id === \"new\") {\n            this.editing_history = [];\n        }\n        else {\n            this.api.fetchCountryHistory(id).then(response => {\n                this.editing_history = response.data;\n                this.fetching_editing_history = false;\n            }).catch(errors => {\n                this.fetching_editing_history = false;\n            });\n        }\n    }\n\n    onSaveSuccessHandler({retroProgramCount}={}) {\n        let message = gettext(\"Successfully saved\")\n        if (retroProgramCount) {\n            message = interpolate(ngettext(\n                // # Translators: Success message shown to user when a new disaggregation has been saved and associated with existing data.\n                \"Disaggregation saved and automatically selected for all indicators in %s program.\",\n                \"Disaggregation saved and automatically selected for all indicators in %s programs.\",\n                retroProgramCount\n            ), [retroProgramCount])\n        }\n        PNotify.success({text: message, delay: 5000});\n    }\n\n    onSaveErrorHandler(message) {\n        PNotify.error({text: message || gettext(\"Saving failed\"), delay: 5000})\n    }\n\n    onDeleteSuccessHandler() {\n        // # Translators: Notification that a user has been able to delete a disaggregation\n        PNotify.success({text: gettext(\"Successfully deleted\"), delay: 5000})\n    }\n\n    onArchiveSuccessHandler() {\n        // # Translators: Notification that a user has been able to disable a disaggregation\n        PNotify.success({text: gettext(\"Successfully archived\"), delay: 5000})\n    }\n\n    onUnarchiveSuccessHandler() {\n        // # Translators: Notification that a user has been able to reactivate a disaggregation\n        PNotify.success({text: gettext(\"Successfully unarchived\"), delay: 5000})\n    }\n\n    onDuplicatedDisaggLabelMessage(message) {\n        PNotify.error({text: message ||\n            // # Translators: error message generated when item names are duplicated but are required to be unqiue.\n            gettext(\"Saving failed: Disaggregation categories should be unique within a disaggregation.\"),\n            delay: 5000\n        });\n    }\n\n    onDuplicatedDisaggTypeMessage(message) {\n        PNotify.error({text: message ||\n            // # Translators: error message generated when item names are duplicated but are required to be unqiue.\n            gettext(\"Saving failed: disaggregation names should be unique within a country.\"),\n            delay: 5000\n        });\n    }\n\n    @observable active_editor_pane = 'profile'\n\n    active_pane_is_dirty = false\n\n    dirtyConfirm() {\n        return !this.active_pane_is_dirty || (this.active_pane_is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    @action\n    onProfilePaneChange(new_pane) {\n        if(this.dirtyConfirm()) {\n            this.active_editor_pane = new_pane;\n            this.active_pane_is_dirty = false;\n        }\n    }\n\n    setActiveFormIsDirty(is_dirty) {\n        this.active_pane_is_dirty = is_dirty\n    }\n\n    @action\n    addCountry() {\n        if(this.dirtyConfirm()) {\n            if(this.editing_target == 'new') {\n                this.countries.shift()\n            }\n\n            this.active_editor_pane = 'profile'\n            this.active_pane_is_dirty = false\n\n            let new_country_data = {\n                id: \"new\",\n                country: \"\",\n                description: \"\",\n                code: \"\",\n                organizations: [],\n            }\n            this.countries.unshift(new_country_data)\n            this.editing_target = 'new'\n        }\n    }\n\n    @action\n    saveNewCountry(country_data) {\n        country_data.id = null;\n        this.saving = true;\n        this.api.createCountry(country_data).then(response => {\n            runInAction(()=> {\n                this.saving = false;\n                this.editing_errors = {};\n                this.editing_target = response.data.id;\n                this.active_pane_is_dirty = false;\n                this.countries.shift();\n                this.countries.unshift(response.data);\n                this.allCountries.unshift(response.data);\n                this.onSaveSuccessHandler();\n                this.updateHistory(response.data.id);\n            })\n        }).catch(errors => {\n            runInAction(()=> {\n                this.saving = false;\n                this.editing_errors = errors.response.data;\n                this.onSaveErrorHandler(errors.response.data.detail);\n            })\n        })\n    }\n\n    @action updateCountry(id, country_data) {\n        this.saving = true;\n        this.api.updateCountry(id, country_data)\n            .then(response =>\n                runInAction(() => {\n                    this.saving = false;\n                    this.editing_errors = {};\n                    this.active_pane_is_dirty = false;\n                    this.updateLocalList(response.data);\n                    this.onSaveSuccessHandler();\n                    this.updateHistory(id);\n                }))\n            .catch((errors) => {\n                runInAction(() => {\n                    this.saving = false;\n                    this.editing_errors = errors.response.data;\n                    this.onSaveErrorHandler(errors.response.data.detail);\n                })\n            })\n    }\n\n    @action addObjective() {\n        if (this.editing_objectives_data.find(objective => objective.id=='new')) {\n            return\n        }\n        this.editing_objectives_data = [...this.editing_objectives_data, new_objective_data]\n    }\n\n    @action updateObjective(id, data) {\n        this.editing_objectives_errors = {}\n        this.api.updateObjective(id, data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                let updatedObjective = response.data\n                this.active_pane_is_dirty = false\n                this.editing_objectives_data = this.editing_objectives_data.map(objective => {\n                    if (objective.id == updatedObjective.id) {\n                        return updatedObjective\n                    }\n                    return objective\n                })\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_objectives_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action createObjective(data) {\n        this.editing_objectives_errors = {}\n        this.api.createObjective(data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler()\n                this.active_pane_is_dirty = false\n                let newObjective = response.data\n                this.editing_objectives_data = [...this.editing_objectives_data.filter(objective => objective.id!='new'), newObjective]\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_objectives_errors = errors.response.data\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action deleteObjective(id) {\n        if (id=='new') {\n            this.editing_objectives_data = this.editing_objectives_data.filter(objective => objective.id!='new')\n            return\n        }\n        this.api.deleteObjective(id).then(response => {\n            runInAction(() => {\n                this.editing_objectives_data = this.editing_objectives_data.filter(objective => objective.id!=id)\n                this.onDeleteSuccessHandler()\n            })\n        }).catch((errors) => {\n            runInAction(() => {\n                this.onSaveErrorHandler(errors.response.data.detail)\n            })\n        })\n    }\n\n    @action clearObjectiveEditingErrors() {\n        this.editing_objectives_errors = {}\n    }\n\n    @action clearDisaggregationEditingErrors() {\n        this.editing_disaggregations_errors = {}\n    }\n\n    @action addDisaggregation() {\n        const new_disaggregation_data = {\n            id: 'new',\n            disaggregation_type: \"\",\n            selected_by_default: false,\n            is_archived: false,\n            labels: [{id: 'new', label: '', createdId: 'new-0'}],\n        }\n        if (this.editing_disaggregations_data.find(disaggregation => disaggregation.id=='new')) {\n            return\n        }\n        this.editing_disaggregations_data = [...this.editing_disaggregations_data, new_disaggregation_data]\n    }\n\n    @action deleteDisaggregation(id, callback) {\n        create_unified_changeset_notice({\n            header: gettext(\"Warning\"),\n            show_icon: true,\n            preamble: gettext(\"This action cannot be undone.\"),\n            // # Translators: This is a confirmation prompt to confirm a user wants to delete an item\n            message_text: gettext(\"Are you sure you want to delete this disaggregation?\"),\n            include_rationale: false,\n            rationale_required: false,\n            showCloser: true,\n            notice_type: 'error',\n            on_submit: () => {\n                if (id=='new') {\n                    this.editing_disaggregations_data = this.editing_disaggregations_data.filter(disagg=>disagg.id!='new')\n                    this.active_pane_is_dirty = false;\n                    callback && callback();\n                    return\n                } else {\n                    this.api.deleteDisaggregation(id).then(response => {\n                        runInAction(() => {\n                            this.editing_disaggregations_data = this.editing_disaggregations_data.filter(disagg => disagg.id!=id);\n                            this.active_pane_is_dirty = false;\n                            this.onDeleteSuccessHandler();\n                            this.updateHistory(this.editing_target);\n                            callback && callback();\n                        })\n                    });\n                }\n            },\n            on_cancel: () => {},\n            blocking: true\n        });\n    }\n\n    @action archiveDisaggregation(id) {\n        create_unified_changeset_notice({\n            header: gettext(\"Warning\"),\n            show_icon: true,\n            // # Translators: This is part of a confirmation prompt to archive a type of disaggregation (e.g. \"gender\" or \"age\")\n            preamble: gettext(\"New programs will be unable to use this disaggregation. (Programs already using the disaggregation will be unaffected.)\"),\n            // # Translators: This is a confirmation prompt to confirm a user wants to archive an item\n            message_text: gettext(\"Are you sure you want to continue?\"),\n            include_rationale: false,\n            rationale_required: false,\n            notice_type: 'notice',\n            showCloser: true,\n            on_submit: () => {\n                this.api.deleteDisaggregation(id).then(response => {\n                    runInAction(() => {\n                        this.editing_disaggregations_data.filter(disagg => disagg.id==id).forEach(\n                            disagg => {disagg.is_archived = true;}\n                        );\n                        this.active_pane_is_dirty = false;\n                        this.onArchiveSuccessHandler();\n                        this.updateHistory(this.editing_target);\n                    });\n                });\n            },\n            on_cancel: () => {},\n            blocking: true\n        });\n    }\n\n    @action unarchiveDisaggregation(id) {\n        let countryData = this.countries.find(country => country.id == this.editing_target);\n        let countryName = countryData ? countryData.country : \"this country\";\n        create_unified_changeset_notice({\n            header: gettext(\"Warning\"),\n            show_icon: true,\n            // # Translators: This is part of a confirmation prompt to unarchive a type of disaggregation (e.g. \"gender\" or \"age\")\n            preamble: interpolate(gettext(\"All programs in %s will be able to use this disaggregation.\"), [countryName]),\n            // # Translators: This is a confirmation prompt to confirm a user wants to unarchive an item\n            message_text: gettext(\"Are you sure you want to continue?\"),\n            notice_type: 'notice',\n            showCloser: true,\n            on_submit: () => {\n                this.api.partialUpdateDisaggregation(id, {is_archived: false}).then(response => {\n                    runInAction(() => {\n                        this.editing_disaggregations_data.filter(disagg => disagg.id==id).forEach(\n                            disagg => {disagg.is_archived = false;}\n                        );\n                        this.active_pane_is_dirty = false;\n                        this.onUnarchiveSuccessHandler();\n                        this.updateHistory(this.editing_target);\n                    });\n                });\n            },\n            on_cancel: () => {},\n            blocking: true\n        });\n    }\n\n    @action updateDisaggregation(id, data) {\n        this.assignDisaggregationErrors(this.editing_disaggregations_data, data, id);\n        const hasLabelErrors = this.editing_disaggregations_errors.hasOwnProperty('labels')\n            && this.editing_disaggregations_errors['labels'].length > 0\n            && this.editing_disaggregations_errors['labels'].some( entry => {\n                    return entry.hasOwnProperty('label')\n                });\n        if (this.editing_disaggregations_errors['disaggregation_type'] || hasLabelErrors) {\n            return;\n        }\n\n        delete data.is_archived;\n        this.api.updateDisaggregation(id, data).then(response => {\n            runInAction(() => {\n                this.onSaveSuccessHandler();\n                let updatedDisaggregation = response.data;\n                this.active_pane_is_dirty = false;\n                this.editing_disaggregations_data = this.editing_disaggregations_data.map(disaggregation => {\n                    if (disaggregation.id == updatedDisaggregation.id) {\n                        return updatedDisaggregation;\n                    }\n                    return disaggregation;\n                });\n                this.updateHistory(this.editing_target);\n            })\n        }).catch((errors) => {\n            this.saving = false;\n            this.editing_disaggregations_errors = errors.response.data;\n            this.onSaveErrorHandler();\n        })\n    }\n\n    @action createDisaggregation(data) {\n        this.assignDisaggregationErrors(this.editing_disaggregations_data, data, \"new\");\n        const hasLabelErrors = this.editing_disaggregations_errors.hasOwnProperty('labels')\n            && this.editing_disaggregations_errors['labels'].length > 0\n            && this.editing_disaggregations_errors['labels'].some( entry => {\n                    return entry.hasOwnProperty('label');\n                });\n        if (this.editing_disaggregations_errors['disaggregation_type'] || hasLabelErrors) {\n            this.saving = false;\n            return Promise.reject(\"Validation failed\") ;\n        }\n        const retroProgramCount = data.hasOwnProperty('retroPrograms') ? data.retroPrograms.length : 0\n\n        return this.api.createDisaggregation(data).then(response => {\n            this.updateHistory(response.data.country);\n            return runInAction(() => {\n                this.onSaveSuccessHandler({retroProgramCount: retroProgramCount});\n                const newDisaggregation = response.data;\n                this.editing_history = history.data;\n                this.active_pane_is_dirty = false;\n                this.editing_disaggregations_data = [...this.editing_disaggregations_data.filter(disaggregation => disaggregation.id != 'new'), newDisaggregation];\n                return newDisaggregation;\n            });\n        }).catch((errors) => {\n            runInAction(() => {\n                this.saving = false;\n                this.editing_disaggregations_errors = errors.response.data;\n                this.onSaveErrorHandler();\n            });\n            return Promise.reject(\"API handling error\");\n        })\n    }\n\n    @action\n    toggleChangeLogRowExpando(row_id) {\n        if (this.changelog_expanded_rows.has(row_id)) {\n            this.changelog_expanded_rows.delete(row_id);\n        } else {\n            this.changelog_expanded_rows.add(row_id);\n        }\n    }\n\n    @action\n    assignDisaggregationErrors(existingDisagg, newDisagg, disaggId) {\n        const existingDisaggTypes = existingDisagg.filter(disagg => disagg.id !== disaggId)\n            .map(disagg => disagg.disaggregation_type);\n        if (existingDisaggTypes.includes(newDisagg.disaggregation_type)) {\n            const countryName = this.allCountries.filter( c => parseInt(c.id) === parseInt(newDisagg.country))[0] || \"\";\n            // # Translators:  This error message appears underneath a user-input name if it appears more than once in a set of names.  Only unique names are allowed.\n            this.editing_disaggregations_errors['disaggregation_type'] = [interpolate(gettext(\"There is already a disaggregation type called \\\"%(newDisagg)s\\\" in %(country)s. Please choose a unique name.\"),\n                {newDisagg: newDisagg['disaggregation_type'], country: countryName.country},\n                true)]\n        }\n        else{\n            this.editing_disaggregations_errors = {}\n        }\n        this.assignDisaggregationLabelErrors(newDisagg)\n    }\n\n    @action\n    assignDisaggregationLabelErrors = (newDisagg) => {\n        const duplicateIndexes = this.findDuplicateLabelIndexes(newDisagg.labels.map(label => label.label));\n        let labelErrors = Array(newDisagg.labels.length).fill().map( e => ({}));\n\n        newDisagg.labels.forEach( (label, index) => {\n            if (!label.label || label.label.length === 0) {\n                // # Translators:  This error message appears underneath user-input labels that appear more than once in a set of labels.  Only unique labels are allowed.\n                labelErrors[index]['label'] = [gettext(\"Categories must not be blank.\")];\n            }\n            else if (duplicateIndexes.includes(index)) {\n                // # Translators:  This error message appears underneath user-input labels that appear more than once in a set of labels.  Only unique labels are allowed.\n                labelErrors[index]['label'] = [gettext(\"Categories must have unique names.\")];\n            }\n        });\n        this.editing_disaggregations_errors['labels'] = labelErrors;\n    }\n\n    findDuplicateLabelIndexes(label_list) {\n        const lowerCaseList = label_list.map( label => label.toLowerCase())\n        let dupeIndexes = new Set();\n        lowerCaseList.forEach( (label, index) => {\n            const dupeIndex = lowerCaseList.indexOf(label, index+1);\n            if (dupeIndex > 0) {\n                dupeIndexes.add(index).add(dupeIndex);\n            }\n        });\n        return Array.from(dupeIndexes);\n\n    };\n\n}\n\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport classNames from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst statusOptions = [\n    {value: 'proposed', label: gettext('Proposed')},\n    {value: 'active', label: gettext('Active')},\n    {value: 'acheived', label: gettext('Achieved')},\n]\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n    <div className=\"invalid-feedback\">\n        {errorMessages.map((message, index) =>\n            <span key={index}>{message}</span>\n        )}\n    </div>\n    )\n})\n\n@observer\nclass StrategicObjectiveForm extends React.Component {\n    constructor(props) {\n        super(props)\n        const {objective} = props\n\n        this.state = {\n            managed_data: {...objective},\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_data) != JSON.stringify(this.props.objective))\n    }\n\n    updateFormField(fieldKey, value) {\n        const {managed_data} = this.state\n        const modified = Object.assign(managed_data, {[fieldKey]: value})\n        this.setState({\n            managed_data: modified\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    resetForm() {\n        this.props.clearErrors()\n        const {objective} = this.props\n        this.setState({\n            managed_data: {...objective}\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    render() {\n        const {objective, expanded, expandAction, deleteAction, saveObjective, createObjective} = this.props\n        const {managed_data} = this.state\n        const objective_status = managed_data.status\n        const selectedStatus = objective_status ? statusOptions.find(x=>x.value==objective_status) : {}\n        return (\n        <div className=\"accordion-row\">\n            <div className=\"accordion-row__content\">\n                <a onClick={expandAction} className=\"btn accordion-row__btn btn-link\" tabIndex=\"0\">\n                    <FontAwesomeIcon icon={expanded ? 'caret-down' : 'caret-right'} />\n                    { /* # Translators: This is a section header for when a user is creating a new strategic objective for a country */ }\n                    {(objective.id == 'new')? gettext(\"New Strategic Objective\") : objective.name}\n                </a>\n                { expanded && (\n                    <form className=\"form card card-body bg-white\">\n                        <div className=\"form-group\">\n                            <label className=\"label--required\" htmlFor=\"objective-name-input\">\n                                {gettext(\"Short name\")}\n                            </label>\n                            <input\n                                id=\"objective-name-input\"\n                                className={classNames('form-control', {'is-invalid':this.formErrors('name')})}\n                                value={managed_data.name}\n                                onChange={(e) => this.updateFormField('name', e.target.value)}\n                                type=\"text\"\n                                required\n                            />\n                            <ErrorFeedback errorMessages={this.formErrors('name')} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"objective-description-input\">\n                                {gettext(\"Description\")}\n                            </label>\n                            <textarea\n                                id=\"objective-description-input\"\n                                className={classNames('form-control', {'is-invalid': this.formErrors('description')})}\n                                value={managed_data.description}\n                                onChange={(e) => this.updateFormField('description', e.target.value)}\n                                type=\"text\"\n                                required\n                            />\n                            <ErrorFeedback errorMessages={this.formErrors('description')} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"objective-status-input\">{gettext(\"Status\")}</label>\n                            <Select\n                                value={selectedStatus}\n                                options={statusOptions}\n                                onChange={(e) => this.updateFormField('status', e.value) }\n                                className={classNames('react-select', {'is-invalid': this.formErrors('status')})}\n                                id=\"objective-status-input\"\n                            />\n                            <ErrorFeedback errorMessages={this.formErrors('status')} />\n                        </div>\n                        <div className=\"objective-form-buttons\">\n                            {objective.id=='new' && (\n                                <div className=\"form-group btn-row\">\n                                    <button className=\"btn btn-primary\" type=\"button\" onClick={() => createObjective(managed_data)}>{gettext(\"Save Changes\")}</button>\n                                </div>\n                            )}\n                            {objective.id!='new' && (\n                                <div className=\"form-group btn-row\">\n                                    <button className=\"btn btn-primary\" type=\"button\" onClick={() => saveObjective(managed_data)}>{gettext(\"Save Changes\")}</button>\n                                    <button className=\"btn btn-reset\" type=\"button\" onClick={()=> this.resetForm()}>{gettext(\"Reset\")}</button>\n                                </div>\n                            )}\n                            <div className=\"right-buttons\">\n                                <a tabIndex=\"0\" onClick={deleteAction} className=\"btn btn-link btn-danger\">\n                                    <i className=\"fas fa-trash\"/>{gettext(\"Delete\")}\n                                </a>\n                            </div>\n                        </div>\n                    </form>\n                )}\n            </div>\n        </div>\n        )\n    }\n}\n\n@observer\nexport default class EditObjectives extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            expanded_id: null,\n            is_dirty: false\n        }\n    }\n\n    handleDirtyUpdate(is_dirty) {\n        this.setState({is_dirty: is_dirty})\n        this.props.onIsDirtyChange(is_dirty)\n    }\n\n    dirtyConfirm() {\n        return !this.state.is_dirty || (this.state.is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    toggleExpand(id) {\n        this.props.clearErrors()\n        if(this.dirtyConfirm()) {\n            const {expanded_id} = this.state\n            if (id == expanded_id) {\n                this.setState({expanded_id: null})\n            } else {\n                this.setState({expanded_id: id})\n            }\n            if(expanded_id == 'new') {\n                this.props.onDelete(expanded_id)\n            }\n            this.handleDirtyUpdate(false)\n        }\n    }\n\n    addObjective() {\n        if(this.dirtyConfirm()){\n            this.props.clearErrors()\n            this.props.addObjective()\n            this.setState({expanded_id: 'new'})\n            this.handleDirtyUpdate(false)\n        }\n    }\n\n    deleteObjectiveAction(objectiveId) {\n        if (objectiveId=='new') {\n            this.props.onDelete(objectiveId)\n            return\n        }\n        if(confirm(gettext(\"Delete Strategic Objective?\"))) {\n            this.props.onDelete(objectiveId)\n        }\n    }\n\n    updateObjective(objectiveId, data)\n    {\n        this.props.onUpdate(objectiveId, data)\n        this.setState({is_dirty: false})\n    }\n\n    createObjective(data)\n    {\n        let objectiveData = Object.assign(data, {country: this.props.country_id})\n        this.props.onCreate(objectiveData)\n        this.setState({is_dirty: false})\n    }\n\n    render() {\n        const {expanded_id, new_objective} = this.state\n        const {objectives} = this.props\n        return (\n            <div className=\"tab-pane--react\">\n                <h3>{gettext(\"Strategic Objectives\")}</h3>\n                {objectives.map((objective) =>\n                    <StrategicObjectiveForm\n                        key={objective.id}\n                        objective={objective}\n                        expanded={objective.id==expanded_id}\n                        expandAction={() => this.toggleExpand(objective.id)}\n                        deleteAction={() => this.deleteObjectiveAction(objective.id)}\n                        saveObjective={(data) => this.updateObjective(objective.id, data)}\n                        createObjective={(data) => this.createObjective(data)}\n                        errors={this.props.errors}\n                        clearErrors={this.props.clearErrors}\n                        onIsDirtyChange={(is_dirty) => this.handleDirtyUpdate(is_dirty)}\n                    />\n                )}\n                <div>\n                    <a tabIndex=\"0\" onClick={() => this.addObjective()} className=\"btn btn-link btn-add\">\n                        {\n                        /* # Translators: This is a button that allows the user to add a strategic objective. */}\n                        <i className=\"fas fa-plus-circle\"/>{gettext(\"Add strategic objective\")}\n                    </a>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","import React from 'react'\nimport { observer } from 'mobx-react';\nimport ChangeLog from 'components/changelog'\n\n@observer\nexport class CountryHistory extends React.Component {\n\n    render() {\n        const {history, store} = this.props;\n        const changelog_expanded_rows = store.changelog_expanded_rows;\n        const country_name = store.editing_target ? store.countries.filter( c => c.id === store.editing_target)[0].country + \": \" : \"\";\n        return <div className=\"tab-pane--react admin-edit-pane\">\n            <h2 className=\"no-bold\">{country_name}{gettext(\"History\")}</h2>\n\n            <ChangeLog data={history} expanded_rows={changelog_expanded_rows} toggle_expando_cb={(row_id) => store.toggleChangeLogRowExpando(row_id)} />\n\n        </div>\n\n\n    }\n}\n\nexport default CountryHistory;\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\nimport { observer } from 'mobx-react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport { toJS } from 'mobx'\nimport { EM_DASH } from '../constants';\n\n\nexport const ChangeField = ({name, data, extraTitleText=null}) => {\n    const extraTitle = extraTitleText ? <h4 className=\"disagg-type__title, text-small\" >{extraTitleText}</h4> : null;\n    if (name===\"Disaggregation categories\" && typeof data === 'object' && data !== null) {\n        const sorted_labels = Object.values(data).sort((a,b) => a.custom_sort - b.custom_sort);\n        return <React.Fragment>\n            <strong>{name}: </strong>\n            {extraTitle}\n            <ul className=\"no-list-style\">\n                {sorted_labels.map( (entry, index) => {\n                    return <li key={index}>{(entry.label !== undefined && entry.label !== null) ? entry.label : \"\"}</li>\n                })}\n            </ul>\n        </React.Fragment>\n    }\n\n    else {\n        var change_value;\n        if (data !== undefined && data !== null && data !== \"N/A\") {\n            change_value = <span className=\"change__field__value\">\n            {\n                [\"true\", \"false\"].includes(data.toString())\n                    ? data.toString().replace(\"t\", \"T\").replace(\"f\", \"F\")\n                    : data.toString()\n            }\n            </span>\n        } else {\n            change_value = <span className=\"change__field__value empty-value\">{ EM_DASH }</span>\n        }\n        return <div className=\"change__field\">\n            <strong className=\"change__field__name\">{name}</strong>: {change_value}\n        </div>\n    }\n};\n\nconst ChangeLogEntryHeader = ({data, is_expanded, toggle_expando_cb}) => {\n    // TODO: apply is-expanded dynamically\n    return <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => toggle_expando_cb(data.id)}>\n        <td className=\"text-nowrap text-action\">\n            <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;<strong>{data.date}</strong>\n        </td>\n        <td className=\"text-nowrap\">{data.admin_user}</td>\n        <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n        <td></td>\n        <td></td>\n    </tr>\n};\n\nconst ChangeLogEntryRow = (props) => {\n    return <tr key={props.id} className=\"changelog__entry__row\">\n                <td></td>\n                <td></td>\n                <td></td>\n                <td>\n                    <div className=\"changelog__change--prev\">\n                        {props.previous}\n                    </div>\n                </td>\n                <td>\n                    <div className=\"changelog__change--new\">\n                        {props.new}\n                    </div>\n                </td>\n            </tr>\n\n};\n\nconst ChangeLogEntryRowBuilder = ({data}) => {\n\n    let allRows = [];\n\n    // We should never need this but just in case someone manages to store a log entry without actual diffs, give them\n    // a soft place to land.\n    const nullRow = <ChangeLogEntryRow previous={gettext(\"No differences found\")} new={null} id={1} key={1}/>\n\n    // If they manage to store a log without any diffs at all, send them to the soft landing place.\n    if ((Array.isArray(data.diff_list) && data.diff_list.length === 0) || (Object.keys(data.diff_list || {}).length === 0)) {\n        allRows.push(nullRow);\n        return allRows\n    }\n\n    if (data.change_type === 'user_programs_updated') {\n        // Create multiple row for program/country changes:\n        if (data.diff_list.base_country) {\n            const previousEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.prev} />\n            const newEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.new} />\n                \n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={\"base_country\"} key={\"base_country\"} />);\n        }\n        Object.entries(data.diff_list.countries).forEach( ([id, country]) => {\n            const key = `${id}_${country}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.prev.country} />\n                {/* # Translators:  Role references a user's permission level when accessing data (i.e. User or Admin) */}\n                <ChangeField name={gettext(\"Role\")} data={country.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={country.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        });\n        Object.entries(data.diff_list.programs).forEach(([id, program]) => {\n            const key = `${id}_${program}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.prev.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.prev.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.new.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        })\n\n    }\n    else {\n        let extraTitleText = null;\n        let skipDisaggType = false;\n        if (data.pretty_change_type === \"Country disaggregation updated\") {\n            const diff_list = data.diff_list;\n            const disaggType = diff_list.filter((diff) => diff.name === \"disaggregation_type\");\n            if (disaggType[0].prev === disaggType[0].new) {\n                extraTitleText = disaggType[0].prev;\n                skipDisaggType = true;\n            }\n\n        }\n        data.diff_list.forEach((changeSet, id) => {\n            const key = `${id}_${changeSet.pretty_name}`;\n            if (!(changeSet.name === \"disaggregation_type\" && skipDisaggType)) {\n                const previousEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.prev} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n                const newEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.new} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n\n                allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key}/>);\n            }\n        });\n    }\n\n    // If they manage to store a log with identical values in diffs, send them to the soft landing place.  Hopefully\n    // the system will refuse to log no-difference diffs.\n    if (allRows.length === 0){\n        allRows.push(nullRow)\n    }\n    return allRows;\n\n};\n\nconst ChangeLogEntry = ({data, is_expanded, toggle_expando_cb}) => {\n    return <tbody className=\"changelog__entry\" key={data.id}>\n        <ChangeLogEntryHeader data={data} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        {is_expanded &&\n        <ChangeLogEntryRowBuilder data={data}/>\n        }\n    </tbody>\n};\n\nconst ChangeLog = observer(({data, expanded_rows, toggle_expando_cb}) => {\n    // If expanded_rows is not null/undefined then use it to control expansion/collapse of entries\n    // otherwise, default it to \"open\"\n    return <table className=\"table table-sm bg-white table-bordered text-small changelog\">\n        <thead>\n            <tr>\n                <th className=\"text-nowrap\">{gettext(\"Date\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Admin\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Change Type\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"Previous Entry\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"New Entry\")}</th>\n            </tr>\n        </thead>\n        {data.map((entry) => {\n            let is_expanded = true;\n            if (expanded_rows) {\n                is_expanded = expanded_rows.has(entry.id);\n            }\n            return <ChangeLogEntry key={entry.id} data={entry} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        })}\n    </table>\n});\n\nexport default ChangeLog\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CountryStore} from './models';\nimport {IndexView} from './views';\nimport api from './api';\n\nconst app_root = '#app_root'\n\n/*\n * Model/Store setup\n */\n\nconst initialData = {\n    allCountries: jsContext.countries,\n    organizations: jsContext.organizations,\n    allPrograms: jsContext.programs,\n    is_superuser: jsContext.is_superuser,\n}\n\nconst store = new CountryStore(\n    api,\n    initialData,\n);\n\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector(app_root)\n);\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", `mgmt-table__col__width-${size}`, className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"5\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","const SPANISH = 'es';\nconst FRENCH = 'fr';\nconst ENGLISH = 'en';\n\nfunction flattenArray(arr, depth = 1) {\n    if (depth == 5) {\n        return arr;\n    }\n    let flattened = [];\n    arr.forEach(item => {\n        if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item, depth+1));\n        } else {\n            flattened.push(item);\n        }\n    });\n    return flattened;\n}\n\nfunction ensureNumericArray(value) {\n    if (!Array.isArray(value)) {\n        value = parseInt(value);\n        if (value && !isNaN(value)) {\n            return [value];\n        }\n        return false;\n    }\n    let arr = value.map(x => parseInt(x)).filter(x => !isNaN(x));\n    if (arr && Array.isArray(arr) && arr.length > 0) {\n        return arr;\n    }\n    return false;\n}\n\n/*\n * Are we loading a cached page? If so, reload to avoid displaying stale indicator data\n * See ticket #1423\n */\nfunction reloadPageIfCached() {\n    // moving the cache check to after page load as firefox calculates transfer size at the end\n    $(function () {\n        let isCached = window.performance.getEntriesByType(\"navigation\")[0].transferSize === 0;\n        //adding a second check to ensure that if for whatever reason teh transfersize reads wrong, we don't reload on\n        //a reload:\n        let isReload = window.performance.getEntriesByType(\"navigation\")[0].type === \"reload\";\n        if (isCached && !isReload) {\n            window.location.reload();\n        }\n    });\n}\n\nconst indicatorManualNumberSort = (levelFunc, numberFunc) => {\n    return (indicatorA, indicatorB) => {\n        let levelA = levelFunc(indicatorA);\n        let levelB = levelFunc(indicatorB);\n        if (levelA && !levelB) {\n            return 1;\n        }\n        if (levelB && !levelA) {\n            return -1;\n        }\n        if (levelA != levelB) {\n            return parseInt(levelA) - parseInt(levelB);\n        }\n        let numberA = (numberFunc(indicatorA) || '').split('.');\n        let numberB = (numberFunc(indicatorB) || '').split('.');\n        for (let i=0; i < Math.max(numberA.length, numberB.length); i++) {\n            if (numberA[i] && numberB[i]) {\n                for (let j=0; j < Math.max(numberA[i].length, numberB[i].length); j++) {\n                    if (numberA[i][j] && numberB[i][j]) {\n                        if (numberA[i].charCodeAt(j) != numberB[i].charCodeAt(j)) {\n                            return numberA[i].charCodeAt(j) - numberB[i].charCodeAt(j);\n                        }\n                    } else if (numberA[i][j]) {\n                        return 1;\n                    } else if (numberB[i][j]) {\n                        return -1;\n                    }\n                }\n            } else if (numberA[i]) {\n                return 1;\n            } else if (numberB[i]) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n\nconst localizeNumber = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    var intPart = val.toString();\n    var floatPart = null;\n    if (val.toString().includes(\",\")) {\n        intPart = val.toString().split(\",\")[0];\n        floatPart = val.toString().split(\",\").length > 1 ? val.toString().split(\",\")[1 ] : null;\n    } else if (val.toString().includes(\".\")) {\n        intPart = val.toString().split(\".\")[0];\n        floatPart = val.toString().split(\".\").length > 1 ? val.toString().split(\".\")[1 ] : null;\n    }\n    floatPart = (floatPart && floatPart.length > 0) ? floatPart : null;\n    var displayValue;\n    switch(window.userLang) {\n        case SPANISH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case FRENCH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160)); //nbsp\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case ENGLISH:\n        default:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            if (floatPart) {\n                displayValue += `.${floatPart}`;\n            }\n        break;\n    }\n    return displayValue;\n};\n\nconst localizePercent = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    let percent = localizeNumber(Math.round(val * 10000)/100);\n    return (percent === null) ? null : `${percent}%`;\n}\n\nconst sortObjectListByValue = (objects, key='label') => objects.sort((a, b) => {\n    return a[key].toUpperCase() > b[key].toUpperCase() ? 1 : -1\n})\n\nexport { flattenArray, ensureNumericArray, reloadPageIfCached, indicatorManualNumberSort,\n          localizeNumber, localizePercent, sortObjectListByValue };\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport CheckboxGroup from 'react-multiselect-checkboxes/lib/CheckboxGroup';\nimport { css } from 'emotion';\nimport {observer} from 'mobx-react'\n\n\n/* JSX Element to display, e.g. \"4 selected\" in a multiselect dropdown */\nconst CountLabel = props => {\n    return (\n        <div className=\"count__label\">\n            {props.children}\n            {(props.clearable &&\n                <div onClick={ props.clearSelect }>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\" />\n                </div>\n              )}\n        </div>\n    );\n        \n}\n\n/*\n * CheckboxGroup drop in replacement that delivers a heading without a checkbox if the optgroup has\n * the attribute \"selectable: false\"\n * Also adds a vertical divider above any optgroup with the attribute divider: true\n */\nfunction Group(props) {\n    if (props.data.selectable === false) {\n        const {\n            children,\n            className,\n            cx,\n            getStyles,\n            Heading,\n            setValue,\n            data,\n            label,\n            getValue,\n            theme,\n            selectProps: { getOptionValue },\n          } = props;\n          let headingProps = {getStyles: getStyles, cx: cx, theme: theme, indeterminate: false, checked: false};\n          return (\n            <div className={cx(css(getStyles('group', props)), { group: true }, className)}>\n                <div className={cx(css(getStyles('groupHeading', {...headingProps})),\n                    {'group-heading': true}, className)}>{props.data.label}</div>\n                <div>{props.children}</div>\n            </div>);\n    }\n    if (props.data.divider === true) {\n        return (<React.Fragment>\n                <hr style={{ margin: '3px 0px 0px 0px' }} />\n                <CheckboxGroup {... props} />\n                </React.Fragment>);\n    }\n    return <CheckboxGroup {... props} />;\n}\n\n\n/*\n *  A wrapper for react-multiselect-checkboxes which implements:\n *      - translated \"n selected\" if multiple options are selected (including a \"noList\" attribute for uncounted selections\n *      - optgroups without checkboxes if {selectable: false} applied to optgroup object\n *      - virtualization (??) - this functionality from external vendor needs verification\n */\n@observer\nclass CheckboxedMultiSelect extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    clearSelect = (e) => {\n        e.stopPropagation();\n        this.props.onChange([]);;\n    }\n\n    makeLabel = (_ref3) => {\n        var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n            thisValue = _ref3.value;\n        if (!thisValue) {\n          return <CountLabel clearable={false}>\n                    {placeholderButtonLabel}\n                </CountLabel>;\n        }\n    \n        if (Array.isArray(thisValue)) {\n            // don't count options with the option attribute noList: true\n            let filteredValues = thisValue.filter(option => !option.noList);\n          if (filteredValues.length === 0) {\n            return <CountLabel clearable={false}>\n                        {placeholderButtonLabel}\n                    </CountLabel>\n          }\n    \n          if (filteredValues.length === 1) {\n            return <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                        {filteredValues[0].label}\n                    </CountLabel>;\n          }\n          return (\n           <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                {\n                    // # Translators: prefixed with a number, as in \"4 selected\" displayed on a multi-select\n                    \"\".concat(filteredValues.length,\" \", gettext(\"selected\"))}\n            </CountLabel>\n            );\n        }\n    \n        return <CountLabel clearable={false}>\n                    {thisValue.label}\n               </CountLabel>;\n      };\n      render() {\n        return <ReactMultiSelectCheckboxes\n                { ...this.props}\n                placeholder={\n                    // # Translators: placeholder text in a search box\n                    gettext(\"Search\")}\n                placeholderButtonLabel={ this.props.placeholder }\n                getDropdownButtonLabel={ this.makeLabel }\n                components={{MenuList, Group }}\n                />;\n      }\n}\n\nexport default CheckboxedMultiSelect\n","import {api} from '../../../api';\n\n\nexport const fetchCountries = (page, filters) => {\n    return api.get('/tola_management/country/', {params: {page: page, ...filters}}).then(response => {\n        let data = response.data;\n        let results = data.results;\n        let total_results = data.count;\n        let total_pages = data.page_count;\n        let next_page = data.next;\n        let prev_page = data.previous;\n\n        return {\n            results,\n            total_results,\n            total_pages,\n            next_page,\n            prev_page,\n        }\n    })\n};\n\nexport const createCountry = (data) => api.post('/tola_management/country/', data);\n\nexport const updateCountry = (id, data) => api.put(`/tola_management/country/${id}/`, data);\n\nexport const fetchCountryObjectives = (countryId) => {\n    return api.get('/tola_management/countryobjective/', {params: {country: countryId}});\n}\n\nexport const fetchCountryHistory = (id) => api.get(`/tola_management/country/${id}/history/`);\n\nexport const fetchCountryDisaggregations = (countryId) => {\n    return api.get('/tola_management/countrydisaggregation/', {params: {country: countryId}});\n}\n\nexport const createObjective = (data) => api.post('/tola_management/countryobjective/', data);\nexport const updateObjective = (id, data) => api.put(`/tola_management/countryobjective/${id}/`, data);\nexport const deleteObjective = (id) => api.delete(`/tola_management/countryobjective/${id}`);\n\nexport const createDisaggregation = (data) => api.post('/tola_management/countrydisaggregation/', data);\nexport const updateDisaggregation = (id, data) => api.put(`/tola_management/countrydisaggregation/${id}/`, data);\nexport const partialUpdateDisaggregation = (id, data) => api.patch(`/tola_management/countrydisaggregation/${id}/`, data);\nexport const deleteDisaggregation = (id) => api.delete(`/tola_management/countrydisaggregation/${id}`);\n\n\nexport default {\n    fetchCountries,\n    fetchCountryObjectives,\n    fetchCountryHistory,\n    fetchCountryDisaggregations,\n    createCountry,\n    updateCountry,\n    createObjective,\n    updateObjective,\n    deleteObjective,\n    createDisaggregation,\n    updateDisaggregation,\n    partialUpdateDisaggregation,\n    deleteDisaggregation,\n}\n","import React from 'react'\nimport { observable, runInAction } from 'mobx'\nimport { observer } from \"mobx-react\"\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport classNames from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport HelpPopover from \"../../../../components/helpPopover\";\nimport { toJS } from 'mobx';\nimport {create_unified_changeset_notice} from '../../../../components/changesetNotice';\n\nconst ErrorFeedback = observer(({errorMessages}) => {\n    if (!errorMessages) {\n        return null\n    }\n    return (\n        <div className=\"invalid-feedback\">\n            {errorMessages.map((message, index) =>\n                <span key={index}>{message}</span>\n            )}\n        </div>\n    )\n})\n\n@observer\nclass CategoryForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.disabledRef = React.createRef();\n    }\n\n    componentDidMount = () => {\n        if (this.disabledRef.current) {\n            $(this.disabledRef.current).popover({\n                html: true\n            });\n        }\n    };\n\n    render() {\n        const {index, category, listLength, ...props} = this.props;\n        const isInvalid = props.errors\n            && props.errors.labels\n            && props.errors.labels.length > index\n            && props.errors.labels[index].hasOwnProperty('label')\n            && props.errors.labels[index]['label'].length;\n\n        let deletionElement =\n            <a\n                tabIndex=\"0\"\n                onClick={() => props.deleteLabel(index)}\n                className={classNames(\"btn btn-link btn-danger text-nowrap\", {'disabled': category.in_use})}\n            >\n                <i className=\"fas fa-trash\"/>{gettext('Remove')}\n            </a>;\n\n        if (props.disabled || category.in_use) {\n            // In the case that there is only one category and it is in use or archived, preference the disabled\n            // element over the null element\n            deletionElement =\n                <HelpPopover\n                    key={1}\n                    content={ gettext('This category cannot be edited or removed because it was used to disaggregate a result.') }\n                    placement=\"bottom\"\n                    className='btn btn-link'\n                    iconClass=\"fa fa-lock text-muted\"\n                    className=\"btn btn-link\"\n                    innerRef={ this.disabledRef }\n                    ariaText={gettext('Explanation for absence of delete button')}\n                />\n        }\n        else if(listLength === 1) {\n            deletionElement = null;\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"form-group col-md-7\">\n                    <input\n                        value={ category.label }\n                        onChange={(e) => props.updateLabel(index, { label: e.target.value })}\n                        className={classNames(\"form-control\", {\"is-invalid\": isInvalid})}\n                        disabled={category.in_use || props.disabled}\n                    />\n                    { props.errors.labels &&\n                        <ErrorFeedback errorMessages={props.errors.labels.length > index\n                            ? props.errors.labels[index]['label']\n                            : null} />\n                    }\n                </div>\n                <div className=\"form-group col-md-2\">\n                    <select\n                        value={category.customsort}\n                        onChange={ (e) => props.updateLabelOrder(index, e.target.value - 1) }\n                        className=\"form-control\" disabled={props.disabled}\n                    >\n                        {\n                            Array.from(Array(listLength).keys()).map(value => <option value={value+1} key={value}>{value+1}</option>)\n                        }\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    {deletionElement}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\nconst DisaggregationCategoryList = observer(\n    ({id, categories, ...props}) => (\n        <DragDropContext\n            onDragEnd={ ({source: s = null, destination: d = null}) => { (s !== null && d !== null) && props.updateLabelOrder(s.index, d.index);} }\n          >\n            <Droppable\n                droppableId={ `disaggregation-category-list-${ id }` }\n                renderClone={(provided, snapshot, rubric) => (\n                    <div className=\"form-group mb-0 disaggregation-label-group\"\n                        ref={ provided.innerRef }\n                        {...provided.draggableProps}\n                    >\n                    <span className=\"draggable-arrow\" {...provided.dragHandleProps}>\n                        <i className=\"fas fa-arrows-alt fa-lg\"></i>\n                    </span>\n                    <CategoryForm\n                        index={ rubric.source.index }\n                        category={ categories[rubric.source.index] }\n                        listLength={ categories.length }\n                        { ...props }\n                    />\n                    </div>\n                )}\n            >\n                {(provided, snapshot) => (\n                    <div ref={provided.innerRef} {...provided.droppableProps}>\n                        {\n                        categories.map((category, index) => (\n                            <Draggable\n                                draggableId={ category.id == 'new' ? category.createdId : String(category.id) }\n                                index={ index }\n                                isDragDisabled={props.disabled}\n                                key={ category.id == 'new' ? category.createdId : category.id }>\n                                {(provided, snapshot) => (\n                                    <div className=\"form-group mb-0 disaggregation-label-group\"\n                                        ref={ provided.innerRef }\n                                        {...provided.draggableProps}\n                                    >\n                                        <span className=\"draggable-arrow\" {...provided.dragHandleProps}>\n                                            <i className=\"fas fa-arrows-alt fa-lg\"></i>\n                                        </span>\n                                        <CategoryForm\n                                            index={ index }\n                                            category={ category }\n                                            listLength={ categories.length }\n                                            { ...props }\n                                        />\n                                    </div>\n                                )}\n                            </Draggable>\n                        ))\n                        }\n                        { provided.placeholder }\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    )\n);\n\nexport let CheckBoxList = props => {\n    return props.checkBoxOptions.map(option => {\n        return (\n            <label className=\"mb-1\" key={option.id}>\n                <input\n                    type=\"checkbox\"\n                    className=\"align-text-top\"\n                    autoComplete=\"false\"\n                    name={option.name}\n                    value={option.name}\n                    checked={option.checked ?? false}\n                    onChange={(e) => props.onUpdate(option.id, e.target.checked)}/>\n                <span className=\"ml-2\">{option.name}</span>\n            </label>\n        )\n    })\n}\n\n@observer\nexport class RetroProgramCheckBoxWrapper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.retroactiveAssignmentPopup = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.retroactiveAssignmentPopup.current) {\n            $(this.retroactiveAssignmentPopup.current).popover({\n                html: true\n            });\n        }\n    }\n\n    render() {\n        let checkBoxOptions = Object.values(this.props.programs).sort((a, b) => a.name < b.name ? -1 : 1);\n        let checkBoxComponent = null;\n        if (this.props.programsExpanded) {\n            checkBoxComponent =\n                <div id=\"disagg-admin__programs\" className=\"ml-2 mt-2 d-flex flex-column disaggregation-programs\">\n                    <CheckBoxList checkBoxOptions={checkBoxOptions} onUpdate={this.props.onRetroUpdate}/>\n                </div>\n        }\n        // # Translators: This is text provided when a user clicks a help link.  It allows users to select which elements they want to apply the changes to.\n        const helpText = gettext('<p>Select a program if you plan to disaggregate all or most of its indicators by these categories.</p><p><span class=\"text-danger\"><strong>This bulk assignment cannot be undone.</strong></span> But you can always manually remove the disaggregation from individual indicators.</p>')\n\n        return (\n            <div className=\"mt-2 ml-4 retro-programs\">\n                 <a\n                     onClick={this.props.toggleProgramViz}\n                     className={classNames('accordion-row__btn', 'btn', 'btn-link', 'disaggregation--programs__header', {disabled: this.props.disabled})}\n                     tabIndex='0'>\n                    <FontAwesomeIcon icon={this.props.programsExpanded ? 'caret-down' : 'caret-right'} />\n                    {/* # Translators: This feature allows a user to apply changes to existing programs as well as ones created in the future */}\n                    <span className=\"mr-1\">{gettext(\"Assign new disaggregation to all indicators in a program\")}</span>\n                </a>\n\n                <HelpPopover\n                    key={1}\n                    content={helpText}\n                    placement=\"right\"\n                    innerRef={this.retroactiveAssignmentPopup}\n                    // # Translators: this is alt text for a help icon\n                    ariaText={gettext('More information on assigning disaggregations to existing indicators')}\n                />\n                { checkBoxComponent }\n            </div>\n        )\n    }\n}\n\n@observer\nexport class DisaggregationType extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const {disaggregation} = this.props\n        this.state = {\n            ...disaggregation,\n            labels: this.orderLabels(disaggregation.labels),\n            programsExpanded: false\n        };\n        this.programsForRetro = observable(props.programs.reduce( (accum, program) => {\n            accum[program.id] = {id: program.id, name: program.name, checked: false}\n            return accum\n        }, {}))\n\n        this.labelsCreated = 0;\n        this.selectedByDefaultPopup = React.createRef();\n    }\n\n    orderLabels(labels) {\n        return labels.slice().map((label, index) => ({...label, customsort: index + 1}));\n    }\n\n    hasUnsavedDataAction() {\n        const labels = this.props.disaggregation.labels.map(x => ({...x}));\n        const changedDisaggs = JSON.stringify(this.state) !== JSON.stringify({\n            ...this.props.disaggregation,\n            labels: [...labels],\n        })\n        const changedRetro = Object.values(this.programsForRetro).some( programObj => programObj.checked)\n        this.props.onIsDirtyChange(changedDisaggs || changedRetro)\n    }\n\n    componentDidUpdate = () => {\n        /*\n        This is a super ugly hack to fix a bug and avoid re-writing the state management of this component.\n        Without this code block, if a new label is added and the form is saved, the id of \"new\"\n        never gets replaced with the real id coming from the server.  So if the user tries to add\n        another label and save, a validation error occurs because it looks like there are two\n        new labels, one of which would be a duplicate.\n         */\n        if (this.state.labels) {\n            const labelMap = this.props.disaggregation.labels.reduce((accum, labelObj) => {\n                accum[labelObj.label] = labelObj.id;\n                return accum;\n            }, {});\n            const a = new Set(Object.keys(labelMap));\n            if (a.size === this.state.labels.length) {\n                this.state.labels.forEach(labelInState => {\n                    if (labelInState.id === \"new\") {\n                        if (Object.keys(labelMap).includes(labelInState.label)) {\n                            labelInState.id = labelMap[labelInState.label];\n                        }\n                    }\n                });\n            }\n        }\n\n        if (this.selectedByDefaultPopup.current) {\n            $(this.selectedByDefaultPopup.current).popover({\n                html: true\n            });\n        }\n    };\n\n    componentDidMount(){\n        $('[data-toggle=\"popover\"]').popover();\n    }\n\n    resetForm() {\n        this.props.clearErrors();\n        this.setState({\n            ...this.props.disaggregation,\n            labels: this.orderLabels(this.props.disaggregation.labels),\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    formErrors(fieldKey) {\n        return this.props.errors[fieldKey]\n    }\n\n    updateDisaggregationTypeField(value) {\n        this.setState({\n            disaggregation_type: value,\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateSelectedByDefault(checked) {\n        if (checked !== true) {\n            this.clearCheckedPrograms();\n            this.togglePrograms();\n        }\n        this.setState({\n            selected_by_default: checked == true\n        }, () => this.hasUnsavedDataAction());\n    }\n\n    updateRetroPrograms(id, checked) {\n        runInAction(() => {\n            this.programsForRetro[id]['checked'] = checked\n        })\n        this.hasUnsavedDataAction()\n    }\n\n    togglePrograms() {\n        this.setState({programsExpanded: !this.state.programsExpanded})\n    }\n\n    clearCheckedPrograms() {\n        for (const [key, value] of Object.entries(this.programsForRetro)) {\n            runInAction(() => value.checked = false )\n        }\n    }\n\n    updateLabel(labelIndex, updatedValues) {\n        let labels = this.state.labels;\n        labels[labelIndex] = { ...labels[labelIndex], ...updatedValues };\n        this.setState({\n            labels: this.orderLabels(labels)\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateLabelOrder(oldIndex, newIndex) {\n        let labels = this.state.labels;\n        let remainingLabels = [...labels.slice(0, oldIndex), ...labels.slice(oldIndex + 1)];\n        const reorderedLabels = this.orderLabels(\n            [...remainingLabels.slice(0, newIndex), labels[oldIndex], ...remainingLabels.slice(newIndex)]);\n        this.setState({labels: reorderedLabels}, () => this.hasUnsavedDataAction());\n        this.props.assignLabelErrors({labels: reorderedLabels});\n    }\n\n    appendLabel() {\n        this.labelsCreated += 1;\n        const newLabel = {\n            id: 'new',\n            label: '',\n            createdId: `new-${this.labelsCreated}`\n        };\n        this.setState({\n            labels: this.orderLabels([...this.state.labels, newLabel])\n        }, () => {$('.disaggregation-label-group').last().find('input').first().focus(); this.hasUnsavedDataAction();})\n    }\n\n    deleteLabel(labelIndex) {\n        const updatedLabels = this.orderLabels([...this.state.labels.slice(0, labelIndex),\n                                                ...this.state.labels.slice(labelIndex + 1)]);\n        this.setState({\n            labels: updatedLabels\n        }, () => this.hasUnsavedDataAction());\n        this.props.assignLabelErrors({labels: updatedLabels});\n    }\n\n    save() {\n        let savedData = {...this.state};\n        delete savedData.programsExpanded;\n        const retroPrograms = Object.values(this.programsForRetro).filter( program => program.checked );\n        if (retroPrograms.length > 0) {\n            savedData['retroPrograms'] = retroPrograms.map(programObj => programObj.id);\n        }\n        this.props.saveDisaggregation(savedData);\n    }\n\n    render() {\n        const {disaggregation, expanded, expandAction, deleteAction, archiveAction, unarchiveAction, errors} = this.props;\n        const managed_data = this.state;\n        const retroPrograms = managed_data.id === \"new\" ? <RetroProgramCheckBoxWrapper\n                programs={this.programsForRetro}\n                disabled={this.state.selected_by_default !== true}\n                toggleProgramViz={this.togglePrograms.bind(this)}\n                programsExpanded={this.state.programsExpanded}\n                onRetroUpdate={this.updateRetroPrograms.bind(this)}/>\n            : null\n        return (\n            <div className=\"accordion-row\">\n                <div className=\"accordion-row__content\">\n                    <a onClick={() => {expandAction(this.resetForm.bind(this));}} className=\"btn accordion-row__btn btn-link\" tabIndex='0'>\n                        <FontAwesomeIcon icon={expanded ? 'caret-down' : 'caret-right'} />\n                        {(disaggregation.id === 'new') ? \"New disaggregation\" : disaggregation.disaggregation_type}\n                    </a>\n                    {disaggregation.is_archived && <span className=\"text-muted font-weight-bold ml-2\">(Archived)</span>}\n                    {expanded && (\n                        <form className=\"form card card-body bg-white\">\n                            <div className=\"form-group\">\n                                <label className=\"label--required\" htmlFor=\"disaggregation-type-input\">\n                                    {/* # Translators: Form field label for the disaggregation name.*/}\n                                    {gettext('Disaggregation')}\n                                </label>\n                                <input\n                                    id=\"disaggregation-type-input\"\n                                    className={classNames('form-control', {'is-invalid':this.formErrors('disaggregation_type')})}\n                                    value={managed_data.disaggregation_type}\n                                    onChange={(e) => this.updateDisaggregationTypeField(e.target.value)}\n                                    type=\"text\"\n                                    required\n                                    disabled={disaggregation.is_archived}\n                                />\n                                <ErrorFeedback errorMessages={this.formErrors('disaggregation_type')} />\n                                <div className=\"form-check\" style={ {marginTop: '8px'} }>\n                                    <input className=\"form-check-input\" type=\"checkbox\" checked={managed_data.selected_by_default}\n                                           onChange={(e) => {this.updateSelectedByDefault(e.target.checked)}} id=\"selected-by-default-checkbox\"\n                                            disabled={disaggregation.is_archived} />\n                                    <label className=\"form-check-label mr-2\" htmlFor=\"selected-by-default-checkbox\">\n                                    {\n                                        // # Translators: This labels a checkbox, when checked, it will make the associated item \"on\" (selected) for all new indicators\n                                        gettext('Selected by default')\n                                    }\n                                    </label>\n                                    <HelpPopover\n                                        key={1}\n                                        // # Translators: Help text for the \"selected by default\" checkbox on the disaggregation form\n                                        content={`<p>${interpolate(gettext('When adding a new program indicator, this disaggregation will be selected by default for every program in %s. The disaggregation can be manually removed from an indicator on the indicator setup form.'), [gettext(this.props.countryName)])}</p>`}\n                                        placement=\"right\"\n                                        innerRef={this.selectedByDefaultPopup}\n                                        ariaText={gettext('More information on \"selected by default\"')}\n                                    />\n                                </div>\n                                {retroPrograms}\n                            </div>\n                            <div className=\"form-group\" style={ {marginTop: '8px'} }    >\n                                <div className=\"row\">\n                                    <div className=\"col-md-7\">\n                                        <h4>\n                                            {/* # Translators:  This is header text for a list of disaggregation categories*/}\n                                            {gettext('Categories')}\n                                        </h4>\n                                    </div>\n                                    <div style={ {marginLeft: '38px'} }>\n                                    {/* Paul: I know this is gross, but trying to line up order with the fields below: */}\n                                    {/* # Translators:  This a column header that shows the sort order of the rows below*/}\n                                        <label>{gettext('Order')}</label>\n                                    </div>\n                                </div>\n                                <DisaggregationCategoryList\n                                    id={ disaggregation.id }\n                                    categories={ this.state.labels }\n                                    disabled={ disaggregation.is_archived }\n                                    updateLabelOrder={ this.updateLabelOrder.bind(this) }\n                                    updateLabel={ this.updateLabel.bind(this) }\n                                    deleteLabel={ this.deleteLabel.bind(this) }\n                                    errors={ errors }\n                                    />\n                                {!disaggregation.is_archived && <div style={ {marginTop: '-15px', marginLeft: '-5px'} }>\n                                    <a tabIndex=\"0\" onClick={() => this.appendLabel()} className=\"btn btn-link btn-add\">\n                                        {/* # Translators:  Button label.  Button allows users to add a disaggregation category to a list.  */}\n                                        <i className=\"fas fa-plus-circle\"/>{gettext('Add a category')}\n                                    </a>\n                                </div>}\n                            </div>\n                            <div className=\"disaggregation-form-buttons\">\n                                <div className=\"form-row btn-row\">\n                                    <button className=\"btn btn-primary\" onClick={(e) => this.save()}\n                                        disabled={disaggregation.is_archived} type=\"button\">{gettext('Save Changes')}</button>\n                                    <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}\n                                        // # Translators:  Button label.  Allows users to undo whatever changes they have made.\n                                        disabled={disaggregation.is_archived}>{gettext('Reset')}</button>\n                                </div>\n                                <div className=\"right-buttons\">\n                                {(disaggregation.is_archived) ? (\n                                    <a tabIndex=\"0\" onClick={unarchiveAction} className=\"btn btn-link\">\n                                        <i className=\"fas fa-archive\"/>{\n                                            // # Translators: this is a verb (on a button that archives the selected item)\n                                            gettext('Unarchive disaggregation')\n                                            }\n                                    </a>\n                                ) : ((disaggregation.id == 'new' || !disaggregation.has_indicators) ? (\n                                        <a tabIndex=\"0\" onClick={deleteAction} className=\"btn btn-link btn-danger\">\n                                            {/* # Translators:  Button text that allows users to delete a disaggregation */}\n                                            <i className=\"fas fa-trash\"/>{gettext('Delete disaggregation')}\n                                        </a>\n                                        ) : (\n                                        <a tabIndex=\"0\" onClick={archiveAction} className=\"btn btn-link\">\n                                            <i className=\"fas fa-archive\"/>{\n                                                // # Translators: this is a verb (on a button that archives the selected item)\n                                                gettext('Archive disaggregation')\n                                                }\n                                        </a>\n                                    )\n                                )}\n                                </div>\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n@observer\nexport default class EditDisaggregations extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            expanded_id: null,\n            is_dirty: false,\n            formReset: null,\n            origSelectedByDefault: false\n        }\n    }\n\n    handleDirtyUpdate(is_dirty) {\n        this.setState({is_dirty: is_dirty})\n        this.props.onIsDirtyChange(is_dirty)\n    }\n\n    dirtyConfirm() {\n        return !this.state.is_dirty || (this.state.is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    toggleExpand(id, formReset) {\n        this.props.clearErrors();\n        if(this.dirtyConfirm()) {\n            const {expanded_id} = this.state;\n            if (id == expanded_id) {\n                (this.state.is_dirty && formReset) && formReset();\n                this.setState({expanded_id: null, formReset: null, origSelectedByDefault: null});\n            } else {\n                if (this.state.formReset) {\n                    (this.state.is_dirty && this.state.formReset());\n                }\n                const currentDisaggList = this.props.disaggregations.filter( disagg => disagg.id === id);\n                let selectedByDefault = currentDisaggList.length > 0 ? currentDisaggList[0].selected_by_default : null;\n                this.setState({\n                    expanded_id: id,\n                    formReset: formReset,\n                    origSelectedByDefault: selectedByDefault\n                });\n            }\n            if(expanded_id === 'new') {\n                this.onDelete(expanded_id);\n            }\n            this.handleDirtyUpdate(false)\n        }\n    }\n\n    addDisaggregation() {\n        if(this.dirtyConfirm()) {\n            this.props.addDisaggregation()\n            this.setState({\n                expanded_id: 'new',\n                origSelectedByDefault: false,\n            }, () => {$('#disaggregation-type-input').focus();});\n        }\n    }\n\n    onDelete(id) {\n        this.props.onDelete(id, () => {this.setState({is_dirty: false, expanded_id: null, formReset: null})});\n        this.props.clearErrors();\n    }\n\n    onSaveChangesPress(data) {\n        if ( this.state.origSelectedByDefault !== data.selected_by_default ){\n            let preamble = \"\"\n            if (data.selected_by_default && data.hasOwnProperty('retroPrograms')) {\n                // # Translators:  This is a warning popup when the user tries to do something that has broader effects than they might anticipate\n                preamble = interpolate(ngettext(\n                    // # Translators:  Warning message about how the new type of disaggregation the user has created will be applied to existing and new data\n                    \"This disaggregation will be automatically selected for all new indicators in %s and for existing indicators in %s program.\",\n                    \"This disaggregation will be automatically selected for all new indicators in %s and for existing indicators in %s programs.\",\n                    data.retroPrograms.length\n                ), [gettext(this.props.countryName), data.retroPrograms.length])\n            }\n            else if (data.selected_by_default) {\n                // # Translators:  This is a warning popup when the user tries to do something that has broader effects than they might anticipate\n                preamble = interpolate(gettext(\"This disaggregation will be automatically selected for all new indicators in %s. Existing indicators will be unaffected.\"), [gettext(this.props.countryName)])\n            }\n            else {\n                // # Translators:  This is a warning popup when the user tries to do something that has broader effects than they might anticipate\n                preamble = interpolate(gettext(\"This disaggregation will no longer be automatically selected for all new indicators in %s. Existing indicators will be unaffected.\"), [this.props.countryName])\n            }\n\n            create_unified_changeset_notice({\n                header: gettext(\"Warning\"),\n                show_icon: true,\n                preamble: preamble,\n                // # Translators: This is the prompt on a popup that has warned users about a change they are about to make that could have broad consequences\n                message_text: gettext(\"Are you sure you want to continue?\"),\n                notice_type: \"notice\",\n                showCloser: true,\n                on_submit: () => this.saveDisaggregation(data),\n                on_cancel: () => {}\n            })\n        }\n        else{\n            this.saveDisaggregation(data);\n        }\n    }\n\n    saveDisaggregation(data) {\n        const withCountry = Object.assign(data, {country: this.props.country_id});\n        if (data.id === 'new') {\n            this.props.onCreate(withCountry).then(\n                (newDisaggregation) => {\n                    this.setState({\n                        expanded_id: newDisaggregation.id,\n                        formReset: null,\n                        origSelectedByDefault: data.selected_by_default\n                    });\n                },\n                ()=>{}\n            );\n        } else {\n            this.props.onUpdate(data.id, withCountry);\n            this.setState({origSelectedByDefault: data.selected_by_default});\n        }\n        this.setState({is_dirty: false});\n    }\n\n    render() {\n        const {disaggregations} = this.props;\n        const {expanded_id} = this.state;\n        return (\n            <div className=\"tab-pane--react\">\n            <div className=\"d-flex justify-content-between\">\n                <h3>{gettext('Country Disaggregations')}</h3>\n                <div>\n                    {!disaggregations.find(d=> d.id=='new') && (\n                        <a tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => this.addDisaggregation()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add country disaggregation\")}\n                        </a>\n                    )}\n                </div>\n            </div>\n                {disaggregations.map(disaggregation =>\n                    <DisaggregationType\n                        key={disaggregation.id}\n                        disaggregation={disaggregation}\n                        programs={this.props.programs}\n                        expanded={disaggregation.id==expanded_id}\n                        assignLabelErrors={this.props.assignLabelErrors}\n                        expandAction={(callback) => this.toggleExpand(disaggregation.id, callback)}\n                        updateLabel={(labelIndex, value) => this.updateLabel(disaggregation.id, labelIndex, value)}\n                        deleteAction={this.onDelete.bind(this, disaggregation.id)}\n                        archiveAction={() => this.props.onArchive(disaggregation.id)}\n                        unarchiveAction={() => this.props.onUnarchive(disaggregation.id)}\n                        saveDisaggregation={(data) => this.onSaveChangesPress(data)}\n                        errors={this.props.errors}\n                        clearErrors={this.props.clearErrors}\n                        onIsDirtyChange={(is_dirty) => this.handleDirtyUpdate(is_dirty)}\n                        countryName={this.props.countryName}\n                    />\n                )}\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport classNames from 'classnames'\n\n@observer\nexport default class CountryEditor extends React.Component {\n\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.props.notifyPaneChange(new_page)\n        }\n    }\n\n    render() {\n        const {ProfileSection, StrategicObjectiveSection, DisaggregationSection, HistorySection, active_pane} = this.props\n\n        return (\n            <div className=\"tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {'active': active_pane=='profile'})}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile')}}>\n                            {gettext(\"Profile\")}\n                            </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {\n                                'active': active_pane=='objectives',\n                                'disabled': this.props.new,\n                            })}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('objectives')}}>\n                            {gettext(\"Strategic Objectives\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {\n                                'active': active_pane=='disaggregations',\n                                'disabled': this.props.new,\n                            })}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('disaggregations')}}>\n                            {gettext(\"Country Disaggregations\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={classNames('nav-link', {\n                                'active': active_pane=='history',\n                                'disabled': this.props.new,\n                            })}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('history')}}>\n                            {gettext(\"History\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {active_pane == 'profile' && (\n                        <ProfileSection />\n                    )}\n\n                    {active_pane == 'objectives' && (\n                        <StrategicObjectiveSection />\n                    )}\n\n                    {active_pane == 'disaggregations' && (\n                        <DisaggregationSection />\n                    )}\n\n                    {active_pane == 'history' && (\n                        <HistorySection />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\n/* Sidebar expando/collapso mimicking bootstrap behavior\n * CSS in components/_folding_sidebar.scss\n * Usage: <FoldingSidebar>\n *          children to be hidden when toggle is clicked\n *         </FoldingSidebar>\n */\n\nclass FoldingSidebar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folding: false,\n            folded: false,\n            resize: false\n        };\n        this.contentsContainer = React.createRef();\n    }\n\n    componentDidMount() {\n        this.contentWidth = this.contentsContainer.current.offsetWidth;\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if (!this.state.folded && !this.state.folding) {\n            this.setState(() => ({resize: true}),\n                          () => {\n                            this.contentWidth = this.contentsContainer.current.offsetWidth;\n                            this.setState({resize: false});\n                          });\n        }\n    }\n\n    toggleFolded() {\n        if (!this.state.folding) {\n            this.setState(\n                {folding: true,\n                 folded: !this.state.folded});\n        } else {\n            this.foldComplete();\n        }\n    }\n\n    foldComplete() {\n        this.setState(() => ({folding: false}), this.updateDimensions);\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = this.state.folded\n                     ? this.state.folding\n                        ? \"fa-angle-double-left\" : \"fa-chevron-right\"\n                     : this.state.folding\n                        ? \"fa-angle-double-right\" : \"fa-chevron-left\";\n        const width = this.state.folded ? \"0px\" : this.state.resize ? \"auto\" : this.contentWidth + \"px\";\n        const overflow = (this.state.folded || this.state.folding) ? \"hidden\" : \"visible\";\n        return (\n        <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            <div className={\"folding-sidebar__contents\"}\n                 onTransitionEnd={() => this.foldComplete()}\n                 ref={this.contentsContainer}\n                style={{width: width, overflow: overflow }}\n            >\n                <React.Fragment>{this.props.children}</React.Fragment>\n            </div>\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default FoldingSidebar\n","/* Site-wide constants */\n\n\n/**\n * JS_GLOBALS is in base.html (base Tola template) - delivered by middleware from the backend\n * this function returns the global constant for a given key (i.e. 'reason_for_change_options')\n */\n\nfunction getGlobal(key) {\n    if ((typeof JS_GLOBALS !== 'undefined')  && JS_GLOBALS.hasOwnProperty(key)) {\n        return JS_GLOBALS[key];\n    }\n    return null;\n}\n\n\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\nconst EM_DASH = \"—\";\nconst BLANK_TABLE_CELL = EM_DASH;\n\n\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nconst TIME_AWARE_FREQUENCIES = [3, 4, 5, 6, 7];\nconst IRREGULAR_FREQUENCIES = [1, 2];\n\nconst TVA_FREQUENCY_LABELS = Object.freeze(\n    {\n        1: gettext(\"Life of Program (LoP) only\"),\n        2: gettext(\"Midline and endline\"),\n        3: gettext(\"Annual\"),\n        4: gettext(\"Semi-annual\"),\n        5: gettext(\"Tri-annual\"),\n        6: gettext(\"Quarterly\"),\n        7: gettext(\"Monthly\")\n    }\n);\n\nconst TIMEPERIODS_FREQUENCY_LABELS = Object.freeze(\n    {\n        3: gettext(\"Years\"),\n        4: gettext(\"Semi-annual periods\"),\n        5: gettext(\"Tri-annual periods\"),\n        6: gettext(\"Quarters\"),\n        7: gettext(\"Months\")\n    }\n);\n\nexport { BLANK_OPTION, BLANK_LABEL, BLANK_TABLE_CELL, EM_DASH, TVA, TIMEPERIODS, TIME_AWARE_FREQUENCIES,\n         IRREGULAR_FREQUENCIES, TVA_FREQUENCY_LABELS, TIMEPERIODS_FREQUENCY_LABELS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nfunction getPeriodLabels() {\n    return {\n        targetperiodLabels: {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        },\n        timeperiodLabels: {\n            3: _gettext(\"Years\"),\n            5: _gettext(\"Tri-annual periods\"),\n            4: _gettext(\"Semi-annual periods\"),\n            7: _gettext(\"Months\"),\n            6: _gettext(\"Quarters\")\n        }\n    };\n}\n\nexport {getPeriodLabels};\n\nexport const STATUS_CODES = {\n    NO_INDICATOR_IN_UPDATE: 1\n};\n\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n    nonReporting: 8\n});\n\nexport const RFC_OPTIONS = getGlobal('reason_for_change_options') ?? [];"],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA/FA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAUA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AAEA;;;;AA5BA;AACA;AADA;AA+BA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA/BA;AAiCA;AACA;AACA;AAnCA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAKA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA9CA;AAiDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAjBA;AA+BA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClRA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAEA;AA2CA;AAGA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAAA;AAAA;AAwDA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhEA;AAAA;AAAA;AAmEA;AAAA;AAAA;AACA;AApEA;AAAA;AAAA;AAuEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAxFA;AAAA;AAAA;AA4FA;AACA;AACA;AACA;AA/FA;AAAA;AAAA;AAmGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA1GA;AAAA;AAAA;AA8GA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnHA;AAAA;AAAA;AAuHA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AA/HA;AAAA;AAAA;AAkIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlKA;AAAA;AAAA;AAqKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7KA;AAAA;AAAA;AA+KA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3LA;AAAA;AAAA;AA6LA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAxMA;AAAA;AAAA;AA2MA;AAAA;AAAA;AAAA;AACA;AA5MA;AAAA;AAAA;AA+MA;AACA;AAAA;AAAA;AAAA;AACA;AAjNA;AAAA;AAAA;AAoNA;AACA;AAAA;AAAA;AAAA;AACA;AAtNA;AAAA;AAAA;AAyNA;AACA;AAAA;AAAA;AAAA;AACA;AA3NA;AAAA;AAAA;AA8NA;AAAA;AAEA;AACA;AAHA;AAKA;AAnOA;AAAA;AAAA;AAsOA;AAAA;AAEA;AACA;AAHA;AAKA;AA3OA;AAAA;AAAA;AAkPA;AACA;AAnPA;AAAA;AAAA;AAuPA;AACA;AACA;AACA;AACA;AA3PA;AAAA;AAAA;AA8PA;AACA;AA/PA;AAAA;AAAA;AAmQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AArRA;AAAA;AAAA;AAwRA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA9SA;AAAA;AAAA;AAgTA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnUA;AAAA;AAAA;AAsUA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA1UA;AAAA;AAAA;AA4UA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAjWA;AAAA;AAAA;AAmWA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnXA;AAAA;AAAA;AAqXA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApYA;AAAA;AAAA;AAuYA;AACA;AAxYA;AAAA;AAAA;AA2YA;AACA;AA5YA;AAAA;AAAA;AA+YA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AA1ZA;AAAA;AAAA;AA4ZA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AA5bA;AAAA;AAAA;AA8bA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AAzdA;AAAA;AAAA;AA2dA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AAtfA;AAAA;AAAA;AAwfA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAthBA;AAAA;AAAA;AAwhBA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAvjBA;AAAA;AAAA;AA2jBA;AACA;AACA;AACA;AACA;AACA;AAhkBA;AAAA;AAAA;AAokBA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAjlBA;AAAA;AAAA;AAsmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAhnqlBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnmBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAKA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAIA;AACA;AADA;AAJA;AAOA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAQA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AASA;;;;AA/GA;AACA;AAkHA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAVA;AADA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAKA;;;;AAhGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AACA;AATA;AAAA;AAAA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AARA;AAaA;AAKA;AA5CA;AACA;AADA;AAAA;AACA;AA8CA;AAAA;AAEA;AACA;AADA;AADA;AADA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AAGA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAdA;AACA;AADA;AAAA;AAiBA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAKA;AAAA;AAMA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAMA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;;;;;;;;;;;;ACrnBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AADA;AACA;AACA;AAPA;AASA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AA5CA;AAEA;AACA;;;AAyCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;;;;AAvDA;AACA;AAyDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AADA;AAKA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AAVA;AAFA;AAGA;AACA;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AAAA;AAKA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAKA;;;;AAjFA;AACA;AAoFA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AARA;AAFA;AAmBA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AARA;AANA;AAHA;AAvBA;AA2DA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAQA;AAAA;AAGA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AALA;AAAA;AAAA;AAOA;AACA;AACA;AADA;AAGA;AACA;AAZA;AAAA;AAAA;AAeA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AANA;AAWA;AAhDA;AACA;AADA;AAAA;AAoDA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AA9DA;AAGA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAE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AACA;AACA;AADA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;;;;AAnEA;AACA;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAYA;;;;A","sourceRoot":""}