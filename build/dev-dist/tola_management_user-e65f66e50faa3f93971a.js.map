{"version":3,"file":"tola_management_user-e65f66e50faa3f93971a.js","sources":["webpack:///./js/pages/tola_management_pages/user/components/edit_user_programs.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/pages/tola_management_pages/user/components/edit_user_profile.js","webpack:///./js/pages/tola_management_pages/user/index.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/pages/tola_management_pages/user/components/edit_user_history.js","webpack:///./js/components/changelog.js","webpack:///./js/pages/tola_management_pages/user/api.js","webpack:///./js/components/pagination.js","webpack:///./js/components/management-table.js","webpack:///./js/general_utilities.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/user/views.js","webpack:///./js/pages/tola_management_pages/user/models.js","webpack:///./js/pages/tola_management_pages/user/components/user_editor.js","webpack:///./js/components/folding-sidebar.js","webpack:///./js/constants.js"],"sourcesContent":["import React from 'react';\nimport { observable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport {AutoSizer, Table, Column, CellMeasurer, CellMeasurerCache} from 'react-virtualized';\nimport { CountryStore } from '../models';\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\n\n//we need a pretty peculiar structure to accommodate the virtualized table\nconst create_country_objects = (countries, store) => Object.entries(countries)\n                                                    .reduce((countries, [id, country]) => ({\n                                                        ...countries,\n                                                        [id]: {\n                                                            ...country,\n                                                            type: 'country',\n                                                            options: [{label: gettext('Individual programs only'), value: 'none'}, ...store.country_role_choices],\n                                                            admin_access: store.is_superuser,\n                                                            programs: new Set(country.programs)\n                                                        }\n                                                    }),{})\n\nconst create_program_objects = (programs, store) => Object.entries(programs)\n                                                           .reduce((programs, [id, program]) => ({\n                                                               ...programs,\n                                                               [id]: {\n                                                                   ...program,\n                                                                   type: 'program',\n                                                                   options: store.program_role_choices,\n                                                               }\n                                                           }),{})\n\n/**\n * This function returns countries and programs as a flat ordered list as they will be displayed in the virtualized table.\n *\n * @param {Object[]} countries - the country objects created by create_country_objects (with program info)\n * @param {Object[]} programs - the program objects created by create_program_objects (with user role info)\n * @param {@callback} isExpanded - The callback which determines if a given country ID should be expanded, incorporating\n *                                filter states and previous user toggles\n * @returns {Object[]} - the countries and programs as rowData for the virtualized table\n */\nconst flattened_listing = (countries, programs, isExpanded) => countries.flatMap(country => //flatMap to return a flattened list\n                                                        [\n                                                            country, // country object itself displays, followed by programs\n                                                            ...(isExpanded(country.id) ? Array.from(country.programs) //only show programs if country is expanded\n                                                                .filter(program_id => programs[program_id]) // don't include programs we don't have information for (filtered out)\n                                                                .map(program_id => ({...programs[program_id], id: `${country.id}_${program_id}`, country_id: country.id})) : [])\n                                                        ]\n                                                    )\n\nconst apply_program_filter = (programs, countries, filter_string) => {\n    if(!filter_string) {\n        return {\n            programs,\n            countries\n        }\n    }\n    const filtered_programs = Object.entries(programs).filter(([_, program]) => program.name.toLowerCase().includes(filter_string.toLowerCase())).map(([_, p]) => p)\n    const filtered_countries = Object.entries(countries).filter(([_, country]) => filtered_programs.some(program => country.programs.has(program.id))).map(([_, c]) => c)\n\n    return {\n        countries: filtered_countries.reduce((countries, country) => ({...countries, [country.id]: country}), {}),\n        programs: filtered_programs.reduce((programs, program) => ({...programs, [program.id]: program}), {}),\n    }\n}\n\nconst apply_country_filter = (countries, filtered) => {\n    if(filtered.length > 0) {\n        return filtered.filter(id => countries[id])\n                       .map(id => countries[id])\n                       .reduce((countries, country) => ({...countries, [country.id]: country}), {})\n    } else {\n        return countries\n    }\n}\n\nconst create_user_access = (user_access) => ({\n    countries: Object.entries(user_access.countries).reduce((countries, [id, country]) => ({...countries, [id]: {...country, has_access: true}}), {}),\n    programs: user_access.programs.reduce((programs, program) => ({...programs, [`${program.country}_${program.program}`]: {...program, has_access: true}}), {})\n})\n\nconst country_has_all_access = (country, visible_programs, user_program_access) =>\n    Array.from(country.programs)\n            .filter(program_id => !!visible_programs[program_id])\n            .every(program_id =>\n                user_program_access.programs[`${country.id}_${program_id}`]\n                && user_program_access.programs[`${country.id}_${program_id}`].has_access\n            )\n\n@observer\nexport default class EditUserPrograms extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const {store} = props\n\n        const countries = create_country_objects(store.countries, store)\n        const programs = create_program_objects(store.programs, store)\n        this.countryStore = new CountryStore(store.regions, store.countries);\n        \n        // callback for determining if a country is expanded based on filter state (initial program filter of ''):\n        const isExpanded = this.isExpanded.bind(this, '');\n        this.state = {\n            program_filter: '',\n            countries,\n            programs,\n            filtered_countries: countries,\n            filtered_programs: programs,\n            ordered_country_ids: store.ordered_country_ids,\n            flattened_programs: flattened_listing(store.ordered_country_ids.filter(id => id in countries).map(id => countries[id]), programs, isExpanded),\n            original_user_program_access: create_user_access(store.editing_target_data.access),\n            user_program_access: create_user_access(store.editing_target_data.access)\n        }\n    }\n\n\n    saveForm() {\n        //marshal the data back into the format we received it\n        //filtering out all !has_access\n        const access = this.state.user_program_access\n        this.props.onSave({\n            countries: Object.entries(access.countries)\n                             .filter(([_, country]) => this.props.store.is_superuser)\n                             .filter(([_, country]) => country.has_access)\n                             .reduce((countries, [id, country]) => ({...countries, [id]: country}), {}),\n            programs: Object.entries(access.programs)\n                            .filter(([_, program]) => program.has_access)\n                            .map(([_, program]) => program)\n        })\n        this.hasUnsavedDataAction()\n    }\n\n    hasUnsavedDataAction() {\n        const access = {\n            countries: Object.entries(this.state.user_program_access.countries).filter(([_, country]) => country.has_access).reduce((countries, [id, country]) => ({...countries, [id]: country}), {}),\n            programs: Object.entries(this.state.user_program_access.programs).filter(([_, program]) => program.has_access).reduce((programs, [id, program]) => ({...programs, [id]: program}), {})\n        }\n        this.props.onIsDirtyChange(JSON.stringify(access) != JSON.stringify(this.state.original_user_program_access))\n    }\n\n    resetForm() {\n        this.setState({\n            user_program_access: {\n                countries: {...this.state.original_user_program_access.countries},\n                programs: {...this.state.original_user_program_access.programs}\n            }\n        }, () => this.hasUnsavedDataAction())\n\n\n    }\n\n    toggleProgramAccess(program_key) {\n        const current_program_access = this.state.user_program_access.programs\n        const updated_program_access = (() => {\n            if(current_program_access[program_key]) {\n                return {...current_program_access[program_key], has_access: !current_program_access[program_key].has_access}\n            } else {\n                //TODO: want to find a more resilient way to handle a compound key\n                const [country, program] = program_key.split('_')\n                return {country, program, role: 'low', has_access: true}\n            }\n        })()\n\n        this.setState({\n            user_program_access: {\n                ...this.state.user_program_access,\n                programs: {\n                    ...current_program_access,\n                    [program_key]: updated_program_access\n                }\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    toggleAllProgramsForCountry(country_id) {\n        const country = this.state.countries[country_id]\n\n        const new_program_access = (() => {\n            const country_has_all_checked = country_has_all_access(\n                country,\n                this.state.filtered_programs,\n                this.state.user_program_access\n            )\n\n            if(country_has_all_checked) {\n                //toggle all off\n                return Array.from(country.programs).filter(program_id => {\n                    return !!this.state.filtered_programs[program_id]\n                }).reduce((programs, program_id) => {\n                    const program_key = `${country.id}_${program_id}`\n                    const program = this.state.user_program_access.programs[program_key]\n                    if(program) {\n                        return {...programs, [program_key]: {...program, has_access: false}}\n                    } else {\n                        return programs\n                    }\n                }, {})\n            } else {\n                //toggle all on\n                return Array.from(country.programs).filter(program_id => {\n                    return !!this.state.filtered_programs[program_id]\n                }).reduce((programs, program_id) => {\n                    const program_key = `${country.id}_${program_id}`\n                    const program = this.state.user_program_access.programs[program_key]\n                    if(program) {\n                        return {...programs, [program_key]: {...program, has_access: true}}\n                    } else {\n                        return {...programs, [program_key]: {program: program_id, country: country.id, role: 'low', has_access: true}}\n                    }\n                }, {})\n            }\n        })()\n        this.setState({\n            user_program_access: {\n                ...this.state.user_program_access,\n                programs: {...this.state.user_program_access.programs, ...new_program_access}\n            }\n        }, () => this.hasUnsavedDataAction())\n\n    }\n\n    changeCountryRole(country_id, new_val) {\n        const country = {...this.state.user_program_access.countries[country_id]}\n        const new_country_access = (() => {\n            if(new_val != 'none') {\n                return {...country, role: new_val, has_access: true}\n            } else {\n                return {...country, role: new_val, has_access: false}\n            }\n        })()\n\n        this.setState({\n            user_program_access: {\n                ...this.state.user_program_access,\n                countries: {\n                    ...this.state.user_program_access.countries,\n                    [country_id]: new_country_access\n                }\n            },\n        }, () => this.hasUnsavedDataAction())\n\n    }\n\n    changeProgramRole(program_key, new_val) {\n        const [country_id, program_id] = program_key.split('_')\n        const access = this.state.user_program_access\n\n\n        const new_program_access = (() => {\n            if(access[country_id] && access[country_id].has_access && new_val == 'low') {\n                return {\n                    program: program_id,\n                    country: country_id,\n                    role: new_val,\n                    has_access: false\n                }\n            } else {\n                return {\n                    program: program_id,\n                    country: country_id,\n                    role: new_val,\n                    has_access: true\n                }\n            }\n        })()\n\n        this.setState({\n            user_program_access: {\n                ...this.state.user_program_access,\n                programs: {\n                    ...this.state.user_program_access.programs,\n                    [program_key]: new_program_access\n                }\n            }\n        }, () => this.hasUnsavedDataAction())\n\n    }\n\n\n    clearFilter() {\n        const val = ''\n        const filtered_countries = apply_country_filter(this.state.countries, this.countryStore.selectedCountries)\n        const {countries, programs} = apply_program_filter(\n            this.state.programs,\n            filtered_countries,\n            val\n        )\n\n        // callback for determining if a country is expanded based on filter state:\n        const isExpanded = this.isExpanded.bind(this, val);\n        this.setState({\n            program_filter: val,\n            filtered_programs: programs,\n            filtered_countries: countries,\n            flattened_programs: flattened_listing(this.state.ordered_country_ids.filter(id => id in countries).map(id => countries[id]), programs, isExpanded),\n        })\n    }\n\n    updateProgramFilter(val) {\n        const filtered_countries = apply_country_filter(this.state.countries, this.countryStore.selectedCountries)\n        const {countries, programs} = apply_program_filter(\n            this.state.programs,\n            filtered_countries,\n            val\n        )\n\n        // callback for determining if a country is expanded based on filter state:\n        const isExpanded = this.isExpanded.bind(this, val);\n\n        this.setState({\n            program_filter: val,\n            filtered_programs: programs,\n            filtered_countries: countries,\n            flattened_programs: flattened_listing(this.state.ordered_country_ids.filter(id => id in countries).map(id => countries[id]), programs, isExpanded),\n        })\n    }\n\n    changeCountryFilter(e) {\n        this.countryStore.updateSelected(e);\n        const filtered_countries = apply_country_filter(this.state.countries, this.countryStore.selectedCountries, true)\n        const {countries, programs} = apply_program_filter(\n            this.state.programs,\n            filtered_countries,\n            this.state.program_filter\n        )\n\n        // callback for determining if a country is expanded based on filter state:\n        const isExpanded = this.isExpanded.bind(this, this.state.program_filter);\n\n        this.setState({\n            filtered_countries: countries,\n            flattened_programs: flattened_listing(this.state.ordered_country_ids.filter(id => id in countries).map(id => countries[id]), this.state.filtered_programs, isExpanded),\n        })\n    }\n\n    toggleCountryExpanded(id) {\n        this.countryStore.toggleExpanded(id);\n        const filtered_countries = apply_country_filter(this.state.countries, this.countryStore.selectedCountries);\n        const {countries, programs} = apply_program_filter(\n            this.state.programs,\n            filtered_countries,\n            this.state.program_filter\n        )\n        // callback for determining if a country is expanded based on filter state:\n        const isExpanded = this.isExpanded.bind(this, this.state.program_filter);\n\n        this.setState({\n            filtered_countries: countries,\n            flattened_programs: flattened_listing(this.state.ordered_country_ids.filter(id => id in countries).map(id => countries[id]), this.state.filtered_programs, isExpanded),\n        });\n    }\n\n    isExpanded(program_filter, countryId) {\n        // when bound with this and program_filter state (a string), and called with country ID, returns true if country should be expanded\n        if (program_filter && program_filter.length > 0) {\n            // all countries left showing given a program filter should be expanded to show the programs filtered to\n            return true;\n        }\n        // countryStore tracks toggling of expanded/collapsed state\n        return this.countryStore.isExpanded(countryId);\n    }\n\n    render() {\n        const {user, onSave} = this.props\n\n        const is_checked = (data) => {\n            const access = this.state.user_program_access\n            if(data.type == 'country') {\n                return (access.countries[data.id] && access.countries[data.id].has_access) || false\n            } else {\n                if(this.state.user_program_access.countries[data.country_id] && this.state.user_program_access.countries[data.country_id].has_access) {\n                    return true\n                }\n                return (access.programs[data.id] && access.programs[data.id].has_access) || false\n            }\n        }\n\n        const is_check_disabled = (data) => {\n            if(data.type == 'country') {\n                return !(this.state.countries[data.id].programs.size > 0)\n                    || !(\n                        this.props.store.access.countries[data.id]\n                        && this.props.store.access.countries[data.id].role == 'basic_admin'\n                    )\n                    || (\n                        this.state.user_program_access.countries[data.id]\n                        && this.state.user_program_access.countries[data.id].has_access\n                    )\n\n            } else {\n                if(this.state.user_program_access.countries[data.country_id] && this.state.user_program_access.countries[data.country_id].has_access) {\n                    return true\n                }\n                return !this.props.store.access.countries[data.country_id] || this.props.store.access.countries[data.country_id].role != 'basic_admin'\n            }\n        }\n\n        const is_role_disabled = (data) => {\n            if(data.type == 'country') {\n                return !this.props.store.is_superuser\n            } else {\n                return (\n                    !this.props.store.access.countries[data.country_id]\n                    || this.props.store.access.countries[data.country_id].role != 'basic_admin'\n                    || (\n                        !(\n                            this.state.user_program_access.programs[data.id]\n                            && this.state.user_program_access.programs[data.id].has_access\n                        ) && !(\n                            this.state.user_program_access.countries[data.country_id]\n                            && this.state.user_program_access.countries[data.country_id].has_access\n                        )\n                    )\n                )\n            }\n        }\n\n        const get_role = (data) => {\n            if(data.type == 'country') {\n                const country_access = this.state.user_program_access.countries\n                if(!country_access[data.id]) {\n                    return 'none'\n                } else {\n                    return country_access[data.id].role\n                }\n            } else {\n                const program_access = this.state.user_program_access.programs\n                if(!program_access[data.id]) {\n                    return this.props.store.program_role_choices[0].value\n                } else {\n                    return program_access[data.id].role\n                }\n            }\n        }\n\n        return (\n            <div className=\"tab-pane--react edit-user-programs\">\n                <h2 className=\"no-bold\">{user.name?user.name+': ':''}{gettext(\"Programs and Roles\")}\n                <sup>   <a target=\"_blank\" href=\"https://learn.mercycorps.org/index.php/TOLA:Section_05/en#5.4_User_Roles_Matrix_.28Program_Permissions.29\">\n                        <i aria-label={\n                            // # Translators: link to learn more about permissions-granting roles a user can be assigned\n                            gettext('More information on Program Roles')} className=\"far fa-question-circle\" />\n                </a></sup></h2>\n\n                <div className=\"edit-user-programs__filter-form\">\n                    <div className=\"edit-user-programs__country-filter form-group react-multiselect-checkbox\">\n                        <CheckboxedMultiSelect placeholder={\n                            // # Translators: This is placeholder text on a dropdown of countries which limit the displayed programs\n                            gettext(\"Filter countries\")} isMulti={true} value={this.countryStore.selectedOptions} options={this.countryStore.groupedOptions} onChange={(e) => this.changeCountryFilter(e)} />\n                    </div>\n                    <div className=\"form-group edit-user-programs__program-filter\">\n                        <div className=\"input-group\">\n                            <input placeholder={\n                                // # Translators: this is placeholder text on a dropdown of programs which limit the displayed results\n                                gettext(\"Filter programs\")} type=\"text\" value={this.state.program_filter} className=\"form-control\" onChange={(e) => this.updateProgramFilter(e.target.value)} />\n                            <div className=\"input-group-append\">\n                                <a onClick={(e) => {e.preventDefault(); this.clearFilter()}}>\n                                    <span className=\"input-group-text\"><i className=\"fa fa-times-circle\"></i></span>\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"virtualized-table__wrapper\">\n                    <AutoSizer>\n                        {({height, width}) =>\n                            <Table\n                            height={height}\n                            headerHeight={50}\n                            width={width}\n                            rowGetter={({index}) => this.state.flattened_programs[index]}\n                            rowHeight={50}\n                            rowCount={this.state.flattened_programs.length}>\n\n                                <Column\n                                dataKey=\"not_applicable_but_required\"\n                                label={\n                                    /* # Translators: Column header for a checkbox indicating if a user has access to a program */\n                                    gettext(\"Has access?\")\n                                }\n                                width={100}\n                                cellDataGetter={({rowData}) => ({\n                                    checked: is_checked(rowData),\n                                    disabled: is_check_disabled(rowData),\n                                    id: rowData.id,\n                                    type: rowData.type,\n                                    expanded: (rowData.type == \"country\") ? this.state.program_filter || this.countryStore.isExpanded(rowData.id) : false,\n                                    programsCount: (rowData.type == \"country\") ? rowData.programs.size : null,\n                                    action: (rowData.type == \"country\")?this.toggleAllProgramsForCountry.bind(this):this.toggleProgramAccess.bind(this)\n                                })}\n                                cellRenderer={({cellData}) => {\n                                    if (cellData.type == 'country') {\n                                        const country_has_all_checked = country_has_all_access(\n                                            this.state.countries[cellData.id],\n                                            this.state.filtered_programs,\n                                            this.state.user_program_access\n                                        )\n                                        const button_label = (country_has_all_checked)?gettext('Deselect All'):gettext('Select All')\n                                        const selectAllButton = (cellData.disabled || !cellData.expanded) ? null : <a className=\"edit-user-programs__select-all\" onClick={(e) => cellData.action(cellData.id)}>{button_label}</a>\n                                        return <div className=\"check-column\">{selectAllButton}</div>;\n                                    } else {\n                                        return <div className=\"check-column\"><input type=\"checkbox\" checked={cellData.checked} disabled={cellData.disabled} onChange={() => cellData.action(cellData.id)} /></div>\n                                    }\n                                }}/>\n\n                                <Column\n                                dataKey=\"not_applicable_but_required\"\n                                label={gettext(\"Countries and Programs\")}\n                                width={200}\n                                flexGrow={2}\n                                className='pl-0'\n                                cellDataGetter={({rowData}) => ({\n                                    expanded: (rowData.type == \"country\") ? this.state.program_filter || this.countryStore.isExpanded(rowData.id) : false,\n                                    programsCount: (rowData.type == \"country\") ? rowData.programs.size : null,\n                                    expandoAction: (rowData.type == \"country\") ? this.toggleCountryExpanded.bind(this, rowData.id):null,\n                                    bold: rowData.type == \"country\", name: rowData.name\n                                })}\n                                cellRenderer={({cellData}) => {\n                                    if(cellData.bold) {\n                                        const expandoIcon = cellData.programsCount ? <FontAwesomeIcon icon={ cellData.expanded ? 'caret-down' : 'caret-right' } /> : null;\n                                        const nameCellInner = <React.Fragment><div className=\"expando-toggle__icon\">{ expandoIcon }</div><div className=\"expando-toggle__label\"><strong>{cellData.name}</strong></div></React.Fragment>\n                                        if (cellData.programsCount) {\n                                            return <div className=\"edit-user-programs__expando expando-toggle icon__clickable\" onClick={cellData.expandoAction}>{ nameCellInner }</div>;\n                                        } else {\n                                            return <div className=\"edit-user-programs__expando expando-toggle\">{ nameCellInner }</div>;\n                                        }\n                                    } else {\n                                        return <span>{cellData.name}</span>\n                                    }\n                                }} />\n\n                                <Column\n                                width={100}\n                                flexGrow={1}\n                                className='pl-0'\n                                dataKey=\"not_applicable_but_required\"\n                                label={gettext(\"Roles and Permissions\")}\n                                cellDataGetter={({rowData}) => ({\n                                    id: rowData.id,\n                                    disabled: is_role_disabled(rowData),\n                                    type: rowData.type,\n                                    options: rowData.options,\n                                    action: (rowData.type == \"country\")?this.changeCountryRole.bind(this):this.changeProgramRole.bind(this)\n                                })}\n                                cellRenderer={({cellData}) =>\n                                    <select\n                                    disabled={cellData.disabled}\n                                    value={get_role(cellData)}\n                                    onChange={(e) => cellData.action(cellData.id, e.target.value)}>\n                                        {cellData.options.map(option => <option key={option.value} value={option.value}>{option.label}</option>)}\n                                    </select>\n                                }/>\n\n                            </Table>\n                        }\n                    </AutoSizer>\n                </div>\n\n                <div className=\"form-group btn-row\">\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.saveForm()}>Save Changes</button>\n                    <button type=\"button\" className=\"btn btn-reset\" onClick={() => this.resetForm()}>Reset</button>\n                </div>\n\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","import React from 'react'\nimport Select from 'react-select'\nimport { observer } from \"mobx-react\"\nimport { toJS } from 'mobx'\n\n@observer\nexport default class EditUserProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const {userData} = props\n        const filtered_orgs = props.organizations.filter(o => o.value != 1 || props.is_superuser)\n        let organization_listing = []\n        for (let org of filtered_orgs) {\n            let org_js = toJS(org);\n            if (org_js.label === \"Mercy Corps\"){\n                // # Translators: This is an deactivated menu item visible to users, indicating that assignment of this option is manaaged by another system.\n                org_js.label = gettext(\"Mercy Corps -- managed by Okta\");\n                org_js.isDisabled = true;\n            }\n            organization_listing.push(org_js)\n        }\n\n        const selected_organization = organization_listing.find(o => o.value == userData.organization_id)\n        this.hasMCEmail = userData.email.endsWith(\"@mercycorps.org\");\n        this.state = {\n            original_user_data: {...userData},\n            managed_user_data: {...userData},\n            selected_organization,\n            organization_listing\n        }\n    }\n\n    save() {\n        this.props.onUpdate(this.state.managed_user_data)\n    }\n\n    saveNew(e) {\n        e.preventDefault()\n        this.props.onCreate(this.state.managed_user_data)\n    }\n\n    saveNewAndAddAnother(e) {\n        e.preventDefault()\n        this.props.onCreateAndAddAnother(this.state.managed_user_data)\n    }\n\n    updateFirstName(new_first_name) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                first_name: new_first_name,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateLastName(new_last_name) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                last_name: new_last_name,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateUsername(new_username) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                username: new_username,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateOrganization(new_option) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                organization_id: new_option.value,\n            },\n            selected_organization: new_option\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateTitle(new_title) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                title: new_title,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateEmail(new_email) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                email: new_email,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updatePhone(new_phone) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                phone_number: new_phone,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateModeOfContact(new_mode_of_contact) {\n        this.setState({\n            managed_user_data: {\n                ...this.state.managed_user_data,\n                mode_of_contact: new_mode_of_contact,\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_user_data) != JSON.stringify(this.state.original_user_data))\n    }\n\n    resetForm() {\n        const selected_organization = this.state.organization_listing.find(o => o.value == this.state.original_user_data.organization_id)\n        this.setState({\n            managed_user_data: this.state.original_user_data,\n            selected_organization\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    render() {\n        const ud = this.state.managed_user_data\n        const e = this.props.errors\n        const disabled = this.props.disabled\n        const error_classes = {\n            first_name: (e.first_name)?'is-invalid':'',\n            last_name: (e.last_name)?'is-invalid':'',\n            username: (e.username)?'is-invalid':'',\n            email: (e.email)?'is-invalid':'',\n            organization: (e.organization_id)?'is-invalid':''\n        }\n        return (\n            <div className=\"tab-pane--react\">\n                <h2 className=\"no-bold\">{ud.name? ud.name+': ':''}{gettext(\"Profile\")}</h2>\n                <form className=\"form\">\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"user-first-name-input\">{gettext(\"Preferred First Name\")}</label>\n                        <input\n                            disabled={disabled || this.hasMCEmail}\n                            className={\"form-control \"+error_classes.first_name}\n                            type=\"text\"\n                            value={ud.first_name || ''}\n                            onChange={(e) => this.updateFirstName(e.target.value) }\n                            id=\"user-first-name-input\"\n                            required />\n                        {e.first_name &&\n                        <div className=\"invalid-feedback\">\n                            {e.first_name}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"user-last-name-input\">{gettext(\"Preferred Last Name\")}</label>\n                        <input\n                            disabled={disabled || this.hasMCEmail}\n                            className={\"form-control \"+error_classes.last_name}\n                            type=\"text\"\n                            value={ud.last_name || ''}\n                            onChange={(e) => this.updateLastName(e.target.value) }\n                            id=\"user-last-name-input\"\n                            required />\n                        {e.last_name &&\n                         <div className=\"invalid-feedback\">\n                             {e.last_name}\n                         </div>\n                        }\n                     </div>\n                     <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"user-username-input\">{gettext(\"Username\")}</label>\n                        <input\n                            disabled={disabled || this.hasMCEmail}\n                            className={\"form-control \"+error_classes.username}\n                            type=\"text\"\n                            value={ud.username || ''}\n                            onChange={(e) => this.updateUsername(e.target.value) }\n                            id=\"user-username-input\"\n                            required />\n                        {e.username &&\n                         <div className=\"invalid-feedback\">\n                             {e.username}\n                         </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"user-organization-input\">{gettext(\"Organization\")}</label>\n                        <Select\n                            isDisabled={disabled || this.hasMCEmail}\n                            className={\"react-select \"+error_classes.organization}\n                            value={this.state.selected_organization}\n                            options={this.state.organization_listing}\n                            onChange={(e) => this.updateOrganization(e)}\n                            // # Translators: This is the default option for a dropdown menu\n                            placeholder={gettext(\"None Selected\")}\n                            id=\"user-organization-input\" />\n                        {e.organization_id &&\n                        <div className=\"invalid-feedback feedback--react-select\">\n                            {e.organization_id}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"user-title-input\">{gettext(\"Title\")}</label>\n                        <input\n                            disabled={disabled}\n                            maxLength=\"50\"\n                            type=\"text\"\n                            value={ud.title || ''}\n                            onChange={(e) => this.updateTitle(e.target.value)}\n                            className=\"form-control\"\n                            id=\"user-title-input\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"user-email-input\">{gettext(\"Email\")}</label>\n                        <input\n                            disabled={disabled || this.hasMCEmail}\n                            className={\"form-control \"+error_classes.email}\n                            type=\"email\"\n                            value={ud.email || ''}\n                            onChange={(e) => this.updateEmail(e.target.value)}\n                            id=\"user-email-input\" />\n                        {e.email &&\n                        <div className=\"invalid-feedback\">\n                            {e.email}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"user-phone-input\">{gettext(\"Phone\")}</label>\n                        <input\n                            disabled={disabled}\n                            type=\"tel\"\n                            value={ud.phone_number || ''}\n                            onChange={(e) => this.updatePhone(e.target.value)}\n                            className=\"form-control\"\n                            id=\"user-phone-input\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"user-mode-of-contact-input\">{gettext(\"Preferred Mode of Contact\")}</label>\n                        <input\n                            disabled={disabled}\n                            type=\"text\"\n                            value={ud.mode_of_contact || ''}\n                            onChange={(e) => this.updateModeOfContact(e.target.value)}\n                            className=\"form-control\"\n                            id=\"user-mode-of-contact-input\" />\n                    </div>\n                    {this.props.new && !disabled &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save changes\")}</button>\n                        <button className=\"btn btn-secondary\" onClick={(e) => this.saveNewAndAddAnother(e)}>{gettext(\"Save And Add Another\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new && !disabled &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save()}>{gettext(\"Save changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {UserStore} from './models';\nimport {IndexView} from './views';\n\nconst app_root = '#app_root'\n\n/*\n * Model/Store setup\n */\nconst store = new UserStore(jsContext);\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector(app_root)\n);\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport {AutoSizer, Table, Column, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport ChangeLog from 'components/changelog'\n\nconst status_options = [\n    {value: true, label: gettext('Active')},\n    {value: false, label: gettext('Inactive')}\n]\n\n\n@observer\nexport class EditUserHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            original_user_data: {user: {is_active: props.userData.user.is_active}},\n            user_data: {user: {is_active: props.userData.user.is_active}}\n        }\n    }\n\n    save() {\n        this.props.onSave(this.state.user_data)\n    }\n\n    onChange(new_value) {\n        this.setState({\n            user_data: {\n                user: {is_active: new_value.value}\n            }\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    onResendRegistrationEmail() {\n        this.props.onResendRegistrationEmail()\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(this.state.user_data.user.is_active == this.state.user_data.user.is_active)\n    }\n\n    onReset() {\n        this.setState({\n            user_data: this.state.original_user_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    toggleChangeLogRowExpando = (row_id) => {\n        this.props.store.toggleChangeLogRowExpando(row_id);\n    }\n\n    render() {\n        const selected = status_options.find(option => option.value == this.state.user_data.user.is_active)\n        const {history, store} = this.props\n        const changelog_expanded_rows = store.changelog_expanded_rows;\n        return <div className=\"edit-user-history\">\n            <h2 className=\"no-bold\">{this.state.user_data.name?this.state.user_data.name+': ':''}{gettext(\"Status and History\")}</h2>\n            <div className=\"form-group\">\n                <button className=\"btn btn-secondary\" onClick={() => this.onResendRegistrationEmail()}>{gettext(\"Resend Registration Email\")}</button>\n            </div>\n            <div className=\"form-group\">\n                <label className=\"label--required\" htmlFor=\"user-status-input\">{gettext(\"Status\")}</label>\n                <Select\n                    isDisabled={this.props.disabled}\n                    options={status_options}\n                    value={selected}\n                    id=\"user-status-input\"\n                    onChange={(new_value) => this.onChange(new_value)} />\n            </div>\n            {!this.props.disabled &&\n            <div className=\"form-group\">\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => this.save()}>{gettext(\"Save Changes\")}</button>\n                <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.onReset()}>{gettext(\"Reset\")}</button>\n            </div>\n            }\n            <ChangeLog data={history} expanded_rows={changelog_expanded_rows} toggle_expando_cb={(row_id) => store.toggleChangeLogRowExpando(row_id)} />\n        </div>\n    }\n}\n\nexport default EditUserHistory\n","import React from 'react'\nimport { observer } from 'mobx-react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport { toJS } from 'mobx'\nimport { EM_DASH } from '../constants';\n\n\nexport const ChangeField = ({name, data, extraTitleText=null}) => {\n    const extraTitle = extraTitleText ? <h4 className=\"disagg-type__title, text-small\" >{extraTitleText}</h4> : null;\n    if (name===\"Disaggregation categories\" && typeof data === 'object' && data !== null) {\n        const sorted_labels = Object.values(data).sort((a,b) => a.custom_sort - b.custom_sort);\n        return <React.Fragment>\n            <strong>{name}: </strong>\n            {extraTitle}\n            <ul className=\"no-list-style\">\n                {sorted_labels.map( (entry, index) => {\n                    return <li key={index}>{(entry.label !== undefined && entry.label !== null) ? entry.label : \"\"}</li>\n                })}\n            </ul>\n        </React.Fragment>\n    }\n\n    else {\n        var change_value;\n        if (data !== undefined && data !== null && data !== \"N/A\") {\n            change_value = <span className=\"change__field__value\">\n            {\n                [\"true\", \"false\"].includes(data.toString())\n                    ? data.toString().replace(\"t\", \"T\").replace(\"f\", \"F\")\n                    : data.toString()\n            }\n            </span>\n        } else {\n            change_value = <span className=\"change__field__value empty-value\">{ EM_DASH }</span>\n        }\n        return <div className=\"change__field\">\n            <strong className=\"change__field__name\">{name}</strong>: {change_value}\n        </div>\n    }\n};\n\nconst ChangeLogEntryHeader = ({data, is_expanded, toggle_expando_cb}) => {\n    // TODO: apply is-expanded dynamically\n    return <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => toggle_expando_cb(data.id)}>\n        <td className=\"text-nowrap text-action\">\n            <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;<strong>{data.date}</strong>\n        </td>\n        <td className=\"text-nowrap\">{data.admin_user}</td>\n        <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n        <td></td>\n        <td></td>\n    </tr>\n};\n\nconst ChangeLogEntryRow = (props) => {\n    return <tr key={props.id} className=\"changelog__entry__row\">\n                <td></td>\n                <td></td>\n                <td></td>\n                <td>\n                    <div className=\"changelog__change--prev\">\n                        {props.previous}\n                    </div>\n                </td>\n                <td>\n                    <div className=\"changelog__change--new\">\n                        {props.new}\n                    </div>\n                </td>\n            </tr>\n\n};\n\nconst ChangeLogEntryRowBuilder = ({data}) => {\n\n    let allRows = [];\n\n    // We should never need this but just in case someone manages to store a log entry without actual diffs, give them\n    // a soft place to land.\n    const nullRow = <ChangeLogEntryRow previous={gettext(\"No differences found\")} new={null} id={1} key={1}/>\n\n    // If they manage to store a log without any diffs at all, send them to the soft landing place.\n    if ((Array.isArray(data.diff_list) && data.diff_list.length === 0) || (Object.keys(data.diff_list || {}).length === 0)) {\n        allRows.push(nullRow);\n        return allRows\n    }\n\n    if (data.change_type === 'user_programs_updated') {\n        // Create multiple row for program/country changes:\n        if (data.diff_list.base_country) {\n            const previousEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.prev} />\n            const newEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.new} />\n                \n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={\"base_country\"} key={\"base_country\"} />);\n        }\n        Object.entries(data.diff_list.countries).forEach( ([id, country]) => {\n            const key = `${id}_${country}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.prev.country} />\n                {/* # Translators:  Role references a user's permission level when accessing data (i.e. User or Admin) */}\n                <ChangeField name={gettext(\"Role\")} data={country.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={country.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        });\n        Object.entries(data.diff_list.programs).forEach(([id, program]) => {\n            const key = `${id}_${program}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.prev.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.prev.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.new.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        })\n\n    }\n    else {\n        let extraTitleText = null;\n        let skipDisaggType = false;\n        if (data.pretty_change_type === \"Country disaggregation updated\") {\n            const diff_list = data.diff_list;\n            const disaggType = diff_list.filter((diff) => diff.name === \"disaggregation_type\");\n            if (disaggType[0].prev === disaggType[0].new) {\n                extraTitleText = disaggType[0].prev;\n                skipDisaggType = true;\n            }\n\n        }\n        data.diff_list.forEach((changeSet, id) => {\n            const key = `${id}_${changeSet.pretty_name}`;\n            if (!(changeSet.name === \"disaggregation_type\" && skipDisaggType)) {\n                const previousEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.prev} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n                const newEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.new} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n\n                allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key}/>);\n            }\n        });\n    }\n\n    // If they manage to store a log with identical values in diffs, send them to the soft landing place.  Hopefully\n    // the system will refuse to log no-difference diffs.\n    if (allRows.length === 0){\n        allRows.push(nullRow)\n    }\n    return allRows;\n\n};\n\nconst ChangeLogEntry = ({data, is_expanded, toggle_expando_cb}) => {\n    return <tbody className=\"changelog__entry\" key={data.id}>\n        <ChangeLogEntryHeader data={data} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        {is_expanded &&\n        <ChangeLogEntryRowBuilder data={data}/>\n        }\n    </tbody>\n};\n\nconst ChangeLog = observer(({data, expanded_rows, toggle_expando_cb}) => {\n    // If expanded_rows is not null/undefined then use it to control expansion/collapse of entries\n    // otherwise, default it to \"open\"\n    return <table className=\"table table-sm bg-white table-bordered text-small changelog\">\n        <thead>\n            <tr>\n                <th className=\"text-nowrap\">{gettext(\"Date\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Admin\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Change Type\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"Previous Entry\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"New Entry\")}</th>\n            </tr>\n        </thead>\n        {data.map((entry) => {\n            let is_expanded = true;\n            if (expanded_rows) {\n                is_expanded = expanded_rows.has(entry.id);\n            }\n            return <ChangeLogEntry key={entry.id} data={entry} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        })}\n    </table>\n});\n\nexport default ChangeLog\n","import {api} from '../../../api';\n\nexport const fetchUsersWithFilter = (page, filters) => api.get('/tola_management/user/', {params: {page: page, ...filters}}).then(response => {\n    let data = response.data\n\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        users: data.results,\n        total_pages: total_pages,\n        total_users: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport const fetchUser = (user_id) => api.get(`/tola_management/user/${user_id}/`).then(response => response.data)\n\nexport const saveUserProfile = (user_id, data) => api.put(`/tola_management/user/${user_id}/`, data).then((response) => {\n    return response.data\n})\n\nexport const updateUserIsActive = (user_id, data) => api.put(`/tola_management/user/${user_id}/is_active/`, data).then(response => response.data)\n\nexport const fetchUserProgramAccess = (user_id) => api.get(`/tola_management/user/${user_id}/program_access/`).then(response => response.data)\n\nexport const saveUserPrograms = (user_id, data) => api.put(`/tola_management/user/${user_id}/program_access/`, data).then(response => {\n\n})\n\nexport const fetchUserHistory = (user_id) => api.get(`/tola_management/user/${user_id}/history/`).then(response => response.data)\n\nexport const createUser = (new_user_data) => api.post(`/tola_management/user/`, new_user_data).then(response => {\n    return response.data\n})\n\nexport const resendRegistrationEmail = (user_id) => api.post(`/tola_management/user/${user_id}/resend_registration_email/`, {}).then(response => response.data)\n\nexport const bulkUpdateUserStatus = (user_ids, new_status) => api.post(`/tola_management/user/bulk_update_status/`, {user_ids, new_status}).then(response => response.data)\nexport const bulkAddPrograms = (user_ids, added_programs) => api.post(`/tola_management/user/bulk_add_programs/`, {user_ids, added_programs}).then(response => response.data)\nexport const bulkRemovePrograms = (user_ids, removed_programs) => api.post(`/tola_management/user/bulk_remove_programs/`, {user_ids, removed_programs}).then(response => response.data)\n\nexport const fetchUserAggregates = (user_id) => api.get(`/tola_management/user/${user_id}/aggregate_data/`).then(response => response.data)\n\nexport default {\n    fetchUsersWithFilter,\n    fetchUser,\n    saveUserProfile,\n    fetchUserProgramAccess,\n    saveUserPrograms,\n    fetchUserHistory,\n    createUser,\n    resendRegistrationEmail,\n    bulkUpdateUserStatus,\n    bulkAddPrograms,\n    bulkRemovePrograms,\n    fetchUserAggregates,\n    updateUserIsActive\n}\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", `mgmt-table__col__width-${size}`, className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"5\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","const SPANISH = 'es';\nconst FRENCH = 'fr';\nconst ENGLISH = 'en';\n\nfunction flattenArray(arr, depth = 1) {\n    if (depth == 5) {\n        return arr;\n    }\n    let flattened = [];\n    arr.forEach(item => {\n        if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item, depth+1));\n        } else {\n            flattened.push(item);\n        }\n    });\n    return flattened;\n}\n\nfunction ensureNumericArray(value) {\n    if (!Array.isArray(value)) {\n        value = parseInt(value);\n        if (value && !isNaN(value)) {\n            return [value];\n        }\n        return false;\n    }\n    let arr = value.map(x => parseInt(x)).filter(x => !isNaN(x));\n    if (arr && Array.isArray(arr) && arr.length > 0) {\n        return arr;\n    }\n    return false;\n}\n\n/*\n * Are we loading a cached page? If so, reload to avoid displaying stale indicator data\n * See ticket #1423\n */\nfunction reloadPageIfCached() {\n    // moving the cache check to after page load as firefox calculates transfer size at the end\n    $(function () {\n        let isCached = window.performance.getEntriesByType(\"navigation\")[0].transferSize === 0;\n        //adding a second check to ensure that if for whatever reason teh transfersize reads wrong, we don't reload on\n        //a reload:\n        let isReload = window.performance.getEntriesByType(\"navigation\")[0].type === \"reload\";\n        if (isCached && !isReload) {\n            window.location.reload();\n        }\n    });\n}\n\nconst indicatorManualNumberSort = (levelFunc, numberFunc) => {\n    return (indicatorA, indicatorB) => {\n        let levelA = levelFunc(indicatorA);\n        let levelB = levelFunc(indicatorB);\n        if (levelA && !levelB) {\n            return 1;\n        }\n        if (levelB && !levelA) {\n            return -1;\n        }\n        if (levelA != levelB) {\n            return parseInt(levelA) - parseInt(levelB);\n        }\n        let numberA = (numberFunc(indicatorA) || '').split('.');\n        let numberB = (numberFunc(indicatorB) || '').split('.');\n        for (let i=0; i < Math.max(numberA.length, numberB.length); i++) {\n            if (numberA[i] && numberB[i]) {\n                for (let j=0; j < Math.max(numberA[i].length, numberB[i].length); j++) {\n                    if (numberA[i][j] && numberB[i][j]) {\n                        if (numberA[i].charCodeAt(j) != numberB[i].charCodeAt(j)) {\n                            return numberA[i].charCodeAt(j) - numberB[i].charCodeAt(j);\n                        }\n                    } else if (numberA[i][j]) {\n                        return 1;\n                    } else if (numberB[i][j]) {\n                        return -1;\n                    }\n                }\n            } else if (numberA[i]) {\n                return 1;\n            } else if (numberB[i]) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n\nconst localizeNumber = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    var intPart = val.toString();\n    var floatPart = null;\n    if (val.toString().includes(\",\")) {\n        intPart = val.toString().split(\",\")[0];\n        floatPart = val.toString().split(\",\").length > 1 ? val.toString().split(\",\")[1 ] : null;\n    } else if (val.toString().includes(\".\")) {\n        intPart = val.toString().split(\".\")[0];\n        floatPart = val.toString().split(\".\").length > 1 ? val.toString().split(\".\")[1 ] : null;\n    }\n    floatPart = (floatPart && floatPart.length > 0) ? floatPart : null;\n    var displayValue;\n    switch(window.userLang) {\n        case SPANISH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case FRENCH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160)); //nbsp\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case ENGLISH:\n        default:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            if (floatPart) {\n                displayValue += `.${floatPart}`;\n            }\n        break;\n    }\n    return displayValue;\n};\n\nconst localizePercent = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    let percent = localizeNumber(Math.round(val * 10000)/100);\n    return (percent === null) ? null : `${percent}%`;\n}\n\nconst sortObjectListByValue = (objects, key='label') => objects.sort((a, b) => {\n    return a[key].toUpperCase() > b[key].toUpperCase() ? 1 : -1\n})\n\nexport { flattenArray, ensureNumericArray, reloadPageIfCached, indicatorManualNumberSort,\n          localizeNumber, localizePercent, sortObjectListByValue };\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport CheckboxGroup from 'react-multiselect-checkboxes/lib/CheckboxGroup';\nimport { css } from 'emotion';\nimport {observer} from 'mobx-react'\n\n\n/* JSX Element to display, e.g. \"4 selected\" in a multiselect dropdown */\nconst CountLabel = props => {\n    return (\n        <div className=\"count__label\">\n            {props.children}\n            {(props.clearable &&\n                <div onClick={ props.clearSelect }>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\" />\n                </div>\n              )}\n        </div>\n    );\n        \n}\n\n/*\n * CheckboxGroup drop in replacement that delivers a heading without a checkbox if the optgroup has\n * the attribute \"selectable: false\"\n * Also adds a vertical divider above any optgroup with the attribute divider: true\n */\nfunction Group(props) {\n    if (props.data.selectable === false) {\n        const {\n            children,\n            className,\n            cx,\n            getStyles,\n            Heading,\n            setValue,\n            data,\n            label,\n            getValue,\n            theme,\n            selectProps: { getOptionValue },\n          } = props;\n          let headingProps = {getStyles: getStyles, cx: cx, theme: theme, indeterminate: false, checked: false};\n          return (\n            <div className={cx(css(getStyles('group', props)), { group: true }, className)}>\n                <div className={cx(css(getStyles('groupHeading', {...headingProps})),\n                    {'group-heading': true}, className)}>{props.data.label}</div>\n                <div>{props.children}</div>\n            </div>);\n    }\n    if (props.data.divider === true) {\n        return (<React.Fragment>\n                <hr style={{ margin: '3px 0px 0px 0px' }} />\n                <CheckboxGroup {... props} />\n                </React.Fragment>);\n    }\n    return <CheckboxGroup {... props} />;\n}\n\n\n/*\n *  A wrapper for react-multiselect-checkboxes which implements:\n *      - translated \"n selected\" if multiple options are selected (including a \"noList\" attribute for uncounted selections\n *      - optgroups without checkboxes if {selectable: false} applied to optgroup object\n *      - virtualization (??) - this functionality from external vendor needs verification\n */\n@observer\nclass CheckboxedMultiSelect extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    clearSelect = (e) => {\n        e.stopPropagation();\n        this.props.onChange([]);;\n    }\n\n    makeLabel = (_ref3) => {\n        var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n            thisValue = _ref3.value;\n        if (!thisValue) {\n          return <CountLabel clearable={false}>\n                    {placeholderButtonLabel}\n                </CountLabel>;\n        }\n    \n        if (Array.isArray(thisValue)) {\n            // don't count options with the option attribute noList: true\n            let filteredValues = thisValue.filter(option => !option.noList);\n          if (filteredValues.length === 0) {\n            return <CountLabel clearable={false}>\n                        {placeholderButtonLabel}\n                    </CountLabel>\n          }\n    \n          if (filteredValues.length === 1) {\n            return <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                        {filteredValues[0].label}\n                    </CountLabel>;\n          }\n          return (\n           <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                {\n                    // # Translators: prefixed with a number, as in \"4 selected\" displayed on a multi-select\n                    \"\".concat(filteredValues.length,\" \", gettext(\"selected\"))}\n            </CountLabel>\n            );\n        }\n    \n        return <CountLabel clearable={false}>\n                    {thisValue.label}\n               </CountLabel>;\n      };\n      render() {\n        return <ReactMultiSelectCheckboxes\n                { ...this.props}\n                placeholder={\n                    // # Translators: placeholder text in a search box\n                    gettext(\"Search\")}\n                placeholderButtonLabel={ this.props.placeholder }\n                getDropdownButtonLabel={ this.makeLabel }\n                components={{MenuList, Group }}\n                />;\n      }\n}\n\nexport default CheckboxedMultiSelect\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport ManagementTable from 'components/management-table'\nimport UserEditor from './components/user_editor'\nimport EditUserProfile from './components/edit_user_profile'\nimport EditUserPrograms from './components/edit_user_programs'\nimport EditUserHistory from './components/edit_user_history'\nimport Pagination from 'components/pagination'\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n// # Translators: Nothing selected by user\nconst selection_placeholder = gettext(\"None Selected\");\nconst UserFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"users_filter\">{gettext(\"Find a User\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.users}\n            options={selections}\n            onChange={(e) => store.changeUserFilter(e)}\n            placeholder={selection_placeholder}\n            id=\"users_filter\" />\n    </div>\n})\n\nconst CountryFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        {\n            /* # Translators: The countries a user is allowed to access */}\n        <label htmlFor=\"countries_permitted_filter\">{gettext(\"Countries Permitted\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={selections}\n            onChange={(e) => store.changeCountryFilter(e)}\n            placeholder={selection_placeholder}\n            id=\"countries_permitted_filter\" />\n    </div>\n})\n\nconst BaseCountryFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        {\n            /* # Translators: Primary country of the user */}\n        <label htmlFor=\"base_country_filter\">{gettext(\"Base Country\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.base_countries}\n            options={selections}\n            onChange={(e) => store.changeBaseCountryFilter(e)}\n            placeholder={selection_placeholder}\n            id=\"base_country_filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"programs_filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={selections}\n            onChange={(e) => store.changeProgramFilter(e)}\n            placeholder={selection_placeholder}\n            id=\"programs_filter\" />\n    </div>\n})\n\nclass SetUserStatusBulkAction extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: []\n        }\n    }\n\n    onChange(new_val) {\n        this.setState({\n            value: new_val\n        })\n    }\n\n    onApply() {\n        this.props.onApply(this.state.value)\n    }\n\n    render() {\n        return <Select options={this.props.options} value={this.state.value} onChange={(val) => this.onChange(val)} />\n    }\n}\n\nclass UpdateProgramsBulkAction extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            values: []\n        }\n    }\n\n    onChange(new_vals) {\n        this.setState({\n            values: new_vals\n        })\n    }\n\n    render() {\n        return <CheckboxedMultiSelect options={this.props.options} value={this.state.values} onChange={(val) => this.onChange(val)} />\n    }\n}\n\nclass BulkActions extends React.Component {\n    constructor(props) {\n        super(props)\n        this.active_child = React.createRef()\n        this.state = {\n            current_action: null,\n            current_vals: []\n        }\n    }\n\n    onActionChanged(new_action) {\n        this.setState({\n            current_action: new_action.value,\n            current_vals: [],\n        })\n    }\n\n    onChange(vals) {\n        this.setState({\n            current_vals: vals\n        })\n    }\n\n    onApply() {\n        const selected = this.props.secondaryOptions[this.state.current_action]\n        if(selected) {\n            selected.onApply(this.state.current_vals)\n        }\n    }\n\n    render() {\n        const selected = this.props.secondaryOptions[this.state.current_action]\n        const SecondaryComponent = selected && selected.component\n        const apply_disabled = !this.state.current_action || (Array.isArray(this.state.current_vals) && !this.state.current_vals.length) || !this.state.current_vals\n        return <div className=\"controls__bulk-actions\">\n            <div className=\"bulk__select\">\n                <Select\n                placeholder={gettext(\"Bulk Actions\")}\n                value={this.props.primaryOptions.find((o) => o.value == this.state.current_action)}\n                options={this.props.primaryOptions} onChange={(val) => this.onActionChanged(val)} />\n            </div>\n            {selected &&\n            <div className=\"bulk__select\">\n                <SecondaryComponent placeholder={gettext(\"Select...\")} value={this.state.current_vals} onChange={(vals) => this.onChange(vals)}/>\n            </div>\n            }\n            {!selected &&\n            <div className=\"bulk__select\">\n                <Select placeholder=\"---\" noOptionsMessage={() => gettext('No options')}/>\n            </div>\n            }\n            <button className=\"btn btn-secondary\" disabled={apply_disabled} onClick={() => this.onApply()}>{gettext('Apply')}</button>\n        </div>\n    }\n}\n\nexport const IndexView = observer(\n    ({store}) => {\n        const programOptions = store.program_selections\n        const bulk_actions = {\n            primary_options: [\n                // # Translators: Set an account to active or inactive\n                {label: gettext('Set account status'), value: 'set_account_status'},\n                // # Translators: Associate a user with a program granting permission\n                {label: gettext('Add to program'), value: 'add_to_program'},\n                // # Translators: Disassociate a user with a program removing permission\n                {label: gettext('Remove from program'), value: 'remove_from_program'},\n            ],\n            secondary_options: {\n                set_account_status: {\n                    component: (props) => <Select options={store.user_status_options} {...props} />,\n                    onApply: (option) => store.bulkUpdateUserStatus(option.value)\n                },\n                add_to_program: {\n                    component: (props) => <CheckboxedMultiSelect options={store.program_bulk_selections} {...props} />,\n                    onApply: (vals) => store.bulkAddPrograms(vals.map(option => option.value))\n                },\n                remove_from_program: {\n                    component: (props) => <CheckboxedMultiSelect options={store.program_bulk_selections} {...props} />,\n                    onApply: (vals) => store.bulkRemovePrograms(vals.map(option => option.value))\n                },\n            }\n        }\n\n        return <div id=\"user-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <CountryFilter store={store} selections={store.countries_selections} />\n                    <BaseCountryFilter store={store} selections={store.countries_selections} />\n                    <ProgramFilter store={store} selections={store.program_selections} />\n                    <div className=\"form-group react-multiselect-checkbox\">\n                        <label htmlFor=\"organization_filter\">{gettext(\"Organization\")}</label>\n                        <CheckboxedMultiSelect\n                        value={store.filters.organizations}\n                        options={store.organization_selections}\n                        onChange={(e) => store.changeOrganizationFilter(e)}\n                        placeholder={selection_placeholder}\n                        id=\"organization_filter\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"status_filter\">{gettext(\"Status\")}</label>\n                        <Select\n                        value={store.filters.user_status}\n                        options={store.user_status_options}\n                        onChange={(e) => store.changeUserStatusFilter(e)}\n                        placeholder={selection_placeholder}\n                        id=\"status_filter\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"admin_role_filter\">{gettext(\"Administrator?\")}</label>\n                        <Select\n                        value={store.filters.admin_role}\n                        options={store.admin_role_options}\n                        onChange={(e) => store.changeAdminRoleFilter(e)}\n                        placeholder={selection_placeholder}\n                        id=\"admin_role_filter\" />\n                    </div>\n                </div>\n                <div className=\"filter-section filter-buttons\">\n                    <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                    <button className=\"btn btn-reset\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col admin-list\">\n                <header className=\"page-title\">\n                    <h1>{gettext(\"Admin:\")} <small>{gettext(\"Users\")}</small></h1>\n                </header>\n                <div className=\"admin-list__controls\">\n                    <BulkActions primaryOptions={bulk_actions.primary_options} secondaryOptions={bulk_actions.secondary_options}/>\n                    <div className=\"controls__buttons\">\n                        <a href=\"#\" tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => store.createUser()}>\n                            <i className=\"fas fa-plus-circle\"/>\n                            {gettext(\"Add user\")}\n                        </a>\n                    </div>\n                </div>\n                <div className=\"admin-list__top-filter\">\n                    <UserFilter store={store} selections={store.user_selections} />\n                </div>\n                <LoadingSpinner isLoading={store.fetching_users_listing || store.applying_bulk_updates}>\n                    <div className=\"admin-list__table\">\n                        <ManagementTable\n                            data={store.users_listing.map(id => store.users[id])}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\"0.5\">\n                                        <input type=\"checkbox\" checked={store.bulk_targets_all} onChange={() => store.toggleBulkTargetsAll()}/>\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">{gettext(\"User\")}</Col>\n                                    <Col>{gettext(\"Organization\")}</Col>\n                                    <Col>{gettext(\"Programs\")}</Col>\n                                    {\n                                        /* # Translators: Label for column identifying \"active\" or \"inactive\" user status */}\n                                    <Col size=\"0.25\">{gettext(\"Status\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                                <Row\n                                expanded={data.id == store.editing_target}\n                                Expando={observer(({Wrapper}) =>\n                                    <Wrapper>\n                                            <UserEditor\n                                                notifyPaneChange={(new_pane) => store.onProfilePaneChange(new_pane)}\n                                                new={data.id == 'new'}\n                                                active_pane={store.active_editor_pane}\n                                                ProfileSection={observer(() =>\n                                                    <LoadingSpinner isLoading={store.fetching_editing_target || store.saving_user_profile || store.saving_user_programs}>\n                                                        <EditUserProfile\n                                                            disabled={data.organization_id == 1 && !store.is_superuser && data.id != 'new'}\n                                                            is_superuser={store.is_superuser}\n                                                            new={data.id == 'new'}\n                                                            userData={store.editing_target_data.profile}\n                                                            errors={store.editing_errors}\n                                                            key={store.editing_target_data.profile.id}\n                                                            onUpdate={(new_user_data) => store.updateUserProfile(data.id, new_user_data)}\n                                                            onCreate={(new_user_data) => store.saveNewUser(new_user_data)}\n                                                            onCreateAndAddAnother={(new_user_data) => store.saveNewUserAndAddAnother(new_user_data)}\n                                                            organizations={store.organization_selections}\n                                                            onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                        />\n                                                    </LoadingSpinner>\n                                                )}\n                                                ProgramSection={observer(() =>\n                                                    <LoadingSpinner isLoading={store.fetching_editing_target || store.saving_user_profile || store.saving_user_programs}>\n                                                        <EditUserPrograms\n                                                            store={store}\n                                                            user={data}\n                                                            adminUserProgramRoles={store.access.program}\n                                                            adminUserCountryRoles={store.access.countries}\n                                                            onSave={(new_program_data) => store.saveUserPrograms(data.id, new_program_data)}\n                                                            onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                        />\n                                                    </LoadingSpinner>\n                                                )}\n                                                HistorySection={observer(() =>\n                                                    <LoadingSpinner isLoading={store.fetching_editing_target || store.saving_user_profile || store.saving_user_programs}>\n                                                        <EditUserHistory\n                                                            store={store}\n                                                            disabled={data.organization_id == 1 && !store.is_superuser}\n                                                            userData={store.editing_target_data.profile}\n                                                            history={store.editing_target_data.history}\n                                                            onResendRegistrationEmail={() => store.resendRegistrationEmail(data.id)}\n                                                            onSave={(new_data) => store.updateUserIsActive(data.id, new_data)}\n                                                            onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                        />\n                                                    </LoadingSpinner>\n                                                )}\n                                            />\n                                    </Wrapper>\n                                )}>\n                                    <Col size=\"0.5\">\n                                            <input type=\"checkbox\" checked={store.bulk_targets.get(data.id) || false} onChange={() => store.toggleBulkTarget(data.id) }/>\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        <div className=\"expando-toggle icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                            <div className=\"expando-toggle__icon\">\n                                                <FontAwesomeIcon icon={(store.editing_target == data.id) ? 'caret-down' : 'caret-right'} />\n                                            </div>\n                                            <div className=\"expando-toggle__label\">\n                                                <i className=\"fas fa-user\"/>&nbsp;\n                                                {\n                                                    /* # Translators: The highest level of administrator in the system */}\n                                                {data.name || \"---\"} {data.is_super && <span className=\"badge badge-danger\">{gettext(\"Super Admin\")}</span>}\n                                            </div>\n                                        </div>\n                                    </Col>\n                                    <Col>\n                                        <i className=\"fas fa-building\"/>&nbsp;\n                                        {data.organization_name || \"---\"}\n                                    </Col>\n                                    <Col className=\"text-nowrap\">\n                                    {data.user_programs ?\n                                        <a href={`/tola_management/program/?users[]=${data.id}`}>\n                                            <i className=\"fas fa-cubes\"/>&nbsp;{\n                                                // # Translators: preceded by a number, i.e. \"3 programs\" or \"1 program\"\n                                                interpolate(ngettext(\"%s program\", \"%s programs\", data.user_programs), [data.user_programs,])\n                                            }\n                                        </a>\n                                        : <span><i className=\"fas fa-cubes\" />&nbsp;{\n                                            // # Translators: when no programs are connected to the item\n                                            gettext(\"0 programs\")\n                                        }</span>}\n                                    </Col>\n                                    <Col size=\"0.25\">{data.is_active?gettext('Active'):gettext('Inactive')}</Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.users_count?`${store.users_count} ${gettext(\"users\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import { observable, computed, action, runInAction } from 'mobx';\nimport api from './api';\nimport { sortObjectListByValue } from '../../../general_utilities'\n\nconst default_user = {\n    id: null,\n    first_name: \"\",\n    last_name: \"\",\n    username: \"\",\n    email: \"\",\n    phone_number: \"\",\n    organization_id: null,\n    mode_of_contact: \"\",\n    title: \"\",\n    user_programs: 0,\n    user: {is_active:true},\n}\n\nconst default_editing_target_data = {\n    profile: {...default_user},\n    access: {country: {}, programs:[]},\n    history: []\n}\n\nexport class UserStore {\n    @observable users = {}\n    @observable users_listing = []\n    @observable users_count = null\n    @observable fetching_users_listing = false\n    @observable current_page = 0\n    @observable total_pages = null\n    @observable bulk_targets = new Map()\n    @observable bulk_targets_all = false\n    @observable applying_bulk_updates = false\n\n    @observable saving_user_profile = false\n    @observable saving_user_programs = false\n\n    @observable access = {countries: {}, programs: {}}\n    @observable is_superuser = false\n\n    @observable fetching_editing_target = false\n    @observable editing_target = null\n    @observable editing_target_data = {...default_editing_target_data}\n    @observable editing_errors = {}\n\n    @observable new_user = null\n\n    //filter options\n    @observable countries = {}\n    @observable ordered_country_ids = []\n    @observable organizations = {}\n    @observable programs = {}\n    @observable available_users = []\n\n    @observable countries_selections = []\n    @observable organization_selections = []\n    @observable program_selections = []\n    @observable user_selections = []\n    @observable program_bulk_selections = []\n\n    @observable unsaved_changes_actions = {\n        save: () => {},\n        discard: () => {}\n    }\n\n    @observable active_editor_pane = 'profile'\n\n    active_pane_is_dirty = false\n\n    country_role_choices = []\n    program_role_choices = []\n\n    user_status_options = [\n        {value: 1, label: gettext('Active')},\n        {value: 0, label: gettext('Inactive')}\n    ]\n\n    admin_role_options = [\n        {value: 1, label: gettext('Yes')},\n        {value: 0, label: gettext('No')}\n    ]\n\n    @observable filters = {\n        countries: [],\n        base_countries: [],\n        organizations: [],\n        programs: [],\n        user_status: '',\n        admin_role: '',\n        users: []\n    }\n\n    @observable appliedFilters = {\n    }\n\n    // UI state - track what history rows are expanded\n    @observable changelog_expanded_rows = new Set();\n\n    constructor({\n        regions,\n        countries,\n        organizations,\n        programs,\n        users,\n        access,\n        is_superuser,\n        programs_filter,\n        country_filter,\n        organizations_filter,\n        program_role_choices,\n        country_role_choices,\n    }) {\n        this.regions = regions\n        this.countries = countries\n        this.ordered_country_ids = Object.values(countries).sort((a, b) => a.name.localeCompare(b.name)).map(country => country.id)\n        this.organizations = organizations\n        this.programs = programs\n        this.available_users = users.filter(user => user.name)\n\n        this.countries_selections = sortObjectListByValue(this.ordered_country_ids.map(id => this.countries[id])\n                                                            .map(country => ({value: country.id, label: country.name})))\n\n        this.organization_selections = sortObjectListByValue(Object.values(organizations).map(org => ({value: org.id, label: org.name})))\n\n        this.program_selections = this.createProgramSelections(this.programs)\n\n        this.user_selections = this.available_users.map(user => ({value: user.id, label: user.name}))\n\n        this.program_bulk_selections = this.ordered_country_ids.map(id => this.countries[id]).map((country) => ({\n            label: country.name,\n            options: country.programs.map(program_id => ({\n                label: country.name+\": \"+programs[program_id].name,\n                value: country.id+\"_\"+program_id\n            }))\n        }))\n\n        this.access = access\n        this.is_superuser = is_superuser\n        this.filters.programs = programs_filter.map(id => this.programs[id]).map(program => ({label: program.name, value: program.id}))\n        this.filters.organizations = organizations_filter.map(id => this.organizations[id]).map(org => ({label: org.name, value: org.id}))\n        this.filters.countries = country_filter.map(id => this.countries[id]).map(country => ({label: country.name, value: country.id}))\n\n        this.country_role_choices = country_role_choices.map(([value, label]) => ({label, value}))\n        this.program_role_choices = program_role_choices.map(([value, label]) => ({label, value}))\n        this.appliedFilters = {...this.filters}\n        this.fetchUsers()\n    }\n\n    /*******************\n    we turn the complex intermediate filter objects into simple lists for\n    transmission to the api, (while retaining their filter keys)\n\n    eg\n\n    {\n    ...\n    countries: [{label: 'Afghanistan', value: 1}]\n    }\n\n    becomes\n\n    {\n    ...\n    countries: [1]\n    }\n\n    */\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, x) => {\n            if(Array.isArray(x[1])) {\n                xs[x[0]] = x[1].map(x => x.value)\n            } else {\n                xs[x[0]] = x[1].value\n            }\n            return xs\n        }, {})\n    }\n\n    @computed get countriesByRegion() {\n        return Object.values(this.regions || {})\n            .map(region => ({\n                id: region.id,\n                name: gettext(region.name),\n                countries: Object.values(this.countries).filter(country => country.region == region.id)\n            }))\n            .filter(region => region.countries.length > 0)\n            .sort((regionA, regionB) => (regionA.name.toUpperCase() < regionB.name.toUpperCase()) ? -1 : 1);\n    }\n\n    dirtyConfirm() {\n        return !this.active_pane_is_dirty || (this.active_pane_is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    getSelectedBulkTargetIDs() {\n        return [...this.bulk_targets.entries()]\n            .filter(([_, selected]) => selected)\n            .map(([user_id, _]) => user_id)\n    }\n\n    onSaveErrorHandler(message) {\n        PNotify.error({\n            // # Translators: Saving to the server failed\n            text: message || gettext('Saving Failed'),\n            delay: 5000\n        });\n    }\n\n    onSaveSuccessHandler(message) {\n        // # Translators: Saving to the server succeeded\n        PNotify.success({text: message || gettext('Successfully Saved'), delay: 5000})\n    }\n\n    createProgramSelections(programs) {\n        return sortObjectListByValue(Object.values(programs).map(program => ({value: program.id, label: program.name})))\n    }\n\n    @action\n    onProfilePaneChange(new_pane) {\n        if(this.dirtyConfirm()) {\n            this.active_editor_pane = new_pane\n            this.active_pane_is_dirty = false\n        }\n    }\n\n    setActiveFormIsDirty(is_dirty) {\n        this.active_pane_is_dirty = is_dirty\n    }\n\n    @action\n    fetchUsers() {\n        if(this.dirtyConfirm()) {\n            this.fetching_users_listing = true\n            api.fetchUsersWithFilter(this.current_page + 1, this.marshalFilters(this.appliedFilters)).then(results => {\n                runInAction(() => {\n                    this.active_editor_pane = 'profile'\n                    this.active_pane_is_dirty = false\n                    this.fetching_users_listing = false\n                    this.users = results.users.reduce((xs, x) => {\n                        xs[x.id] = x\n                        return xs\n                    }, {})\n                    this.users_listing = results.users.map(u => u.id)\n                    this.bulk_targets_all = false\n                    this.bulk_targets = new Map()\n                    this.users_count = results.total_users\n                    this.total_pages = results.total_pages\n                    this.next_page = results.next_page\n                    this.previous_page = results.previous_page\n                })\n            })\n        }\n    }\n\n    @action\n    applyFilters() {\n        this.appliedFilters = {...this.filters}\n        this.current_page = 0\n        this.fetchUsers()\n    }\n\n    @action\n    changePage(page) {\n        if(page.selected != this.current_page) {\n            this.current_page = page.selected\n            this.fetchUsers()\n        }\n    }\n\n    @action\n    toggleBulkTargetsAll() {\n        this.bulk_targets_all = !this.bulk_targets_all\n        let user_ids = Object.values(this.users_listing)\n        this.bulk_targets = new Map(user_ids.map(id => [id, this.bulk_targets_all]))\n    }\n\n    @action\n    toggleBulkTarget(target_id) {\n        this.bulk_targets.set(target_id, !this.bulk_targets.get(target_id))\n    }\n\n    @action\n    changeCountryFilter(countries) {\n        this.filters.countries = countries\n        if(countries.length == 0) {\n            this.program_selections = this.createProgramSelections(this.programs)\n        } else {\n            const candidate_programs = countries.map(selection => selection.value)\n                                                .map(id => this.countries[id])\n                                                .flatMap(country => country.programs)\n            const selected_programs_set = new Set(candidate_programs)\n            this.program_selections = this.createProgramSelections(Array.from(selected_programs_set).map(id => this.programs[id]))\n        }\n    }\n\n    @action\n    changeBaseCountryFilter(base_countries) {\n        this.filters.base_countries = base_countries\n    }\n\n    @action\n    changeOrganizationFilter(organizations) {\n        this.filters.organizations = organizations\n    }\n\n    @action\n    changeProgramFilter(programs) {\n        this.filters.programs = programs\n    }\n\n    @action\n    changeUserStatusFilter(status) {\n        this.filters.user_status = status\n    }\n\n    @action\n    changeAdminRoleFilter(role) {\n        this.filters.admin_role = role\n    }\n\n    @action\n    changeUserFilter(users) {\n        this.filters.users = users;\n        // \"Find a user\" filter should immediately activate filters:\n        this.applyFilters();\n    }\n\n    @action\n    toggleEditingTarget(user_id) {\n        if(this.dirtyConfirm()) {\n            this.editing_errors = {}\n            this.editing_target_data = {...default_editing_target_data}\n            this.active_pane_is_dirty = false\n            if(this.editing_target == 'new') {\n                this.users_listing.shift()\n            }\n            this.active_editor_pane = 'profile'\n\n            if(this.editing_target == user_id) {\n                this.editing_target = null\n            } else {\n                this.editing_target = user_id\n                this.fetching_editing_target = true\n                Promise.all([api.fetchUser(user_id), api.fetchUserProgramAccess(user_id), api.fetchUserHistory(user_id)]).then(([user, access_data, history_data]) => {\n                    runInAction(() => {\n                        this.fetching_editing_target = false\n                        this.editing_target_data = {\n                            profile: user,\n                            access: access_data,\n                            history: history_data\n                        }\n                    })\n                })\n            }\n        }\n    }\n\n    @action\n    updateActiveEditPage(section_name) {\n        this.active_edit_page = section_name\n        this.active_pane_is_dirty = false\n    }\n\n    @action\n    createUser() {\n        if(this.dirtyConfirm()) {\n            this.editing_errors = {}\n            this.active_pane_is_dirty = false\n            this.active_editor_pane = 'profile'\n            if(this.editing_target == 'new') {\n                this.users_listing.shift()\n            }\n\n            this.editing_target_data = {...default_editing_target_data}\n\n            this.users[\"new\"] = {\n                id: \"new\",\n                name: \"\",\n                organization_name: \"\",\n                user_programs: 0,\n                is_active: false\n            }\n\n            this.users_listing.unshift(\"new\")\n            this.editing_target = 'new'\n        }\n    }\n\n    @action\n    updateUserProfile(user_id, new_user_data) {\n        this.saving_user_profile = true\n        this.editing_errors = {}\n        this.active_pane_is_dirty = false\n        api.saveUserProfile(user_id, new_user_data).then(result => Promise.all([api.fetchUserAggregates(result.id), api.fetchUserHistory(result.id)]).then(([aggregates, history]) => {\n            this.onSaveSuccessHandler()\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.users[result.id] = {\n                    id: result.id,\n                    name: result.name,\n                    organization_name: this.organizations[result.organization_id].name,\n                    user_programs: aggregates.program_count,\n                    is_active: result.user.is_active\n                }\n                this.active_pane_is_dirty = false\n                this.editing_target_data.profile = result\n                this.editing_target_data.history = history\n            })\n        })).catch(errors => {\n            this.onSaveErrorHandler(errors.response.data.detail)\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.editing_errors = errors.response.data\n            })\n        })\n    }\n\n    @action\n    updateUserIsActive(user_id, new_user_data) {\n        this.saving_user_profile = true\n        this.editing_errors = {}\n        this.active_pane_is_dirty = false\n        api.updateUserIsActive(user_id, new_user_data).then(result => Promise.all([api.fetchUserAggregates(user_id), api.fetchUserHistory(user_id)]).then(([aggregates, history]) => {\n            this.onSaveSuccessHandler()\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.users[result.id] = {\n                    id: result.id,\n                    name: result.name,\n                    organization_name: this.organizations[result.organization_id].name,\n                    user_programs: aggregates.program_count,\n                    is_active: result.user.is_active\n                }\n                this.active_pane_is_dirty = false\n                this.editing_target_data.profile = result\n                this.editing_target_data.history = history\n            })\n        })).catch(errors => {\n            this.onSaveErrorHandler(errors.response.data.detail)\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.editing_errors = errors.response.data\n            })\n        })\n    }\n\n    @action\n    resendRegistrationEmail(user_id) {\n        this.saving_user_profile = true\n        api.resendRegistrationEmail(user_id).then(result => {\n            runInAction(() => {\n                this.saving_user_profile = false\n                // # Translators: An email was sent to the user to verify that the email address is valid\n                this.onSaveSuccessHandler(gettext(\"Verification email sent\"))\n            })\n        }).catch(() => {\n            // # Translators: Sending an email to the user did not work\n            this.onSaveSuccessHandler(gettext(\"Verification email send failed\"))\n        })\n    }\n\n    @action\n    saveNewUser(new_user_data) {\n        this.saving_user_profile = true\n        this.editing_errors = {}\n        this.active_pane_is_dirty = false\n        api.createUser(new_user_data).then(result => api.fetchUserAggregates(result.id).then(aggregates => {\n            this.onSaveSuccessHandler()\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.users[result.id] = {\n                    id: result.id,\n                    name: result.name,\n                    organization_name: this.organizations[result.organization_id].name,\n                    user_programs: aggregates.program_count,\n                    is_active: result.user.is_active\n                }\n                this.active_pane_is_dirty = false\n                this.user_selections.push({value: result.id, label: result.name})\n                this.users_listing[0] = result.id\n                this.editing_target = null\n                this.toggleEditingTarget(result.id)\n                delete this.users[\"new\"]\n            })\n        })).catch(errors => {\n            this.onSaveErrorHandler(errors.response.data.detail)\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.editing_errors = errors.response.data\n            })\n        })\n    }\n\n    @action\n    saveNewUserAndAddAnother(new_user_data) {\n        this.saving_user_profile = true\n        this.editing_errors = {}\n        this.active_pane_is_dirty = false\n        api.createUser(new_user_data).then(result => api.fetchUserAggregates(result.id).then(aggregates => {\n            this.onSaveSuccessHandler()\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.users[result.id] = {\n                    id: result.id,\n                    name: result.name,\n                    organization_name: this.organizations[result.organization_id].name,\n                    user_programs: aggregates.program_count,\n                    is_active: result.user.is_active\n                }\n                this.active_pane_is_dirty = false\n                this.user_selections.push({value: result.id, label: result.name})\n                this.users_listing[0] = result.id\n                delete this.users[\"new\"]\n                this.createUser()\n            })\n        })).catch(errors => {\n            this.onSaveErrorHandler(errors.response.data.detail)\n            runInAction(() => {\n                this.saving_user_profile = false\n                this.editing_errors = errors.response.data\n            })\n        })\n    }\n\n    @action\n    saveUserPrograms(user_id, new_user_programs_data) {\n        this.saving_user_programs = true\n        this.active_pane_is_dirty = false\n        api.saveUserPrograms(user_id, new_user_programs_data).then(result => Promise.all([api.fetchUserAggregates(user_id), api.fetchUserHistory(user_id), api.fetchUserProgramAccess(user_id)]).then(([aggregates, history, access]) => {\n            runInAction(() => {\n                this.saving_user_programs = false\n                this.users[user_id].user_programs = aggregates.program_count\n                this.editing_target_data.history = history\n                this.editing_target_data.access = access\n                this.active_pane_is_dirty = false\n            })\n            this.onSaveSuccessHandler()\n        })).catch(errors => {\n            this.onSaveErrorHandler(errors.response.data.detail)\n            runInAction(() => {\n                this.saving_user_programs = false\n            })\n        })\n    }\n\n    @action\n    bulkUpdateUserStatus(new_status) {\n        this.applying_bulk_updates = true\n        api.bulkUpdateUserStatus(\n            this.getSelectedBulkTargetIDs(),\n            new_status\n        ).then(result => {\n            runInAction(() => {\n                result.forEach(updated => {\n                    let user = Object.assign(this.users[updated.id], updated)\n                    this.users[user.id] = user\n                })\n                this.applying_bulk_updates = false\n            })\n            this.onSaveSuccessHandler()\n        }).catch(response => {\n            runInAction(() => {\n                this.applying_bulk_updates = false\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    bulkAddPrograms(added_programs) {\n        this.applying_bulk_updates = true\n        api.bulkAddPrograms(\n            this.getSelectedBulkTargetIDs(),\n            added_programs.map(key => {\n                const [country_id, program_id] = key.split('_')\n                return {country: country_id, program: program_id, role: 'low'}\n            })\n        ).then(result => {\n            //update open user programs\n            const updated_users = this.getSelectedBulkTargetIDs()\n            updated_users.forEach(id => {\n                if(this.editing_target == id) {\n                    api.fetchUserProgramAccess(id).then(access => {\n                        runInAction(() => {\n                            this.editing_target_data.access = access\n                        })\n                    })\n                }\n            })\n\n            runInAction(() => {\n                Object.entries(result).forEach(([id, count]) => {\n                    this.users[id].user_programs = count\n                })\n                this.applying_bulk_updates = false\n            })\n            this.onSaveSuccessHandler()\n        }).catch(response => {\n            runInAction(() => {\n                this.applying_bulk_updates = false\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    bulkRemovePrograms(removed_programs) {\n        this.applying_bulk_updates = true\n        api.bulkRemovePrograms(\n            this.getSelectedBulkTargetIDs(),\n            removed_programs.map(key => {\n                const [country_id, program_id] = key.split('_')\n                return {country: country_id, program: program_id, role: 'low'}\n            })\n        ).then(result => {\n            //update open user programs\n            const updated_users = this.getSelectedBulkTargetIDs()\n            updated_users.forEach(id => {\n                if(this.editing_target == id) {\n                    api.fetchUserProgramAccess(id).then(access => {\n                        runInAction(() => {\n                            this.editing_target_data.access = access\n                        })\n                    })\n                }\n            })\n\n            runInAction(() => {\n                Object.entries(result).forEach(([id, count]) => {\n                    this.users[id].user_programs = count\n                })\n                this.applying_bulk_updates = false\n            })\n\n            this.onSaveSuccessHandler()\n        }).catch(response => {\n            runInAction(() => {\n                this.applying_bulk_updates = false\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    clearFilters() {\n        this.filters = {\n            countries: [],\n            base_countries: [],\n            organizations: [],\n            programs: [],\n            user_status: '',\n            admin_role: '',\n            users: this.filters.users || []\n        }\n    }\n\n    @action\n    toggleChangeLogRowExpando(row_id) {\n        if (this.changelog_expanded_rows.has(row_id)) {\n            this.changelog_expanded_rows.delete(row_id);\n        } else {\n            this.changelog_expanded_rows.add(row_id);\n        }\n    }\n}\n\n\n/**\n * To manage a list of countries and regions being selected and unselected,\n * this takes region data and country data (including country.region) and makes a store that\n * handles selecting and unselecting regions and countries intelligently:\n *   - if all countries in a region are selected, that region becomes automatically selected\n *   - if one country from a selected region is unselected, that region is automatically unselected\n *   - selecting a region automatically selects all countries from that region\n *   - unselecteding a region automatically unselects all countries from that region\n */\n\nexport class CountryStore {\n    @observable regions;\n    @observable countries;\n    @observable _selectedCountryIds;\n    @observable _expandedCountryIds;\n\n    constructor(regions, countries) {\n        this.regions = regions;\n        this.countries = countries;\n        this._selectedCountryIds = [];\n        this._expandedCountryIds = new Set([...Object.keys(this.countries).map(id => parseInt(id))]);\n        this.nameSort = (objA, objB) => (objA.name.toUpperCase() < objB.name.toUpperCase()) ? -1 : 1;\n    }\n\n    @computed\n    get orderedRegions() {\n        return Object.values(this.regions || {})\n            .map(region => ({\n                id: region.id,\n                name: gettext(region.name),\n                countries: Object.values(this.countries)\n                                 .filter(country => country.region == region.id)\n                                 .sort(this.nameSort)\n            }))\n            .filter(region => region.countries.length > 0)\n            .sort(this.nameSort);\n    }\n\n    @computed\n    get groupedOptions() {\n        // in the following possible options listing, \"selectable: false\" ensures the group heading\n        // will not have a checkbox adjacent to it\n        return [\n            {\n                // # Translators: a list of groups of countries (i.e. \"Asia\")\n                label: gettext(\"Regions\"),\n                value: null,\n                selectable: false,\n                options: this.orderedRegions.map(region => ({label: region.name, value: `r-${region.id}`}))\n            },\n            ...this.orderedRegions.map(region => (\n                {\n                    label: region.name,\n                    value: null,\n                    divider: true,\n                    options: region.countries.map(country => ({label: country.name, value: country.id}))\n                }))\n        ];\n    }\n\n    @computed\n    get selectedCountries() {\n        return this._selectedCountryIds.map(countryId => parseInt(countryId));\n    }\n\n    @computed\n    get selectedOptions() {\n        // in the following selected option listing, \"nolist\" prevents counting the option in the\n        // \"n selected\" (i.e. \"4 selected\") display on the multiselect:\n        const isSelected = (country) => this.selectedCountries.includes(country.id)\n        return [\n            ...this.orderedRegions.filter(region => region.countries.every(isSelected))\n                                  .map(region => ({value: `r-${region.id}`, label: region.name, noList: true})),\n            ...this.selectedCountries.map(countryId => (\n            {label: this.countries[countryId].name, value: this.countries[countryId].id}\n        ))];\n    }\n\n    isExpanded(countryId) {\n        return this._expandedCountryIds.has(parseInt(countryId));\n    }\n\n    @action\n    toggleExpanded(countryId) {\n        if (this._expandedCountryIds.has(parseInt(countryId))) {\n            this._expandedCountryIds.delete(parseInt(countryId));\n        } else {\n            this._expandedCountryIds.add(parseInt(countryId));\n        }\n    }\n\n    @action\n    setExpanded(countryId) {\n        this._expandedCountryIds.add(parseInt(countryId));\n    }\n\n    @action\n    removeRegion(regionId) {\n        let countryIds = Object.values(this.countries).filter(country => country.region == regionId)\n                                .map(country => country.id);\n        this._selectedCountryIds = this._selectedCountryIds.filter(id => !countryIds.includes(id));\n    }\n\n    @action\n    addRegion(regionId) {\n        let countryIds = Object.values(this.countries).filter(country => country.region == regionId)\n                                .map(country => country.id);\n        this._selectedCountryIds = [...new Set([...this._selectedCountryIds, ...countryIds])];\n    }\n\n    @action\n    removeCountry(countryId) {\n        this._selectedCountryIds = this._selectedCountryIds.filter(id => id !== countryId);\n        this._expandedCountryIds.delete(parseInt(countryId))\n    }\n\n    @action\n    addCountry(countryId) {\n        this._selectedCountryIds = [...new Set([...this._selectedCountryIds, countryId])];\n        this._expandedCountryIds.add(parseInt(countryId));\n    }\n\n    @action\n    updateSelected(selected) {\n        if (selected.length == 0) {\n            // selection is cleared\n            this._selectedCountryIds = [];\n            this._expandedCountryIds = new Set([...Object.keys(this.countries).map(id => parseInt(id))]);\n        }\n        else if (selected.length < this.selectedOptions.length) {\n            // user removed items\n            const unSelected = (option) => !selected.map(option => option.value).includes(option.value);\n            let missingOptions = this.selectedOptions.filter(unSelected);\n            missingOptions.forEach(option => {\n                if (option.value && `${option.value}`.includes('r')) {\n                    this.removeRegion(option.value.slice(2));\n                } else if (option.value) {\n                    this.removeCountry(option.value);\n                }\n            });\n            if (this.selectedOptions.length == 0) {\n               // expand all countries (no selection means all expanded:)\n               this._expandedCountryIds = new Set([...Object.keys(this.countries).map(id => parseInt(id))]);\n            }\n        } else {\n            // user added items\n            if (this.selectedOptions.length == 0) {\n                this._expandedCountryIds = new Set([]);\n            }\n            const notYetSelected = (option) => !this.selectedOptions.map(option => option.value).includes(option.value);\n            let addedOptions = selected.filter(notYetSelected);\n            addedOptions.forEach(option => {\n                if (option.value && `${option.value}`.includes('r')) {\n                    this.addRegion(option.value.slice(2));\n                } else if (option.value) {\n                    this.addCountry(option.value);\n                }\n            });\n        }\n    }\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class UserEditor extends React.Component {\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.props.notifyPaneChange(new_page)\n        }\n    }\n\n    render() {\n        const {ProfileSection, ProgramSection, HistorySection, active_pane} = this.props\n\n        const profile_active_class = (active_pane == 'profile')?'active':''\n        const programs_active_class = (active_pane == 'programs_and_roles')?'active':''\n        const history_active_class = (active_pane == 'status_and_history')?'active':''\n        const new_class = (this.props.new)?'disabled':''\n\n        return (\n            <div className=\"tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link ${profile_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile')}}>\n                            {gettext(\"Profile\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link text-nowrap ${programs_active_class} ${new_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('programs_and_roles')}}>\n                            {gettext(\"Programs and Roles\")}\n                        </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link text-nowrap ${history_active_class} ${new_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('status_and_history')}}>\n                            {gettext(\"Status and History\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {active_pane == 'profile' &&\n                    <ProfileSection />\n                    }\n\n                    {active_pane == 'programs_and_roles' &&\n                    <ProgramSection />\n                    }\n\n                    {active_pane == 'status_and_history' &&\n                    <HistorySection />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\n/* Sidebar expando/collapso mimicking bootstrap behavior\n * CSS in components/_folding_sidebar.scss\n * Usage: <FoldingSidebar>\n *          children to be hidden when toggle is clicked\n *         </FoldingSidebar>\n */\n\nclass FoldingSidebar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folding: false,\n            folded: false,\n            resize: false\n        };\n        this.contentsContainer = React.createRef();\n    }\n\n    componentDidMount() {\n        this.contentWidth = this.contentsContainer.current.offsetWidth;\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if (!this.state.folded && !this.state.folding) {\n            this.setState(() => ({resize: true}),\n                          () => {\n                            this.contentWidth = this.contentsContainer.current.offsetWidth;\n                            this.setState({resize: false});\n                          });\n        }\n    }\n\n    toggleFolded() {\n        if (!this.state.folding) {\n            this.setState(\n                {folding: true,\n                 folded: !this.state.folded});\n        } else {\n            this.foldComplete();\n        }\n    }\n\n    foldComplete() {\n        this.setState(() => ({folding: false}), this.updateDimensions);\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = this.state.folded\n                     ? this.state.folding\n                        ? \"fa-angle-double-left\" : \"fa-chevron-right\"\n                     : this.state.folding\n                        ? \"fa-angle-double-right\" : \"fa-chevron-left\";\n        const width = this.state.folded ? \"0px\" : this.state.resize ? \"auto\" : this.contentWidth + \"px\";\n        const overflow = (this.state.folded || this.state.folding) ? \"hidden\" : \"visible\";\n        return (\n        <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            <div className={\"folding-sidebar__contents\"}\n                 onTransitionEnd={() => this.foldComplete()}\n                 ref={this.contentsContainer}\n                style={{width: width, overflow: overflow }}\n            >\n                <React.Fragment>{this.props.children}</React.Fragment>\n            </div>\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default FoldingSidebar\n","/* Site-wide constants */\n\n\n/**\n * JS_GLOBALS is in base.html (base Tola template) - delivered by middleware from the backend\n * this function returns the global constant for a given key (i.e. 'reason_for_change_options')\n */\n\nfunction getGlobal(key) {\n    if ((typeof JS_GLOBALS !== 'undefined')  && JS_GLOBALS.hasOwnProperty(key)) {\n        return JS_GLOBALS[key];\n    }\n    return null;\n}\n\n\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\nconst EM_DASH = \"—\";\nconst BLANK_TABLE_CELL = EM_DASH;\n\n\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nconst TIME_AWARE_FREQUENCIES = [3, 4, 5, 6, 7];\nconst IRREGULAR_FREQUENCIES = [1, 2];\n\nconst TVA_FREQUENCY_LABELS = Object.freeze(\n    {\n        1: gettext(\"Life of Program (LoP) only\"),\n        2: gettext(\"Midline and endline\"),\n        3: gettext(\"Annual\"),\n        4: gettext(\"Semi-annual\"),\n        5: gettext(\"Tri-annual\"),\n        6: gettext(\"Quarterly\"),\n        7: gettext(\"Monthly\")\n    }\n);\n\nconst TIMEPERIODS_FREQUENCY_LABELS = Object.freeze(\n    {\n        3: gettext(\"Years\"),\n        4: gettext(\"Semi-annual periods\"),\n        5: gettext(\"Tri-annual periods\"),\n        6: gettext(\"Quarters\"),\n        7: gettext(\"Months\")\n    }\n);\n\nexport { BLANK_OPTION, BLANK_LABEL, BLANK_TABLE_CELL, EM_DASH, TVA, TIMEPERIODS, TIME_AWARE_FREQUENCIES,\n         IRREGULAR_FREQUENCIES, TVA_FREQUENCY_LABELS, TIMEPERIODS_FREQUENCY_LABELS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nfunction getPeriodLabels() {\n    return {\n        targetperiodLabels: {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        },\n        timeperiodLabels: {\n            3: _gettext(\"Years\"),\n            5: _gettext(\"Tri-annual periods\"),\n            4: _gettext(\"Semi-annual periods\"),\n            7: _gettext(\"Months\"),\n            6: _gettext(\"Quarters\")\n        }\n    };\n}\n\nexport {getPeriodLabels};\n\nexport const STATUS_CODES = {\n    NO_INDICATOR_IN_UPDATE: 1\n};\n\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n    nonReporting: 8\n});\n\nexport const RFC_OPTIONS = getGlobal('reason_for_change_options') ?? [];"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AAAA;AADA;AACA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAHA;AACA;AAQA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AATA;AAVA;AAqBA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAPA;AASA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAFA;AAIA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAKA;AAAA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAQA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AADA;AAKA;AAAA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAQA;AAAA;AAEA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAQA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;;;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAFA;AAKA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA7BA;AAgCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AADA;AACA;AACA;AAPA;AASA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AA5CA;AAEA;AACA;;;AAyCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;;;;AAvDA;AACA;AAyDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AApBA;AACA;AAsBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;A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;AACA;AACA;AAvMA;AAAA;AAAA;AA0MA;AACA;AA3MA;AAAA;AAAA;AA8MA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApOA;AAAA;AAAA;AAwOA;AACA;AACA;AACA;AA3OA;AAAA;AAAA;AA+OA;AACA;AACA;AACA;AACA;AAnPA;AAAA;AAAA;AAsPA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AA1PA;AAAA;AAAA;AA8PA;AACA;AA/PA;AAAA;AAAA;AAkQA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA7QA;AAAA;AAAA;AAiRA;AACA;AAlRA;AAAA;AAAA;AAsRA;AACA;AAvRA;AAAA;AAAA;AA2RA;AACA;AA5RA;AAAA;AAAA;AAgSA;AACA;AAjSA;AAAA;AAAA;AAqSA;AACA;AAtSA;AAAA;AAAA;AA0SA;AACA;AACA;AACA;AA7SA;AAAA;AAAA;AAgTA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AA3UA;AAAA;AAAA;AA+UA;AACA;AACA;AAjVA;AAAA;AAAA;AAqVA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AA1WA;AAAA;AAAA;AA6WA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAvYA;AAAA;AAAA;AA0YA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApaA;AAAA;AAAA;AAuaA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnbA;AAAA;AAAA;AAsbA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAlBA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAndA;AAAA;AAAA;AAsdA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAjBA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlfA;AAAA;AAAA;AAqfA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AAvgBA;AAAA;AAAA;AA0gBA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9hBA;AAAA;AAAA;AAiiBA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;A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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrqBA;AACA;AACA;AAEA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AAAA;AAeA;;;;AApDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1BA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAYA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;;;;AAnEA;AACA;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAYA;;;;A","sourceRoot":""}