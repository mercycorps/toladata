{"version":3,"file":"audit_log-77f95896abcc2ee451bc.js","sources":["webpack:///./js/pages/tola_management_pages/audit_log/views.js","webpack:///./js/pages/tola_management_pages/audit_log/index.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/components/pagination.js","webpack:///./js/api.js","webpack:///./js/pages/tola_management_pages/audit_log/api.js","webpack:///./js/components/indicatorModalComponents.js","webpack:///./js/pages/tola_management_pages/audit_log/models.js"],"sourcesContent":["import React from 'react';\nimport { observer } from \"mobx-react\";\nimport Pagination from '../../../components/pagination';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport { toJS } from \"mobx\";\nimport classNames from \"classnames\";\n\nimport { ExpandAllButton, CollapseAllButton } from '../../../components/indicatorModalComponents';\nimport LoadingSpinner from '../../../components/loading-spinner';\n\nconst emptyValue = \"—\";\n\nexport const DisaggregationDiffs = ({disagg_type, disagg_diffs}) => {\n    disagg_diffs.sort( (a, b) => a.custom_sort - b.custom_sort);\n    return <div><h4 className=\"disagg-type__title text-small\">{gettext(disagg_type)}</h4>\n        {disagg_diffs.map( diff => {\n            const displayValue = [\"\", null, undefined].includes(diff.value)\n                ? emptyValue\n                : localizeNumber(normalizeNumber(diff.value));\n            const displayClasses = classNames(\"change__field__value\", {\"empty-value\": displayValue===emptyValue});\n            return <div className=\"change__field\" key={diff.id}><span className=\"change__field__name\">{diff.name}:</span> <span className={displayClasses}>{displayValue}</span></div>\n        })}\n    </div>\n};\n\nexport const ResultChangeset = ({data, name, pretty_name}) => {\n    let displayValue = \"\";\n    if ([\"\", null, undefined].includes(data)) {\n        displayValue = emptyValue;\n    }\n    else if (isNaN(data)) {\n        displayValue = data;\n    }\n    else {\n        displayValue = localizeNumber(data);\n    }\n    if (name === 'id') {\n        return null\n    } else if(name === 'evidence_url') {\n        return <div className=\"change__field\"><strong className=\"change__field__name\">{pretty_name}</strong>: {(data !== 'N/A' && data !== '')?<a className=\"change__field__value--evidence-url\" href={displayValue} target=\"_blank\">{displayValue}</a>:data}</div>\n    } else if (name === 'disaggregation_values') {\n        if (Object.entries(data).length) {\n            let groupedDiffs = {};\n            Object.values(data).forEach( entry => {\n                const groupKey = entry.type || \"__none__\";\n                if (entry.type in groupedDiffs) {\n                    groupedDiffs[groupKey].push(entry);\n                }\n                else {\n                    groupedDiffs[groupKey] = [entry];\n                }\n            });\n\n            return <div className=\"changelog__change__targets\">\n                {Object.keys(groupedDiffs).sort().map( (typeName ) => {\n                    return  <DisaggregationDiffs\n                        key={typeName+'_diff'}\n                        disagg_type={typeName === \"__none__\" ? \"\" : typeName } disagg_diffs={groupedDiffs[typeName]} />\n                })}\n            </div>\n        } else {\n            return null;\n        }\n    } else {\n        const displayClasses = classNames(\"change__field__value\", {\"empty-value\": displayValue===emptyValue});\n        return <div className=\"change__field\"><strong className=\"change__field__name\">{pretty_name}</strong>: <span className={displayClasses}>{displayValue}</span></div>\n    }\n};\n\nconst ProgramDatesChangeset = ({data, name, pretty_name}) => {\n    const displayValue = [\"\", null].includes(data)  ? \"–\" : data;\n    return <p>{pretty_name}: {displayValue}</p>\n}\n\nexport const IndicatorChangeset = ({data, name, pretty_name, indicator}) => {\n    if(name === \"baseline_na\"){\n        return null;\n    }\n    if(name === 'targets') {\n        return <div className=\"changelog__change__targets\">\n            <h4 className=\"text-small\">{gettext('Targets changed')}</h4>\n            {Object.entries(data).map(([id, target]) => {\n                const displayValue = [\"\", null, undefined].includes(target.value) ? emptyValue : localizeNumber(target.value);\n                const displayClasses = classNames({\"empty-value\": displayValue===emptyValue});\n                return <div className=\"change__field\" key={id}><strong className=\"change__field__name\">{target.name}:</strong> <span className={displayClasses}>{displayValue}</span></div>\n            })}\n        </div>\n    } else {\n        let displayValue = \"\";\n        if ([\"\", null, undefined].includes(data)) {\n            displayValue = emptyValue;\n        }\n        else if (isNaN(data)) {\n            displayValue = data;\n        }\n        else {\n            displayValue = localizeNumber(data);\n        }\n\n        if (name === \"baseline_value\" && displayValue === emptyValue) {\n            // Need to differentiate between no value (new indicator) and \"N/A\" (from N/A checkbox)\n            displayValue = data===\"\" ? emptyValue : \"N/A\"\n        }\n\n        const displayClasses = classNames({\"empty-value\": displayValue===emptyValue});\n        return <div className=\"change__field\">\n            <strong className=\"change__field__name\">\n                { name === 'name' ?\n                    <span>{gettext('Indicator')} {indicator.results_aware_number}: </span> : <span>{pretty_name}: </span>}\n            </strong>\n            <span className={displayClasses}>{displayValue}</span>\n        </div>\n    }\n}\n\nconst ResultLevelChangeset = ({data, name, pretty_name, level}) => {\n    const displayValue = [\"\", null, undefined].includes(data) ? emptyValue : data.toString();\n    const displayClasses = displayValue === emptyValue ? \"empty-value\" : null;\n    return <div className=\"change__field\">\n        { name !== 'name' ? <strong className=\"change__field__name\">{pretty_name}: </strong>  : <strong><span className=\"field__level-tier\">{level.tier} {level.display_ontology}: </span></strong> }\n        <span className={displayClasses}>{displayValue}</span>\n    </div>\n}\n\nclass ChangesetEntry extends React.Component {\n    renderType(type, data, name, pretty_name, indicator, level) {\n        switch(type) {\n            case 'indicator_changed':\n            case 'indicator_created':\n            case 'indicator_deleted':\n                return <IndicatorChangeset data={data} name={name} pretty_name={pretty_name} indicator={indicator} level={level}/>\n                break\n            case 'result_changed':\n            case 'result_created':\n            case 'result_deleted':\n                return <ResultChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'program_dates_changed':\n                return <ProgramDatesChangeset data={data} name={name} pretty_name={pretty_name} />\n                break\n            case 'level_changed':\n                return <ResultLevelChangeset\n                    data={data} name={name} pretty_name={pretty_name} level={level} />\n                break\n        }\n    }\n\n    render() {\n        const {data, type, name, pretty_name, indicator, level} = this.props;\n        return this.renderType(type, data, name, pretty_name, indicator, level)\n    }\n}\n\n\nexport const IndicatorNameSpan = ({indicator, result_info}) => {\n    if (! indicator) {\n        return <span>{gettext('N/A')}</span>\n    }\n    let indicator_output = ''\n    if (indicator.results_aware_number) {\n        indicator_output = <span>\n            <strong>{gettext('Indicator')} {indicator.results_aware_number}:</strong> {indicator.name}\n        </span>\n    } else {\n        indicator_output = <span>\n            <strong>{gettext('Indicator')}:</strong> {indicator.name}\n        </span>\n    }\n\n    // # Translators: This is part of a change log.  The result date of the Result that has been changed is being shown\n    const result_output = result_info ? <p className=\"mt-2\"><strong>{gettext(\"Result date:\")}</strong> {result_info.date}</p> : null;\n\n    return (\n        <React.Fragment>\n            {indicator_output}\n            {result_output}\n        </React.Fragment>\n    )\n};\n\nconst ResultLevel = ({indicator, level}) => {\n    if (level) {\n        return `${level.tier} ${level.display_ontology}`;\n    }\n\n    if (indicator) {\n\n        if (indicator.leveltier_name && indicator.level_display_ontology)\n            return `${indicator.leveltier_name} ${indicator.level_display_ontology}`;\n        else if (indicator.leveltier_name)\n            return indicator.leveltier_name;\n    }\n\n    return <span>{gettext('N/A')}</span>\n};\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"audit-log-index-view\">\n            <header className=\"page-title\">\n                <h1 className=\"page-title h2\">\n                    <a href={`/program/${store.program_id}/`}>{store.program_name}</a>: <span className=\"font-weight-normal text-muted text-nowrap\">{gettext(\"Indicator change log\")}&nbsp;<small><i className=\"fa fa-history\" /></small></span>\n                </h1>\n            </header>\n\n            <div className=\"admin-list__controls\">\n                <div className=\"controls__bulk-actions\">\n                    <div className=\"btn-group\">\n                        <ExpandAllButton clickHandler={ () => store.expandAllExpandos() } disabled={ store.log_rows.length === store.expando_rows.size } />\n                        <CollapseAllButton clickHandler={ () => store.collapseAllExpandos() } disabled={ store.expando_rows.size === 0 } />\n                    </div>\n                </div>\n                <div className=\"controls__buttons\">\n                    <a className=\"btn btn-secondary btn-sm\" href={`/api/tola_management/program/${store.program_id}/export_audit_log`}>\n                        <i className=\"fas fa-download\" />\n                        {gettext(\"Excel\")}\n                    </a>\n                </div>\n            </div>\n\n            <div className=\"admin-list__table\">\n                <LoadingSpinner isLoading={store.fetching}>\n                    <table className=\"table table-sm table-bordered bg-white text-small changelog\">\n                        <thead>\n                            <tr>\n                                <th className=\"text-nowrap\">{gettext(\"Date and time\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Result level\")}</th>\n                                {/* # Translators: This is a column heading. The column is in a change log and identifies the entities being changed. */}\n                                <th className=\"text-nowrap\">{gettext(\"Indicators and results\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"User\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Organization\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Change type\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Previous entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"New entry\")}</th>\n                                <th className=\"text-nowrap\">{gettext(\"Reason for change\")}</th>\n                            </tr>\n                        </thead>\n                        {store.log_rows.map(data => {\n                                let is_expanded = store.expando_rows.has(data.id);\n                                return <tbody key={data.id}>\n                                <tr\n                                    className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'}\n                                    onClick={() => store.toggleRowExpando(data.id)}>\n                                    <td className=\"text-action\">\n                                        <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />\n                                        &nbsp;{data.date} (UTC)\n                                    </td>\n                                    <td><ResultLevel indicator={data.indicator} level={data.level} /></td>\n                                    <td>{<IndicatorNameSpan indicator={data.indicator} result_info={data.result_info} />}</td>\n                                    <td>{data.user}</td>\n                                    <td>{data.organization}</td>\n                                    <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n                                    <td className=\"text-action\">{is_expanded ? '' : '...'}</td>\n                                    <td className=\"text-action\">{is_expanded ? '' : '...'}</td>\n                                    <td className=\"text-action\">{is_expanded ? '' : '...'}</td>\n                                </tr>\n                                {is_expanded &&\n                                <tr className=\"changelog__entry__row\" key={data.id}>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td></td>\n                                    <td className=\"changelog__change--prev\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.prev}\n                                                                   indicator={data.indicator} level={data.level}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--new\">\n                                        {data.diff_list.map(changeset => {\n                                            return <ChangesetEntry key={changeset.name} name={changeset.name}\n                                                                   pretty_name={changeset.pretty_name}\n                                                                   type={data.change_type} data={changeset.new}\n                                                                   indicator={data.indicator} level={data.level}/>\n                                        })}\n                                    </td>\n                                    <td className=\"changelog__change--rationale\">\n                                    {data.rationale_selected_options &&\n                                        data.rationale_selected_options.map(option => {\n                                            return <React.Fragment key={option}><span className=\"changelog__change--rationale-option\">{option}</span><br /></React.Fragment>;\n                                        })\n                                    }\n                                    {(data.rationale_selected_options && data.rationale_selected_options.length > 0 && data.rationale) && <br/>}\n                                        <span className=\"changelog__change--rationale-text\">{data.rationale}</span>\n                                    </td>\n                                </tr>\n                                }\n                                </tbody>\n                            })}\n                    </table>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-muted text-small\">{store.entries_count?`${store.entries_count} ${gettext(\"entries\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                             pageCount={store.total_pages}\n                             initialPage={store.current_page}\n                             onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {ProgramAuditLogStore} from './models'\nimport {IndexView} from './views'\n\n/*\n * Model/Store setup\n */\nconst store = new ProgramAuditLogStore(\n    jsContext.program_id,\n    jsContext.program_name,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector('#app_root')\n)\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import {api} from '../../../api';\n\nexport const fetchProgramAuditLogWithFilter = (program_id, page) => api.get(`/tola_management/program/${program_id}/audit_log/`, {params: {page: page}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        logs: data.results,\n        total_pages: total_pages,\n        total_entries: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport default {\n    fetchProgramAuditLogWithFilter\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nexport const AddIndicatorButton = observer(({ readonly, ...params }) => {\n    return (\n            <button\n                type=\"button\"\n                disabled={readonly}\n                className=\"btn btn-sm btn-link px-0 btn-add text-nowrap\"\n                onClick={e => {openCreateIndicatorFormModal(params)}}>\n                <i className=\"fas fa-plus-circle\"/> {gettext(\"Add indicator\")}\n            </button>\n    );\n});\n\n\nexport const UpdateIndicatorButton = observer(({ readonly, label=null, ...params }) => {\n    return (\n            <button\n                type=\"button\"\n                disabled={readonly}\n                className=\"btn btn-link\"\n                onClick={e => {openUpdateIndicatorFormModal(params)}}>\n                <i className=\"fas fa-cog\"/>{label}\n            </button>\n    );\n});\n\n\n\nexport const ExpandAllButton = observer(\n    ({clickHandler, disabled}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={ clickHandler }\n                       disabled={ disabled }>\n            <i className=\"fas fa-plus-square\"></i>\n            {\n                /* # Translators: button label to show the details of all rows in a list */}\n            {gettext('Expand all')}\n        </button>\n    }\n);\n\nexport const CollapseAllButton = observer(\n    ({clickHandler, disabled}) => {\n        return <button className=\"btn btn-medium text-action btn-sm\"\n                       onClick={ clickHandler }\n                       disabled={ disabled }>\n            <i className=\"fas fa-minus-square\"></i>\n            {\n                /* # Translators: button label to hide the details of all rows in a list */}\n            {gettext('Collapse all')}\n        </button>\n    }\n);\n","import { observable, computed, action, runInAction, toJS } from \"mobx\"\nimport api from './api'\n\nexport class ProgramAuditLogStore {\n    @observable program_id = null;\n    @observable program_name = null;\n    @observable log_rows = [];\n    @observable fetching = false;\n    @observable current_page = 0;\n\n    @observable entries_count = 0;\n    @observable total_pages = 0;\n    @observable next_page = null;\n    @observable previous_page = null;\n\n    // UI state - track what history rows are expanded\n    @observable expando_rows = new Set();\n\n    constructor(program_id, program_name) {\n        this.program_id = program_id;\n        this.program_name = program_name;\n        this.fetchProgramAuditLog();\n    }\n\n    @action\n    fetchProgramAuditLog() {\n        this.fetching = true\n\n        api.fetchProgramAuditLogWithFilter(this.program_id, this.current_page + 1).then(results => {\n            runInAction(() => {\n                this.fetching = false;\n                this.log_rows = results.logs;\n                this.entries_count = results.total_entries;\n                this.total_pages = results.total_pages;\n                this.next_page = results.next_page;\n                this.previous_page = results.previous_page;\n            })\n        })\n    }\n\n    @action\n    changePage(page) {\n        if(page.selected != this.current_page) {\n            this.current_page = page.selected\n            this.fetchProgramAuditLog()\n        }\n    }\n\n    @action\n    toggleRowExpando(row_id) {\n        if (this.expando_rows.has(row_id)) {\n            this.expando_rows.delete(row_id);\n        } else {\n            this.expando_rows.add(row_id);\n        }\n    }\n\n    @action\n    expandAllExpandos() {\n        this.log_rows.forEach((row) => this.expando_rows.add(row.id));\n    }\n\n    @action\n    collapseAllExpandos() {\n        this.expando_rows.clear();\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAFA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAj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","sourceRoot":""}