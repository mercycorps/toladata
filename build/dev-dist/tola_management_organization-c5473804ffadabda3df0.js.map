{"version":3,"file":"tola_management_organization-c5473804ffadabda3df0.js","sources":["webpack:///./js/pages/tola_management_pages/organization/models.js","webpack:///./js/components/virtualized-react-select.js","webpack:///./js/components/loading-spinner.js","webpack:///./js/pages/tola_management_pages/organization/views.js","webpack:///./js/components/expander.js","webpack:///./js/components/changelog.js","webpack:///./js/components/pagination.js","webpack:///./js/pages/tola_management_pages/organization/components/organization_editor.js","webpack:///./js/pages/tola_management_pages/organization/components/edit_organization_history.js","webpack:///./js/components/management-table.js","webpack:///./js/general_utilities.js","webpack:///./js/api.js","webpack:///./js/components/checkboxed-multi-select.js","webpack:///./js/pages/tola_management_pages/organization/index.js","webpack:///./js/components/folding-sidebar.js","webpack:///./js/constants.js","webpack:///./js/pages/tola_management_pages/organization/components/edit_organization_profile.js","webpack:///./js/pages/tola_management_pages/organization/api.js"],"sourcesContent":["import { observable, computed, action, runInAction } from \"mobx\";\nimport api from './api';\nimport {sortObjectListByValue} from \"../../../general_utilities\";\n\nconst default_organization = {\n    id: null ,\n    is_active: false,\n    mode_of_contact: \"\",\n    name: \"\",\n    organization_url: null,\n    primary_address: \"\",\n    primary_contact_email: \"\",\n    primary_contact_name: \"\",\n    primary_contact_phone: \"\",\n    sectors: [],\n}\n\nexport class OrganizationStore {\n    @observable organizations = {}\n    @observable organizations_listing = []\n    @observable organizations_count = 0\n    @observable total_pagees = 0\n    @observable fetching = false\n    @observable fetching_editing_target = false\n    @observable current_page = 0\n    @observable saving = false\n\n    @observable bulk_targets = new Map()\n    @observable bulk_targets_all = false\n\n    available_programs = {}\n    available_organizations = {}\n    available_sectors = {}\n    available_countries = {}\n    program_selections = []\n    organization_selections = []\n    sector_selections = []\n    country_selections = []\n\n    @observable editing_target = null\n    @observable editing_target_data = {...default_organization}\n    @observable editing_target_history = []\n    @observable editing_errors = {}\n\n    @observable filters = {\n        countries: [],\n        organizations: [],\n        programs: [],\n        sectors: [],\n        organization_status: '',\n    }\n\n    @observable appliedFilters = {\n    }\n\n    organization_status_options = [\n        {value: 1, label: gettext('Active')},\n        {value: 0, label: gettext('Inactive')}\n    ]\n\n    @observable active_editor_pane = 'profile'\n\n    // UI state - track what history rows are expanded\n    @observable changelog_expanded_rows = new Set();\n\n    active_pane_is_dirty = false\n\n    constructor(programs, organizations, sectors, countries, country_filter, program_filter) {\n        this.available_programs = programs\n        this.available_organizations = organizations\n        this.available_sectors = sectors\n        this.available_countries = countries\n        this.organization_selections = sortObjectListByValue(Object.entries(organizations).map(([id, org]) => ({value: org.id, label: org.name})))\n        this.program_selections = sortObjectListByValue(Object.entries(programs).map(([id, program]) => ({value: program.id, label: program.name})))\n        this.sector_selections = sortObjectListByValue(Object.entries(sectors).map(([id, sector]) => ({value: sector.id, label: sector.name})))\n        this.country_selections = sortObjectListByValue(Object.entries(countries).map(([id, country]) => ({value: country.id, label: country.name})))\n        this.filters.countries = country_filter.map(id => this.available_countries[id]).map(country => ({label: country.name, value: country.id}))\n        this.filters.programs = program_filter.filter(id => programs[id]).map(id => ({label: programs[id].name, value: id}))\n        this.appliedFilters = {...this.filters}\n        this.fetchOrganizations()\n    }\n\n    marshalFilters(filters) {\n        return Object.entries(filters).reduce((xs, x) => {\n            if(Array.isArray(x[1])) {\n                xs[x[0]] = x[1].map(x => x.value)\n            } else {\n                xs[x[0]] = x[1].value\n            }\n            return xs\n        }, {})\n    }\n\n    updateLocalOrganization(id, applied_data, aggregates) {\n        this.organizations[id] = {\n            id: id,\n            name: applied_data.name,\n            program_count: aggregates.program_count,\n            user_count: aggregates.user_count,\n            is_active: applied_data.is_active\n        }\n    }\n\n    onSaveErrorHandler() {\n        PNotify.error({text: gettext('Saving Failed'), delay: 5000});\n    }\n\n    onSaveSuccessHandler() {\n        PNotify.success({text: gettext('Successfully Saved'), delay: 5000})\n    }\n\n    dirtyConfirm() {\n        return !this.active_pane_is_dirty || (this.active_pane_is_dirty && confirm(gettext(\"You have unsaved changes. Are you sure you want to discard them?\")))\n    }\n\n    @action\n    onProfilePaneChange(new_pane) {\n        if(this.dirtyConfirm()) {\n            this.active_editor_pane = new_pane\n            this.active_pane_is_dirty = false\n        }\n    }\n\n    setActiveFormIsDirty(is_dirty) {\n        this.active_pane_is_dirty = is_dirty\n    }\n\n    @action\n    fetchOrganizations() {\n        if(this.dirtyConfirm()) {\n            this.fetching = true\n\n            api.fetchOrganizationsWithFilter(this.current_page + 1, this.marshalFilters(this.appliedFilters)).then(results => {\n                runInAction(() => {\n                    this.active_editor_pane = 'profile'\n                    this.active_pane_is_dirty = false\n                    this.fetching = false\n                    this.organizations = results.organizations.reduce((xs, x) => {\n                        xs[x.id] = x\n                        return xs\n                    }, {})\n                    this.organizations_listing = results.organizations.map(o => o.id)\n                    this.organizations_count = results.total_organizations\n                    this.total_pages = results.total_pages\n                    this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]))\n                })\n            })\n        }\n    }\n\n    @action\n    applyFilters() {\n        this.appliedFilters = {...this.filters}\n        this.current_page = 0\n        this.fetchOrganizations()\n    }\n\n    @action\n    createOrganization() {\n        if(this.dirtyConfirm()) {\n            const new_organization = {\n                id: \"new\",\n                name: \"\",\n                program_count: 0,\n                user_count: 0,\n                is_active: false\n            }\n            if(this.editing_target !== \"new\") {\n                this.organizations_listing.unshift(\"new\")\n            }\n\n            this.editing_errors = {}\n            this.organizations[\"new\"] = new_organization\n            this.editing_target = new_organization.id\n            this.editing_target_data = {...default_organization}\n            this.active_pane_is_dirty = false\n            this.active_editor_pane = 'profile'\n        }\n    }\n\n    @action\n    updateOrganizationProfile(id, new_data) {\n        this.saving = true\n        api.updateOrganization(id, new_data).then( updated_data => Promise.all([api.fetchOrganizationAggregates(id), api.fetchOrganizationHistory(id)]).then(([aggregates, history]) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = {};\n                this.active_pane_is_dirty = false\n                this.editing_target_data = updated_data\n                this.editing_target_history = history\n                this.updateLocalOrganization(id, updated_data, aggregates)\n            })\n            this.onSaveSuccessHandler()\n        })).catch((error) => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    saveNewOrganization(new_data) {\n        this.saving = true;\n        new_data.is_active = true;\n        api.createOrganization(new_data).then(result => api.fetchOrganizationHistory(result.id).then( history => {\n            runInAction(() => {\n                this.saving = false;\n                this.editing_errors = {};\n                this.updateLocalOrganization(result.id, result, {program_count: 0, user_count: 0});\n                this.organizations_listing.shift();\n                delete this.organizations[\"new\"];\n                this.organizations_listing.unshift(result.id);\n                this.editing_target = result.id;\n                this.editing_target_data = result;\n                this.editing_target_history = history;\n                this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]));\n                this.organization_selections = Object.entries(this.organizations).map(([id, org]) => ({value: org.id, label: org.name}));\n                this.active_pane_is_dirty = false;\n            })\n            this.onSaveSuccessHandler()\n        })).catch(error => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    saveNewOrganizationAndAddAnother(new_data) {\n        this.saving = true\n        new_data.is_active = true;\n        api.createOrganization(new_data).then(result => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = {};\n                this.updateLocalOrganization(result.id, result, {program_count: 0, user_count: 0})\n                this.organizations_listing.shift()\n                delete this.organizations[\"new\"]\n                this.organizations_listing.unshift(result.id)\n                this.editing_target = null\n                this.editing_target_data = {...default_organization}\n                this.bulk_targets = new Map(Object.entries(this.organizations).map(([_, organization]) => [organization.id, false]))\n                this.active_pane_is_dirty = false\n                this.createOrganization()\n            })\n            this.onSaveSuccessHandler()\n        }).catch(error => {\n            runInAction(() => {\n                this.saving = false\n                this.editing_errors = error.response.data\n            })\n            this.onSaveErrorHandler()\n        })\n    }\n\n    @action\n    changeSectorFilter(sectors) {\n        this.filters.sectors = sectors\n    }\n\n    @action\n    changeCountryFilter(countries) {\n        this.filters.countries = countries\n    }\n\n    @action\n    changeProgramFilter(programs) {\n        this.filters.programs = programs\n    }\n\n    @action\n    changeOrganizationFilter(organizations) {\n        this.filters.organizations = organizations\n        // immediately apply changes to the \"find a thing\" filter\n        this.applyFilters();\n    }\n\n    @action\n    changeOrganizationStatusFilter(status) {\n        this.filters.organization_status = status\n    }\n\n    @action\n    changePage(page) {\n        if(this.current_page != page.selected) {\n            this.current_page = page.selected\n            this.fetchOrganizations()\n        }\n    }\n\n    @action\n    toggleBulkTargetsAll() {\n        this.bulk_targets_all = !this.bulk_targets_all;\n        if(this.bulk_targets_all) {\n            this.bulk_targets.forEach((val, key, map) => {\n                map.set(key, true)\n            })\n        } else {\n            this.bulk_targets.forEach((val, key, map) => {\n                map.set(key, false)\n            })\n        }\n    }\n\n    @action\n    toggleEditingTarget(organization_id) {\n        if(this.dirtyConfirm()) {\n            this.editing_target_data = {...default_organization}\n            this.editing_errors = {}\n\n            if(this.editing_target == \"new\") {\n                this.organizations_listing.shift()\n            }\n\n            this.active_editor_pane = 'profile'\n            this.active_pane_is_dirty = false\n\n            if(this.editing_target == organization_id) {\n                this.editing_target = false\n            } else {\n                this.editing_target = organization_id\n                this.fetching_editing_target = true\n                if(!(this.editing_target == 'new')) {\n                    Promise.all([api.fetchOrganization(organization_id), api.fetchOrganizationHistory(organization_id)]).then(([organization, history]) => {\n                        runInAction(() => {\n                            this.fetching_editing_target = false\n                            this.editing_target_data = organization\n                            this.editing_target_history = history\n                        })\n                    })\n                }\n            }\n        }\n    }\n\n    @action\n    toggleBulkTarget(target_id) {\n        this.bulk_targets.set(target_id, !this.bulk_targets.get(target_id))\n    }\n\n    @action\n    clearFilters() {\n        this.filters = {\n            countries: [],\n            organizations: this.filters.organizations || [],\n            programs: [],\n            sectors: [],\n            organization_status: '',\n        }\n    }\n\n    @action\n    toggleChangeLogRowExpando(row_id) {\n        if (this.changelog_expanded_rows.has(row_id)) {\n            this.changelog_expanded_rows.delete(row_id);\n        } else {\n            this.changelog_expanded_rows.add(row_id);\n        }\n    }\n}\n","import React from 'react'\nimport {List, AutoSizer, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Select, {components} from 'react-select'\n\nexport class VirtualizedMenuList extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.cache = new CellMeasurerCache({\n            fixedWidth: true,\n            defaultHeight: 35,\n        })\n        this.filter_val = \"\"\n    }\n\n    render() {\n        const {options, children, maxHeight, getValue, selectProps} = this.props\n        const rowCount = children.length || 0\n\n        //gotta be a way to improve this. it's ok after the first couple of\n        //characters search, but it's slow prior to that\n        if(selectProps.inputValue !== this.filter_val) {\n            this.filter_val = selectProps.inputValue\n            this.cache.clearAll()\n        }\n\n        return (\n            <div style={{display: \"flex\", height: `100vh`, maxHeight: maxHeight+\"px\"}}>\n                <div style={{flex: \"1 1 auto\"}}>\n                    <AutoSizer>\n                    {({width, height}) => {\n                        return <List\n                                height={height}\n                                width={width}\n                                deferredMeasurementCache={this.cache}\n                                rowCount={rowCount}\n                                rowHeight={this.cache.rowHeight}\n                                noRowsRenderer={() => <div>No selections available</div>}\n                                rowRenderer={\n                                    ({index, parent, key, style}) =>\n                                        <CellMeasurer key={key} cache={this.cache} parent={parent} columnIndex={0} rowIndex={index}>\n                                            <div style={style}>{children[index]}</div>\n                                        </CellMeasurer>\n                                }/>\n                    }}\n                    </AutoSizer>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VirtualizedSelect = props => (\n    <Select\n        components={{\n            VirtualizedMenuList,\n        }}\n        {...props} />\n)\n\nexport default VirtualizedSelect\n","\nimport React from 'react'\n\nconst LoadingSpinner = ({children, isLoading, className, ...props}) => {\n    const loading = (isLoading)?'loading':''\n    return <div className={'loading-spinner__container '+loading+' '+(className || '')} {...props}>\n        <div className='loading-spinner__overlay'>\n            <div className='loading-spinner__spinner'></div>\n        </div>\n        {children}\n    </div>\n}\n\nexport default LoadingSpinner\n","import React from 'react';\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport ManagementTable from 'components/management-table'\nimport Pagination from 'components/pagination'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\n\nimport OrganizationEditor from './components/organization_editor'\nimport EditOrganizationProfile from './components/edit_organization_profile'\nimport EditOrganizationHistory from './components/edit_organization_history'\n\nimport LoadingSpinner from 'components/loading-spinner'\nimport FoldingSidebar from 'components/folding-sidebar'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst CountryFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"countries_permitted_filter\">{gettext(\"Countries\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.countries}\n            options={selections}\n            onChange={(e) => store.changeCountryFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"countries_permitted_filter\" />\n    </div>\n})\n\nconst ProgramFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"programs_filter\">{gettext(\"Programs\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.programs}\n            options={selections}\n            onChange={(e) => store.changeProgramFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"programs_filter\" />\n    </div>\n})\n\nconst OrganizationFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"organizations_filter\">{gettext(\"Find an Organization\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.organizations}\n            options={selections}\n            onChange={(e) => store.changeOrganizationFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"organization_filter\" />\n    </div>\n})\n\nconst SectorFilter = observer(({store, selections}) => {\n    return <div className=\"form-group react-multiselect-checkbox\">\n        <label htmlFor=\"sector_filter\">{gettext(\"Sectors\")}</label>\n        <CheckboxedMultiSelect\n            value={store.filters.sectors}\n            options={selections}\n            onChange={(e) => store.changeSectorFilter(e)}\n            placeholder={gettext(\"None Selected\")}\n            id=\"sector_filter\" />\n    </div>\n})\n\nexport const IndexView = observer(\n    ({store}) => {\n        return <div id=\"organization-management-index-view\" className=\"row\">\n            <FoldingSidebar>\n                <div className=\"filter-section\">\n                    <SectorFilter store={store} selections={store.sector_selections} />\n                    <ProgramFilter store={store} selections={store.program_selections} />\n                    <CountryFilter store={store} selections={store.country_selections} />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"status_filter\">{gettext(\"Status\")}</label>\n                        <Select\n                        value={store.filters.organization_status}\n                        options={store.organization_status_options}\n                        onChange={(e) => store.changeOrganizationStatusFilter(e)}\n                        placeholder={gettext(\"None Selected\")}\n                        id=\"status_filter\" />\n                    </div>\n                </div>\n                <div className=\"filter-section filter-buttons\">\n                    <button className=\"btn btn-primary\" onClick={() => store.applyFilters()}>{gettext(\"Apply\")}</button>\n                    <button className=\"btn btn-reset\" onClick={() => store.clearFilters()}>{gettext(\"Reset\")}</button>\n                </div>\n            </FoldingSidebar>\n            <div className=\"col admin-list\">\n                <header className=\"page-title\">\n                    <h1>{gettext(\"Admin:\")} <small>{gettext(\"Organizations\")}</small></h1>\n                </header>\n                <div className=\"admin-list__controls\">\n                    <div className=\"controls__top-filter\">\n                        <OrganizationFilter store={store} selections={store.organization_selections} />\n                    </div>\n                    <div className=\"controls__buttons\">\n                        <a href=\"#\" tabIndex=\"0\" className=\"btn btn-link btn-add\" onClick={() => store.createOrganization()}>\n                            <i className=\"fas fa-plus-circle\"/>{gettext(\"Add Organization\")}\n                        </a>\n                    </div>\n                </div>\n                <LoadingSpinner isLoading={store.fetching}>\n                    <div className=\"admin-list__table\">\n                        <ManagementTable\n                            data={store.organizations_listing.map(id => store.organizations[id])}\n                            keyField=\"id\"\n                            HeaderRow={({Col, Row}) =>\n                                <Row>\n                                    <Col size=\"0.15\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">{gettext(\"Organization\")}</Col>\n                                    <Col>{gettext(\"Programs\")}</Col>\n                                    <Col size=\"1\">{gettext(\"Users\")}</Col>\n                                    <Col size=\"0.25\">{gettext(\"Status\")}</Col>\n                                </Row>\n                            }\n                            Row={({Col, Row, data}) =>\n                                <Row\n                                    expanded={data.id == store.editing_target}\n                                    Expando={observer(({Wrapper}) =>\n                                        <Wrapper>\n                                            <OrganizationEditor\n                                                active_pane={store.active_editor_pane}\n                                                notifyPaneChange={(new_pane) => store.onProfilePaneChange(new_pane)}\n                                                new={data.id == 'new'}\n                                                    ProfileSection={observer(() =>\n                                                        <LoadingSpinner isLoading={store.fetching_editing_target || store.saving}>\n                                                            <EditOrganizationProfile\n                                                                onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                                new={data.id == 'new'}\n                                                                sectorSelections={store.sector_selections}\n                                                                organizationData={store.editing_target_data}\n                                                                errors={store.editing_errors}\n                                                                key={store.editing_target_data.id}\n                                                                onSave={(new_organization_data) => store.updateOrganizationProfile(data.id, new_organization_data)}\n                                                                onSaveNew={(new_organization_data) => store.saveNewOrganization(new_organization_data)}\n                                                                onSaveNewAndAddAnother={(new_organization_data) => store.saveNewOrganizationAndAddAnother(new_organization_data)} />\n                                                        </LoadingSpinner>\n                                                    )}\n                                                    HistorySection={observer(() =>\n                                                        <LoadingSpinner isLoading={store.fetching_editing_target || store.saving}>\n                                                            <EditOrganizationHistory\n                                                                store={store}\n                                                                onIsDirtyChange={is_dirty => store.setActiveFormIsDirty(is_dirty)}\n                                                                organizationData={store.editing_target_data}\n                                                                organizationHistoryData={store.editing_target_history}\n                                                                onSave={(new_organization_data) => store.updateOrganizationProfile(data.id, new_organization_data)}/>\n                                                        </LoadingSpinner>\n                                                    )}\n                                            />\n                                        </Wrapper>\n                                )}>\n                                    <Col size=\"0.15\">\n                                    </Col>\n                                    <Col size=\"2\" className=\"td--stretch\">\n                                        <div className=\"expando-toggle icon__clickable\" onClick={() => store.toggleEditingTarget(data.id)} >\n                                            <div className=\"expando-toggle__icon\">\n                                                <FontAwesomeIcon icon={(store.editing_target == data.id) ? 'caret-down' : 'caret-right'} />\n                                            </div>\n                                            <div className=\"expando-toggle__label\">\n                                                <i className=\"fas fa-building\"/>&nbsp;\n                                                {data.name || \"---\"}\n                                            </div>\n                                        </div>\n                                    </Col>\n                                    <Col size=\"1\" className=\"text-nowrap\">\n                                    {data.program_count ?\n                                        <a href={`/tola_management/program/?organizations[]=${data.id}`}>\n                                            <i className=\"fas fa-cubes\"/>&nbsp;{\n                                                // # Translators: preceded by a number, i.e. \"3 programs\" or \"1 program\"\n                                                interpolate(ngettext(\"%s program\", \"%s programs\", data.program_count), [data.program_count])\n                                            }\n                                        </a> \n                                        : <span><i className=\"fas fa-cubes\"/>&nbsp;{\n                                            // # Translators: when no programs are connected to the item\n                                            gettext(\"0 programs\")}</span>}\n                                    </Col>\n                                    <Col size=\"1\" className=\"text-nowrap\">\n                                    { data.user_count ?\n                                        <a href={`/tola_management/user/?organizations[]=${data.id}`}>\n                                            <i className=\"fas fa-users\"/>&nbsp;{\n                                                // # Translators: preceded by a number, i.e. \"3 users\" or \"1 user\"\n                                                interpolate(ngettext(\"%s user\", \"%s users\", data.user_count), [data.user_count])\n                                            }\n                                        </a>\n                                        : <span><i className=\"fas fa-users\"/>&nbsp;{\n                                            // # Translators: when no users are connected to the item\n                                            gettext(\"0 users\")\n                                        }</span>}\n                                    </Col>\n                                    <Col size=\"0.25\">{data.is_active ? gettext('Active') : gettext('Inactive')}</Col>\n                                </Row>\n                            }\n                        />\n                    </div>\n                </LoadingSpinner>\n                <div className=\"admin-list__metadata\">\n                    <div className=\"metadata__count text-small text-muted\">{store.organizations_count?`${store.organizations_count} ${gettext(\"organizations\")}`:`--`}</div>\n                    <div className=\"metadata__controls\">\n                        {store.total_pages &&\n                         <Pagination\n                            pageCount={store.total_pages}\n                            initialPage={store.current_page}\n                            onPageChange={page => store.changePage(page)} />\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n)\n","import React from 'react'\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false,\n            overflowing: false,\n        }\n        this.ref = React.createRef()\n    }\n\n    componentDidMount() {\n        if(this.ref.current.scrollHeight > this.ref.current.clientHeight) {\n            this.setState({overflowing: true})\n        }\n    }\n\n    toggleExpanded(e) {\n        e.preventDefault()\n        this.setState({\n            expanded: !this.state.expanded\n        })\n    }\n\n    render() {\n        return <div className=\"changelog-entry\">\n            <div ref={this.ref} className=\"changelog-entry__expanding\" style={{height: !this.state.expanded && (this.props.height || 50)}}>\n                {this.props.children}\n            </div>\n            {this.state.overflowing &&\n            <div className=\"changelog-entry__expand-trigger\">\n                <a href=\"\" onClick={(e) => this.toggleExpanded(e)}>{(this.state.expanded)?'Show Less':'Show More'}</a>\n            </div>\n            }\n        </div>\n    }\n}\n\nexport default Expander\n","import React from 'react'\nimport { observer } from 'mobx-react';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport { toJS } from 'mobx'\nimport { EM_DASH } from '../constants';\n\n\nexport const ChangeField = ({name, data, extraTitleText=null}) => {\n    const extraTitle = extraTitleText ? <h4 className=\"disagg-type__title, text-small\" >{extraTitleText}</h4> : null;\n    if (name===\"Disaggregation categories\" && typeof data === 'object' && data !== null) {\n        const sorted_labels = Object.values(data).sort((a,b) => a.custom_sort - b.custom_sort);\n        return <React.Fragment>\n            <strong>{name}: </strong>\n            {extraTitle}\n            <ul className=\"no-list-style\">\n                {sorted_labels.map( (entry, index) => {\n                    return <li key={index}>{(entry.label !== undefined && entry.label !== null) ? entry.label : \"\"}</li>\n                })}\n            </ul>\n        </React.Fragment>\n    }\n\n    else {\n        var change_value;\n        if (data !== undefined && data !== null && data !== \"N/A\") {\n            change_value = <span className=\"change__field__value\">\n            {\n                [\"true\", \"false\"].includes(data.toString())\n                    ? data.toString().replace(\"t\", \"T\").replace(\"f\", \"F\")\n                    : data.toString()\n            }\n            </span>\n        } else {\n            change_value = <span className=\"change__field__value empty-value\">{ EM_DASH }</span>\n        }\n        return <div className=\"change__field\">\n            <strong className=\"change__field__name\">{name}</strong>: {change_value}\n        </div>\n    }\n};\n\nconst ChangeLogEntryHeader = ({data, is_expanded, toggle_expando_cb}) => {\n    // TODO: apply is-expanded dynamically\n    return <tr className={is_expanded ? 'changelog__entry__header is-expanded' : 'changelog__entry__header'} onClick={() => toggle_expando_cb(data.id)}>\n        <td className=\"text-nowrap text-action\">\n            <FontAwesomeIcon icon={is_expanded ? 'caret-down' : 'caret-right'} />&nbsp;<strong>{data.date}</strong>\n        </td>\n        <td className=\"text-nowrap\">{data.admin_user}</td>\n        <td className=\"text-nowrap\">{data.pretty_change_type}</td>\n        <td></td>\n        <td></td>\n    </tr>\n};\n\nconst ChangeLogEntryRow = (props) => {\n    return <tr key={props.id} className=\"changelog__entry__row\">\n                <td></td>\n                <td></td>\n                <td></td>\n                <td>\n                    <div className=\"changelog__change--prev\">\n                        {props.previous}\n                    </div>\n                </td>\n                <td>\n                    <div className=\"changelog__change--new\">\n                        {props.new}\n                    </div>\n                </td>\n            </tr>\n\n};\n\nconst ChangeLogEntryRowBuilder = ({data}) => {\n\n    let allRows = [];\n\n    // We should never need this but just in case someone manages to store a log entry without actual diffs, give them\n    // a soft place to land.\n    const nullRow = <ChangeLogEntryRow previous={gettext(\"No differences found\")} new={null} id={1} key={1}/>\n\n    // If they manage to store a log without any diffs at all, send them to the soft landing place.\n    if ((Array.isArray(data.diff_list) && data.diff_list.length === 0) || (Object.keys(data.diff_list || {}).length === 0)) {\n        allRows.push(nullRow);\n        return allRows\n    }\n\n    if (data.change_type === 'user_programs_updated') {\n        // Create multiple row for program/country changes:\n        if (data.diff_list.base_country) {\n            const previousEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.prev} />\n            const newEntry = <ChangeField name={data.diff_list.base_country.pretty_name} data={data.diff_list.base_country.new} />\n                \n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={\"base_country\"} key={\"base_country\"} />);\n        }\n        Object.entries(data.diff_list.countries).forEach( ([id, country]) => {\n            const key = `${id}_${country}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.prev.country} />\n                {/* # Translators:  Role references a user's permission level when accessing data (i.e. User or Admin) */}\n                <ChangeField name={gettext(\"Role\")} data={country.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Country\")} data={country.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={country.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        });\n        Object.entries(data.diff_list.programs).forEach(([id, program]) => {\n            const key = `${id}_${program}`;\n            const previousEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.prev.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.prev.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.prev.role} />\n            </React.Fragment>;\n            const newEntry = <React.Fragment>\n                <ChangeField name={gettext(\"Program\")} data={program.new.program} />\n                <ChangeField name={gettext(\"Country\")} data={program.new.country} />\n                <ChangeField name={gettext(\"Role\")} data={program.new.role} />\n            </React.Fragment>;\n\n            allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key} />);\n        })\n\n    }\n    else {\n        let extraTitleText = null;\n        let skipDisaggType = false;\n        if (data.pretty_change_type === \"Country disaggregation updated\") {\n            const diff_list = data.diff_list;\n            const disaggType = diff_list.filter((diff) => diff.name === \"disaggregation_type\");\n            if (disaggType[0].prev === disaggType[0].new) {\n                extraTitleText = disaggType[0].prev;\n                skipDisaggType = true;\n            }\n\n        }\n        data.diff_list.forEach((changeSet, id) => {\n            const key = `${id}_${changeSet.pretty_name}`;\n            if (!(changeSet.name === \"disaggregation_type\" && skipDisaggType)) {\n                const previousEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.prev} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n                const newEntry = <React.Fragment>\n                    <ChangeField key={id} name={changeSet.pretty_name} data={changeSet.new} id={id}\n                                 extraTitleText={extraTitleText}/>\n                </React.Fragment>;\n\n                allRows.push(<ChangeLogEntryRow previous={previousEntry} new={newEntry} id={key} key={key}/>);\n            }\n        });\n    }\n\n    // If they manage to store a log with identical values in diffs, send them to the soft landing place.  Hopefully\n    // the system will refuse to log no-difference diffs.\n    if (allRows.length === 0){\n        allRows.push(nullRow)\n    }\n    return allRows;\n\n};\n\nconst ChangeLogEntry = ({data, is_expanded, toggle_expando_cb}) => {\n    return <tbody className=\"changelog__entry\" key={data.id}>\n        <ChangeLogEntryHeader data={data} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        {is_expanded &&\n        <ChangeLogEntryRowBuilder data={data}/>\n        }\n    </tbody>\n};\n\nconst ChangeLog = observer(({data, expanded_rows, toggle_expando_cb}) => {\n    // If expanded_rows is not null/undefined then use it to control expansion/collapse of entries\n    // otherwise, default it to \"open\"\n    return <table className=\"table table-sm bg-white table-bordered text-small changelog\">\n        <thead>\n            <tr>\n                <th className=\"text-nowrap\">{gettext(\"Date\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Admin\")}</th>\n                <th className=\"text-nowrap\">{gettext(\"Change Type\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"Previous Entry\")}</th>\n                <th className=\"text-nowrap td--half-stretch\">{gettext(\"New Entry\")}</th>\n            </tr>\n        </thead>\n        {data.map((entry) => {\n            let is_expanded = true;\n            if (expanded_rows) {\n                is_expanded = expanded_rows.has(entry.id);\n            }\n            return <ChangeLogEntry key={entry.id} data={entry} is_expanded={is_expanded} toggle_expando_cb={toggle_expando_cb} />\n        })}\n    </table>\n});\n\nexport default ChangeLog\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport { observer } from \"mobx-react\"\n\n/***\n    Props:\n\n    - pageCount: total number of pages\n    - initialPage: which page should be highlighted as active initially\n    - onPageChange: a function to receive the newly selected page\n*/\nconst Pagination = (props) => {\n    return <ReactPaginate\n            previousLabel={'‹'}\n            previousClassName={'page-item previous'}\n            previousLinkClassName={'page-link'}\n            nextLabel={'›'}\n            nextClassName={'page-item next'}\n            nextLinkClassName={'page-link'}\n            breakLabel={\"...\"}\n            disabledClassName={'disabled'}\n            breakClassName={'page-item disabled'}\n            breakLinkClassName={'page-link'}\n            pageClassName={'page-item'}\n            pageLinkClassName={'page-link'}\n            marginPagesDisplayed={2}\n            pageRangeDisplayed={5}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n            {...props}/>\n}\n\nexport default Pagination\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class OrganizationEditor extends React.Component {\n\n    updateActivePage(new_page) {\n        if(!this.props.new) {\n            this.props.notifyPaneChange(new_page)\n        }\n    }\n\n    render() {\n        const {ProfileSection, HistorySection, active_pane} = this.props\n\n        const profile_active_class = (active_pane == 'profile')?'active':''\n        const history_active_class = (active_pane == 'status_and_history')?'active':''\n        const new_class = (this.props.new)?'disabled':''\n\n        return (\n            <div className=\"user-editor tab-set--vertical\">\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <a href=\"#\" className={`nav-link ${profile_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('profile')}}>\n                            {gettext(\"Profile\")}\n                        </a>\n                        <a href=\"#\" className={`nav-link ${history_active_class}`}\n                            onClick={(e) => { e.preventDefault(); this.updateActivePage('status_and_history')}}>\n                            {gettext(\"Status and History\")}\n                        </a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    {active_pane == 'profile' &&\n                    <ProfileSection />\n                    }\n\n                    {active_pane == 'status_and_history' &&\n                    <HistorySection />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { observer } from \"mobx-react\"\nimport Select from 'react-select'\nimport {AutoSizer, Table, Column, CellMeasurer, CellMeasurerCache} from 'react-virtualized'\nimport Expander from 'components/expander'\nimport ChangeLog from 'components/changelog'\n\nconst status_options = [\n    {value: true, label: gettext('Active')},\n    {value: false, label: gettext('Inactive')}\n]\n\nexport default class EditOrganizationHistory extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const data = {\n            ...props.organizationData,\n            is_active: status_options.find(op => op.value == props.organizationData.is_active)\n        }\n        this.state = {\n            initial_data: data,\n            data: {...data}\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.data) != JSON.stringify(this.state.initial_data))\n    }\n\n    onChange(new_value) {\n        this.state.data.is_active = new_value\n\n        this.setState({\n            data: this.state.data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    onReset() {\n        this.setState({\n            data: this.state.initial_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    save() {\n        this.props.onSave({\n            ...this.state.data,\n            is_active: this.state.data.is_active.value,\n            sectors: this.state.data.sectors\n        })\n    }\n\n    render() {\n        const {organizationHistoryData, store} = this.props;\n        const changelog_expanded_rows = store.changelog_expanded_rows;\n        return <div className=\"tab-pane--react\">\n            <h2 className=\"no-bold\">{this.state.data.name ? this.state.data.name+\": \": \"\"}{gettext(\"Status and history\")}</h2>\n            <div className=\"form-group\">\n                <label className=\"label--required\" htmlFor=\"organization-status-input\">{gettext(\"Status\")}</label>\n                <Select\n                    options={status_options}\n                    value={this.state.data.is_active}\n                    id=\"organization-status-input\"\n                    onChange={(new_value) => this.onChange(new_value)} />\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.onReset()}>{gettext(\"Reset\")}</button>\n                    </div>\n                </div>\n            </div>\n\n            <ChangeLog data={organizationHistoryData} expanded_rows={changelog_expanded_rows} toggle_expando_cb={(row_id) => store.toggleChangeLogRowExpando(row_id)} />\n\n        </div>\n    }\n}\n","import { observer } from \"mobx-react\"\nimport React from 'react';\nimport classNames from 'classnames';\n\n// TODO: \"size\" is no longer used\nconst ColumnComponent = ({className, size, ...props}) => <td className={[\"mgmt-table__col\", className].join(' ')}  {...props}>{props.children}</td>\n\n// TODO: this is redundant with ColumnComponent\nconst HeaderColumnComponent = ({className, size, ...props}) => <th className={[\"mgmt-table__col\", `mgmt-table__col__width-${size}`, className].join(' ')}  {...props}>{props.children}</th>\n\nconst InnerRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row\", className].join(' ')} {...props}>{props.children}</tr>\n\n// TODO: this is redundant with InnerRowComponent\nconst HeaderRowComponent = ({className, ...props}) => <tr className={[\"mgmt-table__row table-header\", className].join(' ')} {...props}>{props.children}</tr>\n\n/***\n    A wrapper for the rendering of the given row renderer, it takes and expando\n    renderer used to render expanded content\n\n    Props:\n    - expanded: whether the expando content is shown or not\n    - Expando: The content to render when the expando is shown\n*/\nconst RowComponent = observer(({className, expanded, Expando, ...props}) => {\n    if(Expando) {\n        const ObservedExpando = observer(Expando)\n        return <tbody className={\n                classNames([\"mgmt-table__body\", className].join(' '), { \"is-expanded\": expanded })\n            } {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n            {expanded && <ObservedExpando Wrapper={ExpandoWrapper} />}\n        </tbody>\n    } else {\n        return <tbody className={[\"mgmt-table__body\", className].join(' ')} {...props} >\n            <InnerRowComponent>{props.children}</InnerRowComponent>\n        </tbody>\n    }\n})\nconst ExpandoWrapper = ({className, ...props}) => <tr className={[\"mgmt-table__row--expanded\", className].join(' ')} {...props}><td colSpan=\"5\">{props.children}</td></tr>\n\nconst RowList = observer(({data, Row, keyField, ...props}) => {\n    const ObservedRow = observer(Row)\n    return data.map(row_data => <ObservedRow key={row_data[keyField]} data={row_data} Col={ColumnComponent} Row={RowComponent} />)\n})\n\n/*\n   Props:\n\n   - HeaderRow: a function to render the header row. it receives a component\n   prop to render the header column and row\n\n   - Row: a function used to render each row. it receives a component prop to\n    render the row (see RowComponent), it receives the relevant data for that\n    row as a prop: data\n\n   - data: the dataset used to render the table, it must be an array\n\n   - keyField: field to use for key on rows and expando checking\n\n */\nconst ManagementTable = observer(({HeaderRow, className, ...props}) => {\n    const ObservedHeaderRow = observer(HeaderRow)\n    return <table className={['table bg-white', className].join(' ')} >\n        <thead>\n            <ObservedHeaderRow Col={HeaderColumnComponent} Row={HeaderRowComponent}/>\n        </thead>\n        <RowList {...props} />\n    </table>\n})\nexport default ManagementTable\n","const SPANISH = 'es';\nconst FRENCH = 'fr';\nconst ENGLISH = 'en';\n\nfunction flattenArray(arr, depth = 1) {\n    if (depth == 5) {\n        return arr;\n    }\n    let flattened = [];\n    arr.forEach(item => {\n        if (Array.isArray(item)) {\n            flattened = flattened.concat(flattenArray(item, depth+1));\n        } else {\n            flattened.push(item);\n        }\n    });\n    return flattened;\n}\n\nfunction ensureNumericArray(value) {\n    if (!Array.isArray(value)) {\n        value = parseInt(value);\n        if (value && !isNaN(value)) {\n            return [value];\n        }\n        return false;\n    }\n    let arr = value.map(x => parseInt(x)).filter(x => !isNaN(x));\n    if (arr && Array.isArray(arr) && arr.length > 0) {\n        return arr;\n    }\n    return false;\n}\n\n/*\n * Are we loading a cached page? If so, reload to avoid displaying stale indicator data\n * See ticket #1423\n */\nfunction reloadPageIfCached() {\n    // moving the cache check to after page load as firefox calculates transfer size at the end\n    $(function () {\n        let isCached = window.performance.getEntriesByType(\"navigation\")[0].transferSize === 0;\n        //adding a second check to ensure that if for whatever reason teh transfersize reads wrong, we don't reload on\n        //a reload:\n        let isReload = window.performance.getEntriesByType(\"navigation\")[0].type === \"reload\";\n        if (isCached && !isReload) {\n            window.location.reload();\n        }\n    });\n}\n\nconst indicatorManualNumberSort = (levelFunc, numberFunc) => {\n    return (indicatorA, indicatorB) => {\n        let levelA = levelFunc(indicatorA);\n        let levelB = levelFunc(indicatorB);\n        if (levelA && !levelB) {\n            return 1;\n        }\n        if (levelB && !levelA) {\n            return -1;\n        }\n        if (levelA != levelB) {\n            return parseInt(levelA) - parseInt(levelB);\n        }\n        let numberA = (numberFunc(indicatorA) || '').split('.');\n        let numberB = (numberFunc(indicatorB) || '').split('.');\n        for (let i=0; i < Math.max(numberA.length, numberB.length); i++) {\n            if (numberA[i] && numberB[i]) {\n                for (let j=0; j < Math.max(numberA[i].length, numberB[i].length); j++) {\n                    if (numberA[i][j] && numberB[i][j]) {\n                        if (numberA[i].charCodeAt(j) != numberB[i].charCodeAt(j)) {\n                            return numberA[i].charCodeAt(j) - numberB[i].charCodeAt(j);\n                        }\n                    } else if (numberA[i][j]) {\n                        return 1;\n                    } else if (numberB[i][j]) {\n                        return -1;\n                    }\n                }\n            } else if (numberA[i]) {\n                return 1;\n            } else if (numberB[i]) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n\nconst localizeNumber = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    var intPart = val.toString();\n    var floatPart = null;\n    if (val.toString().includes(\",\")) {\n        intPart = val.toString().split(\",\")[0];\n        floatPart = val.toString().split(\",\").length > 1 ? val.toString().split(\",\")[1 ] : null;\n    } else if (val.toString().includes(\".\")) {\n        intPart = val.toString().split(\".\")[0];\n        floatPart = val.toString().split(\".\").length > 1 ? val.toString().split(\".\")[1 ] : null;\n    }\n    floatPart = (floatPart && floatPart.length > 0) ? floatPart : null;\n    var displayValue;\n    switch(window.userLang) {\n        case SPANISH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case FRENCH:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, String.fromCharCode(160)); //nbsp\n            if (floatPart) {\n                displayValue += `,${floatPart}`;\n            }\n        break;\n        case ENGLISH:\n        default:\n            displayValue = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            if (floatPart) {\n                displayValue += `.${floatPart}`;\n            }\n        break;\n    }\n    return displayValue;\n};\n\nconst localizePercent = (val) => {\n    if (val === undefined || val === null || isNaN(parseFloat(val))) {\n        return null;\n    }\n    let percent = localizeNumber(Math.round(val * 10000)/100);\n    return (percent === null) ? null : `${percent}%`;\n}\n\nconst sortObjectListByValue = (objects, key='label') => objects.sort((a, b) => {\n    return a[key].toUpperCase() > b[key].toUpperCase() ? 1 : -1\n})\n\nexport { flattenArray, ensureNumericArray, reloadPageIfCached, indicatorManualNumberSort,\n          localizeNumber, localizePercent, sortObjectListByValue };\n","import axios from 'axios';\n\nexport const api = axios.create({\n    withCredentials: true,\n    baseURL: '/api/',\n    headers: {\n        \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n    }\n});\n","import React from 'react'\nimport Select, {components} from 'react-select'\nimport {VirtualizedMenuList as MenuList} from './virtualized-react-select'\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport CheckboxGroup from 'react-multiselect-checkboxes/lib/CheckboxGroup';\nimport { css } from 'emotion';\nimport {observer} from 'mobx-react'\n\n\n/* JSX Element to display, e.g. \"4 selected\" in a multiselect dropdown */\nconst CountLabel = props => {\n    return (\n        <div className=\"count__label\">\n            {props.children}\n            {(props.clearable &&\n                <div onClick={ props.clearSelect }>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\" />\n                </div>\n              )}\n        </div>\n    );\n        \n}\n\n/*\n * CheckboxGroup drop in replacement that delivers a heading without a checkbox if the optgroup has\n * the attribute \"selectable: false\"\n * Also adds a vertical divider above any optgroup with the attribute divider: true\n */\nfunction Group(props) {\n    if (props.data.selectable === false) {\n        const {\n            children,\n            className,\n            cx,\n            getStyles,\n            Heading,\n            setValue,\n            data,\n            label,\n            getValue,\n            theme,\n            selectProps: { getOptionValue },\n          } = props;\n          let headingProps = {getStyles: getStyles, cx: cx, theme: theme, indeterminate: false, checked: false};\n          return (\n            <div className={cx(css(getStyles('group', props)), { group: true }, className)}>\n                <div className={cx(css(getStyles('groupHeading', {...headingProps})),\n                    {'group-heading': true}, className)}>{props.data.label}</div>\n                <div>{props.children}</div>\n            </div>);\n    }\n    if (props.data.divider === true) {\n        return (<React.Fragment>\n                <hr style={{ margin: '3px 0px 0px 0px' }} />\n                <CheckboxGroup {... props} />\n                </React.Fragment>);\n    }\n    return <CheckboxGroup {... props} />;\n}\n\n\n/*\n *  A wrapper for react-multiselect-checkboxes which implements:\n *      - translated \"n selected\" if multiple options are selected (including a \"noList\" attribute for uncounted selections\n *      - optgroups without checkboxes if {selectable: false} applied to optgroup object\n *      - virtualization (??) - this functionality from external vendor needs verification\n */\n@observer\nclass CheckboxedMultiSelect extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    clearSelect = (e) => {\n        e.stopPropagation();\n        this.props.onChange([]);;\n    }\n\n    makeLabel = (_ref3) => {\n        var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n            thisValue = _ref3.value;\n        if (!thisValue) {\n          return <CountLabel clearable={false}>\n                    {placeholderButtonLabel}\n                </CountLabel>;\n        }\n    \n        if (Array.isArray(thisValue)) {\n            // don't count options with the option attribute noList: true\n            let filteredValues = thisValue.filter(option => !option.noList);\n          if (filteredValues.length === 0) {\n            return <CountLabel clearable={false}>\n                        {placeholderButtonLabel}\n                    </CountLabel>\n          }\n    \n          if (filteredValues.length === 1) {\n            return <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                        {filteredValues[0].label}\n                    </CountLabel>;\n          }\n          return (\n           <CountLabel clearable={true} clearSelect={this.clearSelect}>\n                {\n                    // # Translators: prefixed with a number, as in \"4 selected\" displayed on a multi-select\n                    \"\".concat(filteredValues.length,\" \", gettext(\"selected\"))}\n            </CountLabel>\n            );\n        }\n    \n        return <CountLabel clearable={false}>\n                    {thisValue.label}\n               </CountLabel>;\n      };\n      render() {\n        return <ReactMultiSelectCheckboxes\n                { ...this.props}\n                placeholder={\n                    // # Translators: placeholder text in a search box\n                    gettext(\"Search\")}\n                placeholderButtonLabel={ this.props.placeholder }\n                getDropdownButtonLabel={ this.makeLabel }\n                components={{MenuList, Group }}\n                />;\n      }\n}\n\nexport default CheckboxedMultiSelect\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {OrganizationStore} from './models';\nimport {IndexView} from './views';\n\nconst app_root = '#app_root'\n\n\n/*\n * Model/Store setup\n */\nconst store = new OrganizationStore(\n    jsContext.programs,\n    jsContext.organizations,\n    jsContext.sectors,\n    jsContext.countries,\n    jsContext.country_filter,\n    jsContext.program_filter,\n)\n\nReactDOM.render(\n    <IndexView store={store} />,\n    document.querySelector(app_root)\n)\n","import React from 'react'\n\n/* Sidebar expando/collapso mimicking bootstrap behavior\n * CSS in components/_folding_sidebar.scss\n * Usage: <FoldingSidebar>\n *          children to be hidden when toggle is clicked\n *         </FoldingSidebar>\n */\n\nclass FoldingSidebar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            folding: false,\n            folded: false,\n            resize: false\n        };\n        this.contentsContainer = React.createRef();\n    }\n\n    componentDidMount() {\n        this.contentWidth = this.contentsContainer.current.offsetWidth;\n        window.addEventListener(\"resize\", this.updateDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n    }\n\n    updateDimensions = () => {\n        if (!this.state.folded && !this.state.folding) {\n            this.setState(() => ({resize: true}),\n                          () => {\n                            this.contentWidth = this.contentsContainer.current.offsetWidth;\n                            this.setState({resize: false});\n                          });\n        }\n    }\n\n    toggleFolded() {\n        if (!this.state.folding) {\n            this.setState(\n                {folding: true,\n                 folded: !this.state.folded});\n        } else {\n            this.foldComplete();\n        }\n    }\n\n    foldComplete() {\n        this.setState(() => ({folding: false}), this.updateDimensions);\n    }\n\n    render() {\n        const {className, ...props} = this.props\n        const icon = this.state.folded\n                     ? this.state.folding\n                        ? \"fa-angle-double-left\" : \"fa-chevron-right\"\n                     : this.state.folding\n                        ? \"fa-angle-double-right\" : \"fa-chevron-left\";\n        const width = this.state.folded ? \"0px\" : this.state.resize ? \"auto\" : this.contentWidth + \"px\";\n        const overflow = (this.state.folded || this.state.folding) ? \"hidden\" : \"visible\";\n        return (\n        <div className={\"folding-sidebar \"+(className || '')} {...props}>\n            <div className={\"folding-sidebar__contents\"}\n                 onTransitionEnd={() => this.foldComplete()}\n                 ref={this.contentsContainer}\n                style={{width: width, overflow: overflow }}\n            >\n                <React.Fragment>{this.props.children}</React.Fragment>\n            </div>\n            <div className=\"folding-sidebar__trigger\" onClick={() => this.toggleFolded()}>\n                <i key={icon}><span className={\"fa \"+icon}></span></i>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default FoldingSidebar\n","/* Site-wide constants */\n\n\n/**\n * JS_GLOBALS is in base.html (base Tola template) - delivered by middleware from the backend\n * this function returns the global constant for a given key (i.e. 'reason_for_change_options')\n */\n\nfunction getGlobal(key) {\n    if ((typeof JS_GLOBALS !== 'undefined')  && JS_GLOBALS.hasOwnProperty(key)) {\n        return JS_GLOBALS[key];\n    }\n    return null;\n}\n\n\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\nconst EM_DASH = \"—\";\nconst BLANK_TABLE_CELL = EM_DASH;\n\n\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nconst TIME_AWARE_FREQUENCIES = [3, 4, 5, 6, 7];\nconst IRREGULAR_FREQUENCIES = [1, 2];\n\nconst TVA_FREQUENCY_LABELS = Object.freeze(\n    {\n        1: gettext(\"Life of Program (LoP) only\"),\n        2: gettext(\"Midline and endline\"),\n        3: gettext(\"Annual\"),\n        4: gettext(\"Semi-annual\"),\n        5: gettext(\"Tri-annual\"),\n        6: gettext(\"Quarterly\"),\n        7: gettext(\"Monthly\")\n    }\n);\n\nconst TIMEPERIODS_FREQUENCY_LABELS = Object.freeze(\n    {\n        3: gettext(\"Years\"),\n        4: gettext(\"Semi-annual periods\"),\n        5: gettext(\"Tri-annual periods\"),\n        6: gettext(\"Quarters\"),\n        7: gettext(\"Months\")\n    }\n);\n\nexport { BLANK_OPTION, BLANK_LABEL, BLANK_TABLE_CELL, EM_DASH, TVA, TIMEPERIODS, TIME_AWARE_FREQUENCIES,\n         IRREGULAR_FREQUENCIES, TVA_FREQUENCY_LABELS, TIMEPERIODS_FREQUENCY_LABELS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nfunction getPeriodLabels() {\n    return {\n        targetperiodLabels: {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        },\n        timeperiodLabels: {\n            3: _gettext(\"Years\"),\n            5: _gettext(\"Tri-annual periods\"),\n            4: _gettext(\"Semi-annual periods\"),\n            7: _gettext(\"Months\"),\n            6: _gettext(\"Quarters\")\n        }\n    };\n}\n\nexport {getPeriodLabels};\n\nexport const STATUS_CODES = {\n    NO_INDICATOR_IN_UPDATE: 1\n};\n\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n    nonReporting: 8\n});\n\nexport const RFC_OPTIONS = getGlobal('reason_for_change_options') ?? [];","import React from 'react'\nimport CheckboxedMultiSelect from 'components/checkboxed-multi-select'\nimport { observer } from \"mobx-react\"\n\n@observer\nexport default class EditOrganizationProfile extends React.Component {\n    constructor(props) {\n        super(props)\n        const o = props.organizationData\n        const {sectorSelections} = props\n        const data = {\n            ...o,\n            sectors: sectorSelections.filter(sectorOption => o.sectors.includes(sectorOption.value))\n        }\n\n        this.state = {\n            initial_data: data,\n            managed_data: {...data}\n        }\n    }\n\n    hasUnsavedDataAction() {\n        this.props.onIsDirtyChange(JSON.stringify(this.state.managed_data) != JSON.stringify(this.state.initial_data))\n    }\n\n    save() {\n        this.props.onSave({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    saveNew(e) {\n        e.preventDefault()\n        this.props.onSaveNew({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    saveNewAndAddAnother(e) {\n        e.preventDefault()\n        this.props.onSaveNewAndAddAnother({...this.state.managed_data, sectors: this.state.managed_data.sectors.map(sector => sector.value)})\n    }\n\n    resetForm() {\n        this.setState({\n            managed_data: this.state.initial_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateName(new_name) {\n        let new_data = this.state.managed_data\n        new_data.name = new_name\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateSectors(new_sectors) {\n        let new_data = this.state.managed_data\n        new_data.sectors = new_sectors\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updatePrimaryAddress(new_address) {\n        let new_data = this.state.managed_data\n        new_data.primary_address = new_address\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updatePrimaryContactName(new_name) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_name = new_name\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updatePrimaryContactEmail(new_email) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_email = new_email\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updatePrimaryContactPhone(new_phone) {\n        let new_data = this.state.managed_data\n        new_data.primary_contact_phone = new_phone\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    updateModeOfContact(new_mode_of_contact) {\n        let new_data = this.state.managed_data\n        new_data.mode_of_contact = new_mode_of_contact\n        this.setState({\n            managed_data: new_data\n        }, () => this.hasUnsavedDataAction())\n    }\n\n    render() {\n        let od = this.state.managed_data\n        let errors = this.props.errors\n        let error_classes = {\n            name: (errors.name)?'is-invalid':'',\n            primary_address: (errors.primary_address)?'is-invalid':'',\n            primary_contact_name: (errors.primary_contact_name)?'is-invalid':'',\n            primary_contact_email: (errors.primary_contact_email)?'is-invalid':'',\n            primary_contact_phone: (errors.primary_contact_phone)?'is-invalid':'',\n        }\n        return (\n            <div className=\"tab-pane--react\">\n                <h2 className=\"no-bold\">{od.name ? od.name+\": \": \"\"}{gettext(\"Profile\")}</h2>\n                <form className=\"form needs-validation\" noValidate>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"organization-name-input\">{gettext(\"Organization name\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.name}\n                            onChange={(e) => this.updateName(e.target.value) }\n                            className={\"form-control \"+error_classes.name}\n                            id=\"organization-name-input\"\n                            required />\n                        {errors.name &&\n                        <div className=\"invalid-feedback\">\n                            {errors.name}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group react-multiselect-checkbox\">\n                        <label htmlFor=\"sectors-input\">Sectors</label>\n                        <CheckboxedMultiSelect\n                            value={od.sectors}\n                            options={this.props.sectorSelections}\n                            onChange={(e) => this.updateSectors(e)}\n                            placeholder={gettext(\"None Selected\")}\n                            id=\"sectors-input\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"primary-address-input\">{gettext(\"Primary Address\")}</label>\n                        <textarea\n                            value={od.primary_address}\n                            onChange={(e) => this.updatePrimaryAddress(e.target.value)}\n                            className={\"form-control \"+error_classes.primary_address}\n                            id=\"primary-address-input\"\n                            required />\n                        {errors.primary_address &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_address}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"primary-contact-name-input\">{gettext(\"Primary Contact Name\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_name}\n                            onChange={(e) => this.updatePrimaryContactName(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_name}\n                            id=\"primary-contact-name-input\"\n                            required />\n                        {errors.primary_contact_name &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_name}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"primary-contact-email-input\">{gettext(\"Primary Contact Email\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_email}\n                            onChange={(e) => this.updatePrimaryContactEmail(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_email}\n                            id=\"primary-contact-email-input\"\n                            required />\n                        {errors.primary_contact_email &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_email}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"label--required\" htmlFor=\"primary-contact-phone-input\">{gettext(\"Primary Contact Phone Number\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.primary_contact_phone}\n                            onChange={(e) => this.updatePrimaryContactPhone(e.target.value) }\n                            className={\"form-control \"+error_classes.primary_contact_phone}\n                            id=\"primary-contact-phone-input\"\n                            required />\n                        {errors.primary_contact_phone &&\n                        <div className=\"invalid-feedback\">\n                            {errors.primary_contact_phone}\n                        </div>\n                        }\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"mode-of-contact-input\">{gettext(\"Preferred Mode of Contact\")}</label>\n                        <input\n                            type=\"text\"\n                            value={od.mode_of_contact}\n                            onChange={(e) => this.updateModeOfContact(e.target.value) }\n                            className=\"form-control\"\n                            id=\"mode-of-contact-input\" />\n                    </div>\n                    {this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.saveNew(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-secondary\" onClick={(e) => this.saveNewAndAddAnother(e)}>{gettext(\"Save and Add Another\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                    {!this.props.new &&\n                    <div className=\"form-group btn-row\">\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={(e) => this.save(e)}>{gettext(\"Save Changes\")}</button>\n                        <button className=\"btn btn-reset\" type=\"button\" onClick={() => this.resetForm()}>{gettext(\"Reset\")}</button>\n                    </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n","import {api} from '../../../api';\n\nexport const fetchOrganizationsWithFilter = (page, filters) => api.get('/tola_management/organization/', {params: {page: page, ...filters}}).then(response => {\n    let data = response.data\n    let total_results_count = data.count\n    let current_results_count = data.results.length\n    let total_pages = data.page_count\n\n    return {\n        organizations: data.results,\n        total_pages: total_pages,\n        total_organizations: total_results_count,\n        next_page: data.next,\n        prev_page: data.previous\n    }\n})\n\nexport const fetchOrganization = (id) => api.get(`/tola_management/organization/${id}/`).then(response => response.data)\n\nexport const updateOrganization = (id, new_data) => api.put(`/tola_management/organization/${id}/`, {\n    ...new_data,\n}).then(response => response.data)\n\nexport const createOrganization = (new_data) => api.post(`/tola_management/organization/`, {\n    ...new_data,\n}).then(response => response.data)\n\nexport const fetchOrganizationAggregates = id => api.get(`/tola_management/organization/${id}/aggregate_data/`).then(response => response.data)\n\nexport const fetchOrganizationHistory = id => api.get(`/tola_management/organization/${id}/history/`).then(response => response.data)\n\nexport default {\n    fetchOrganizationsWithFilter,\n    fetchOrganization,\n    fetchOrganizationHistory,\n    fetchOrganizationAggregates,\n    updateOrganization,\n    createOrganization,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAahEA;AAAA;AAAA;AAkEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1EA;AAAA;AAAA;AA6EA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AApFA;AAAA;AAAA;AAuFA;AAAA;AAAA;AAAA;AACA;AAxFA;AAAA;AAAA;AA2FA;AAAA;AAAA;AAAA;AACA;AA5FA;AAAA;AAAA;AA+FA;AACA;AAhGA;AAAA;AAAA;AAoGA;AACA;AACA;AACA;AACA;AAxGA;AAAA;AAAA;AA2GA;AACA;AA5GA;AAAA;AAAA;AA+GA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AAnIA;AAAA;AAAA;AAuIA;AACA;AACA;AACA;AA1IA;AAAA;AAAA;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjKA;AAAA;AAAA;AAoKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAvLA;AAAA;AAAA;AA0LA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAhBA;AAiBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AApNA;AAAA;AAAA;AAuNA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhPA;AAAA;AAAA;AAoPA;AACA;AArPA;AAAA;AAAA;AAyPA;AACA;AA1PA;AAAA;AAAA;AA8PA;AACA;AA/PA;AAAA;AAAA;AAmQA;AACA;AACA;AACA;AAtQA;AAAA;AAAA;AA0QA;AACA;AA3QA;AAAA;AAAA;AA+QA;AACA;AACA;AACA;AACA;AAnRA;AAAA;AAAA;AAuRA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjSA;AAAA;AAAA;AAoSA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhUA;AAAA;AAAA;AAoUA;AACA;AArUA;AAAA;AAAA;AAyUA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAhVA;AAAA;AAAA;AAoVA;AACA;AACA;AACA;AACA;AACA;AAzjBA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AACA;AATA;AAAA;AAAA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AARA;AAaA;AAKA;AA5CA;AACA;AADA;AAAA;AACA;AA8CA;AAAA;AAEA;AACA;AADA;AADA;AADA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACbcA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAFA;AAlBA;AAFA;AAFA;AAmCA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAEA;AAGA;AAAA;AA1EA;AAbA;AA6FA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChNA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAlCA;AACA;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAKA;AAAA;AAMA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;ACpMA;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CA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AAGA;AAEA;AAAA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AATA;AAaA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA1NA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAbA;AAeA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAFA;AAIA;AAAA;AAEA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;A","sourceRoot":""}