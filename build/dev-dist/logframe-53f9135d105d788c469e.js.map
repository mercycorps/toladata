{"version":3,"file":"logframe-53f9135d105d788c469e.js","sources":["webpack:///./js/pages/logframe/index.js","webpack:///./js/pages/logframe/components/title.js","webpack:///./js/pages/logframe/components/subtitle.js","webpack:///./js/pages/logframe/components/headers.js","webpack:///./js/pages/logframe/models/programStore.js","webpack:///./js/pages/logframe/components/main.js","webpack:///./js/components/selectWidgets.js","webpack:///./js/formUtils.js","webpack:///./js/level_utils.js","webpack:///./js/pages/logframe/models/filterStore.js","webpack:///./js/constants.js","webpack:///./js/pages/logframe/components/table.js"],"sourcesContent":["/**\n * Entry point for the logframe webpack bundle\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport FilterStore from './models/filterStore';\nimport ProgramStore from './models/programStore';\nimport TitleBar from './components/title';\nimport LogframeApp from './components/main';\n\nconst filterStore = new FilterStore();\nconst dataStore = new ProgramStore(jsContext);\n\nReactDOM.render(\n    <Provider filterStore={ filterStore }\n              dataStore={ dataStore }>\n        <TitleBar />\n    </Provider>,\n    document.querySelector('.region-header'));\n\nReactDOM.render(\n    <Provider filterStore={ filterStore }\n              dataStore={ dataStore }>\n        <LogframeApp />\n    </Provider>,\n    document.querySelector('#id_div_content'));","import React from 'react';\nimport { inject } from 'mobx-react';\n\nconst ExcelButton = inject('filterStore')(\n    ({ filterStore }) => {\n        const clickHandler = filterStore.excelUrl ?\n            () => { window.open(filterStore.excelUrl, '_blank') } :\n            (e) => { e.preventDefault(); };\n        return (\n            <button type=\"button\"\n                    className=\"btn btn-sm btn-secondary\"\n                    onClick={ clickHandler }\n                    disabled={ !filterStore.excelUrl }>\n                <i className=\"fas fa-download\"></i> Excel\n            </button>\n        );\n    }\n);\n\nconst TitleBar = inject('dataStore')(\n    ({ dataStore }) => {\n        return (\n        <React.Fragment>\n            <div className=\"logframe--header\">\n                <h1 className=\"page-title h2\">\n                    <a href={ dataStore.program_page_url }>{ dataStore.name }:</a>\n                    &nbsp;\n                    <span className=\"font-weight-normal text-muted text-nowrap\">\n                        {\n                            // # Translators: short for \"Logistical Framework\"\n                            gettext('Logframe')\n                        }\n                        &nbsp;\n                        <small><i className=\"fas fa-table\"></i></small>\n                    </span>\n                </h1>\n            </div>\n            <ExcelButton />\n        </React.Fragment>\n        );\n    }\n)\n\nexport default TitleBar;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { GroupBySelect } from '../../../components/selectWidgets';\n\n\nconst SubTitleRow = inject('dataStore', 'filterStore')(\n    observer(({ dataStore, filterStore }) => {\n        return (\n            <div className=\"logframe__subheader\">\n                { dataStore.results_framework &&\n                    <a href={ dataStore.results_framework_url }>\n                        <i className=\"fas fa-sitemap\"></i>&nbsp;\n                        {\n                            gettext('View results framework')\n                        }\n                    </a>\n                }\n                { dataStore.results_framework &&\n                    <GroupBySelect\n                        chainLabel={ dataStore.rf_chain_sort_label }\n                        value={ filterStore.groupBy }\n                        update={ e => { filterStore.setGroupBy(e.target.value); } }\n                        labelClass=\"col-form-label text-append-colon\"\n                        formGroupClass=\"form-row inline-select\"\n                    />\n                }\n            </div>\n        )\n    })\n)\n\nexport default SubTitleRow;\n","import React from 'react';\n\nconst HeaderCell = ({ label }) => {\n    return (\n        <th className=\"text-nowrap\">\n            { label }\n        </th>\n    );\n}\n\nconst HeaderRow = ({ headers }) => {\n    return (\n        <thead>\n            <tr className=\"logframe__table__header\">\n                { headers.map((label, idx) => <HeaderCell label={ label } key={ idx } />) }\n            </tr>\n        </thead>\n    );\n}\n\nexport default HeaderRow;\n","/**\n * Program data for logframe view\n */\nimport { GROUP_BY_CHAIN, GROUP_BY_LEVEL } from '../../../constants';\n\nclass Indicator {\n    constructor(indicatorData) {\n        this.pk = indicatorData.pk;\n        this.level_order = indicatorData.level_order;\n        this.level = indicatorData.level || false;\n        this.name = indicatorData.name;\n        this.level_order_display = indicatorData.level_order_display;\n        this.means_of_verification = indicatorData.means_of_verification;\n        this.manualNumbering = !indicatorData.auto_number_indicators;\n        this.number = indicatorData.number || false;\n    }\n}\n\nclass Level {\n    constructor(levelData) {\n        this.pk = levelData.pk;\n        this.display_name = levelData.display_name;\n        this.level_depth = levelData.level_depth;\n        this.ontology = levelData.ontology;\n        this.display_ontology = levelData.display_ontology;\n        this.indicators = [];\n        if (levelData.indicators && Array.isArray(levelData.indicators)) {\n            this.indicators = levelData.indicators.map(\n                indicatorData => new Indicator(indicatorData)\n            );\n        }\n        this.indicators.sort((indicator_a, indicator_b) => {\n            return (indicator_a.level_order < indicator_b.level_order) ? -1\n                        : (indicator_b.level_order < indicator_a.level_order) ? 1 : 0;\n        });\n        this.assumptions = levelData.assumptions;\n        this.child_levels = levelData.child_levels || [];\n\n    }\n}\n\nclass ProgramStore {\n    _levelsByPk = {};\n    _levelsByChain = [];\n    _levelsByTier = [];\n    _unassignedIndicators = [];\n\n    constructor(programData) {\n        this.name = programData.name;\n        this.results_framework = programData.results_framework;\n        this.results_framework_url = this.results_framework ? programData.results_framework_url : false;\n        this.program_page_url = programData.program_page_url;\n        this.rf_chain_sort_label = this.results_framework ? programData.rf_chain_sort_label : false;\n        if (programData.unassigned_indicators && Array.isArray(programData.unassigned_indicators)) {\n            this._unassignedIndicators = programData.unassigned_indicators.map(\n                indicatorData => new Indicator(indicatorData)\n            );\n        }\n        if (programData.levels && Array.isArray(programData.levels)) {\n            programData.levels.forEach(\n                level => {\n                    let levelObj = new Level(level);\n                    this._levelsByPk[levelObj.pk] = levelObj;\n                    this._levelsByChain.push(levelObj.pk);\n                    this._levelsByTier.push(levelObj.pk);\n                }\n            );\n            this._levelsByTier.sort((level_a, level_b) => {\n                return (this._levelsByPk[level_a].level_depth < this._levelsByPk[level_b].level_depth) ? -1\n                            : (this._levelsByPk[level_b].level_depth < this._levelsByPk[level_a].level_depth) ? 1\n                                : (this._levelsByPk[level_a].ontology < this._levelsByPk[level_b].ontology) ? -1\n                                    : (this._levelsByPk[level_b].ontology < this._levelsByPk[level_a].ontology) ? 1 : 0;\n            });\n            let sortedByChain = [];\n            this._levelsByChain.filter(\n                levelpk => this._levelsByPk[levelpk].level_depth == 1\n            ).forEach(\n                levelpk => {\n                    sortedByChain = sortedByChain.concat(this.getChildLevels(levelpk));\n                }\n            );\n            this._levelsByChain = sortedByChain;\n        }\n\n    }\n\n    getChildLevels = (levelpk) => {\n        let levels = [levelpk];\n        this._levelsByPk[levelpk].child_levels.forEach(\n            child_pk => {\n                levels = levels.concat(this.getChildLevels(child_pk));\n            }\n        );\n        return levels;\n    }\n\n    getLevelsGroupedBy = (grouping) => {\n        if (parseInt(grouping) === GROUP_BY_CHAIN) {\n            return this._levelsByChain.map(\n                pk => this._levelsByPk[pk]\n            )\n        } else if (parseInt(grouping) === GROUP_BY_LEVEL) {\n            return this._levelsByTier.map(\n                pk => this._levelsByPk[pk]\n            )\n        }\n        return Object.values(this._levelsByPk);\n    }\n\n    get unassignedIndicators() {\n        if (!this._unassignedIndicators || this._unassignedIndicators.length == 0) {\n            return [];\n        }\n        return this._unassignedIndicators;\n    }\n\n}\n\nexport default ProgramStore;\n","import React from 'react';\nimport { inject } from 'mobx-react';\nimport SubTitleRow from './subtitle';\nimport LogframeTable from './table';\n\n\nconst LogframeApp = () => {\n    return (\n        <React.Fragment>\n            <SubTitleRow />\n            <table className=\"logframe__table table table-sm table-bordered bg-white text-small\">\n                <LogframeTable />\n            </table>\n        </React.Fragment>\n    );\n}\n\nexport default LogframeApp;\n","import React from 'react';\nimport Select from 'react-select';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport { uniqueId } from '../formUtils';\nimport { GROUP_BY_CHAIN, GROUP_BY_LEVEL } from '../constants';\n\n\n\nexport const SingleReactSelect = ( props ) => {\n    let selectId = uniqueId('react-select');\n    let labelClasses = props.labelClasses || \"col-form-label text-uppercase\";\n    let formRowClasses = props.formRowClasses || \"form-row mb-3\";\n    let selectClasses = props.selectClasses || \"tola-react-select\";\n    return (\n        <div className={ formRowClasses }>\n            <label\n                htmlFor={ selectId }\n                className={ labelClasses }>\n                    { props.label }\n            </label>\n            <Select\n                onChange={ props.update }\n                value={ props.value }\n                id={ selectId }\n                className={ selectClasses }\n                isDisabled={ props.disabled }\n                options={ props.options }\n            />\n        </div>\n    );\n}\n\nexport const DateSelect = ( props ) => {\n    let selectId = uniqueId('date-select');\n    let formattedOptions =\n        (props.options && props.options.length == 1 && props.options[0].value !== undefined) ?\n            <option value={ props.options[0].value }>{ props.options[0].label }</option> :\n            (props.options && props.options.length > 0 && props.options[0].options && props.options[0].options !== undefined) ?\n                props.options.map(\n                    (optgroup, index) => {\n                        return <optgroup label={ optgroup.label } key={ index }>\n                                    {optgroup.options.map(\n                                        option => (<option value={ option.value } key={ option.value }>\n                                                        { option.label }\n                                                   </option>)\n                                        )\n                                    }\n                                </optgroup>\n                        }) :\n                props.options.map(\n                    (option, index) => {\n                        return <option value={ option.value } key={ index }>{ option.label }</option>;\n                    }\n                );\n\n    return (\n        <div className=\"form-row mb-3\">\n            <label\n                htmlFor={ selectId }\n                className=\"col-form-label text-uppercase\">\n                    { props.label }\n            </label>\n            <select\n                className=\"form-control\"\n                id={ selectId }\n                value={ props.value }\n                onChange = { props.update }\n                disabled = { props.disabled }>\n                { formattedOptions }\n            </select>\n        </div>\n    );\n}\n\nexport const SingleSelect = ( props ) => {\n    let selectId = uniqueId('react-select');\n    let formGroupClass = props.formGroupClass || \"form-row mb-3\";\n    let labelClass = props.labelClass || \"col-form-label text-uppercase\";\n    let selectClass = props.selectClass || \"form-control\";\n    return (\n        <div className={ formGroupClass }>\n            <label\n                htmlFor={ selectId }\n                className={ labelClass }>\n                    { props.label }\n            </label>\n            <select\n                onChange={ props.update }\n                value={ props.value }\n                id={ selectId }\n                className={ selectClass }\n                disabled={ props.disabled }>\n                { props.options }\n            </select>\n        </div>\n    );\n}\n\n\n/**\n * styling element to replace OptGroup headings in react multiselect checkbox widgets - used for\n * MultiSelectCheckbox when optgroups are required\n */\nconst GroupHeading = (props) => {\n    if (props.children == '') {\n        return <div></div>;\n    } else {\n        return (\n            <React.Fragment>\n                <hr style={{ margin: '3px 0px 0px 0px' }} />\n                <div className=\"text-muted\"\n                     style={{ textTransform: 'uppercase',\n                              paddingLeft: '4px',\n                              marginBottom: '2px'}}>\n                    { props.children }\n                </div>\n            </React.Fragment>\n            );\n    }\n}\n\n\n/**\n * Styles ReactMultiSelectCheckbox to fit Tola styles\n */\nexport const MultiSelectCheckbox = ( props ) => {\n    const selectId = uniqueId('multiselect');\n    const blankOptions = (!props.options ||\n                          props.options.length == 0 ||\n                         (props.options.length == 1 && props.options[0].value === null));\n    const multiSelectProps = blankOptions ?\n            {\n                getDropdownButtonLabel: () => gettext('None available'),\n                isDisabled: true,\n                menuIsOpen: false,\n                options: [],\n            } :\n            {\n                isMulti: true,\n                options: props.options,\n                getDropdownButtonLabel: (_ref) => {\n                    if (!_ref.value) {\n                        return gettext('None selected');\n                    }\n                    if (Array.isArray(_ref.value)) {\n                        let options = _ref.value.filter(option => !option.noList);\n                        if (options.length == 0) {\n                            return gettext('None selected');\n                        }\n                        if (options.length == 1) {\n                            return options[0].label;\n                        }\n                        return `${options.length}  ${gettext('selected')}`;\n                    }\n                    return _ref.value.label;\n                }\n            };\n    const baseStyles = {\n        dropdownButton: base => blankOptions ? { ...base, backgroundColor: '#E5E6E8', background: '' } : base,\n        option: (provided, state) => ({\n                ...provided,\n                padding: '1px 12px',\n                display: 'inline-block'\n            }),\n        container: (provided, state) => ({\n                ...provided,\n                backgroundColor: '#f5f5f5'\n            }),\n    };\n    const formatOptionLabel = (props) => {\n        return <div style={{ display: \"inline-block\" , float: \"right\", width: \"90%\"}}>{props.label}</div>;\n    };\n    return (\n        <div className=\"form-row mb-2 tola-react-multiselect-row\">\n            <label htmlFor={ selectId } className=\"col-form-label text-uppercase\">\n                { props.label }\n            </label>\n            <ReactMultiSelectCheckboxes\n                id={ selectId }\n                styles={ baseStyles }\n                formatOptionLabel = { formatOptionLabel }\n                components={{ GroupHeading }}\n                value={ props.value }\n                onChange={ props.update }\n                { ...multiSelectProps }\n            />\n        </div>\n    );\n}\n\nexport const GroupBySelect = ({ chainLabel, ...selectProps }) => {\n    let options = [\n        <option value={ GROUP_BY_CHAIN } key={1}>{ chainLabel }</option>,\n        <option value={ GROUP_BY_LEVEL } key={2}>{\n            /* # Translators: refers to grouping the report by the level of the indicator */\n            gettext('by Level')\n        }</option>\n    ];;\n    return <SingleSelect\n                label={\n                    /* # Translators: menu for selecting how rows are grouped in a report */\n                    gettext('Group indicators')\n                }\n                options={ options }\n                { ...selectProps }\n            />;\n}\n","/*\n * ID generating code &c. for form inputs\n */\n\nlet lastId = 0;\n\nexport function uniqueId (prefix='id') {\n    lastId++;\n    return `${prefix}${lastId}`;\n}","\n// Returns a trimmed level ontology for display purposes\nexport function trimOntology(ontologyStr) {\n    let ontologyArray = ontologyStr.split(\".\");\n    return ontologyArray.slice(1).filter(i => i > 0).join(\".\")\n}\n\n\n/*************  IMPORTANT!!!!!\n * Thee templates need to be in a .js file so the translation machinery picks them up and puts them into the\n * translated strings provided to the front-end.  If you make changes here, make sure to also make them\n * in the LevelTier model in indicators/models.py.  No need to duplicate the translator comments.\n */\n\nconst rf_templates = {'mc_standard': {\n        // Translators: Name of the most commonly used organizational hierarchy of KPIs at Mercy Corps.\n        'name': gettext('Mercy Corps'),\n        'tiers': [\n            gettext('Goal'),\n            gettext('Outcome'),\n            gettext('Output'),\n            gettext('Activity')]},\n    'dfid': {\n        'name': gettext('Department for International Development (DFID)'),\n        'tiers': [\n            gettext('Impact'),\n            gettext('Outcome'),\n            gettext('Output'),\n            gettext('Input')]},\n    'ec': {\n        'name': gettext('European Commission (EC)'),\n        'tiers': [\n            gettext('Overall Objective'),\n            gettext('Specific Objective'),\n            gettext('Purpose'),\n            gettext('Result'),\n            gettext('Activity')]},\n    'usaid1': {\n        'name': gettext('USAID 1'),\n        'tiers': [\n            gettext('Goal'),\n            gettext('Purpose'),\n            gettext('Sub-Purpose'),\n            gettext('Output'),\n            gettext('Input')]},\n    'usaid2': {\n        'name': gettext('USAID 2'),\n        'tiers': [\n            gettext('Strategic Objective'),\n            gettext('Intermediate Result'),\n            gettext('Sub-Intermediate Result'),\n            gettext('Output'),\n            gettext('Input')]},\n    'usaid_ffp': {\n        'name': gettext('USAID FFP'),\n        'tiers': [\n            gettext('Goal'),\n            gettext('Purpose'),\n            gettext('Sub-Purpose'),\n            gettext('Intermediate Outcome'),\n            gettext('Output')]},\n}\n","/**\n * Filters for the logframe web view\n */\n\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\nimport { observable, computed } from 'mobx';\nimport { GROUP_BY_CHAIN, GROUP_BY_LEVEL } from '../../../constants';\n\n\nclass FilterStore {\n    @observable groupBy = null;\n    routes = [\n        {\n            name: 'logframe',\n            path: '/:programId<\\\\d+>/logframe/?groupby',\n            defaultParams: {\n                'groupby': 1\n            }\n        },\n        {\n            name: 'logframe-excel',\n            path: '/:programId<\\\\d+>/logframe_excel/?groupby'\n        }\n    ];\n\n    constructor() {\n        this.router = createRouter(this.routes, {trailingSlashMode: 'always'});\n        this.router.usePlugin(browserPlugin({useHash: false, base: '/program'}));\n        this.router.subscribe(this.updateState);\n        this.router.start();\n        this.headerColumns = [\n            gettext('Result level'),\n            gettext('Indicators'),\n            gettext('Means of verification'),\n            gettext('Assumptions')\n        ];\n    }\n    \n    @computed get programId() {\n        let state = this.router.getState();\n        return state.params.programId || null;\n    }\n    \n    updateState = ({ route, prevRoute }) => {\n        this.groupBy = route.params.groupby;\n    }\n    \n    setGroupBy(groupBy) {\n        groupBy = parseInt(groupBy);\n        let { name, params } = this.router.getState();\n        if ([GROUP_BY_CHAIN, GROUP_BY_LEVEL].includes(groupBy)) {\n            params.groupby = groupBy;\n        }\n        this.router.navigate(name, params, {reload: true});\n    }\n    \n    @computed get excelUrl() {\n        let { name, params } = this.router.getState();\n        return this.router.buildUrl('logframe-excel', params);\n    }\n}\n\nexport default FilterStore;","/* Site-wide constants */\n\n\n/**\n * JS_GLOBALS is in base.html (base Tola template) - delivered by middleware from the backend\n * this function returns the global constant for a given key (i.e. 'reason_for_change_options')\n */\n\nfunction getGlobal(key) {\n    if ((typeof JS_GLOBALS !== 'undefined')  && JS_GLOBALS.hasOwnProperty(key)) {\n        return JS_GLOBALS[key];\n    }\n    return null;\n}\n\n\n/**\n * IPTT Constants:\n */\nconst BLANK_LABEL = '---------';\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\nconst EM_DASH = \"—\";\nconst BLANK_TABLE_CELL = EM_DASH;\n\n\nconst TVA = 1;\nconst TIMEPERIODS = 2;\n\nconst TIME_AWARE_FREQUENCIES = [3, 4, 5, 6, 7];\nconst IRREGULAR_FREQUENCIES = [1, 2];\n\nconst TVA_FREQUENCY_LABELS = Object.freeze(\n    {\n        1: gettext(\"Life of Program (LoP) only\"),\n        2: gettext(\"Midline and endline\"),\n        3: gettext(\"Annual\"),\n        4: gettext(\"Semi-annual\"),\n        5: gettext(\"Tri-annual\"),\n        6: gettext(\"Quarterly\"),\n        7: gettext(\"Monthly\")\n    }\n);\n\nconst TIMEPERIODS_FREQUENCY_LABELS = Object.freeze(\n    {\n        3: gettext(\"Years\"),\n        4: gettext(\"Semi-annual periods\"),\n        5: gettext(\"Tri-annual periods\"),\n        6: gettext(\"Quarters\"),\n        7: gettext(\"Months\")\n    }\n);\n\nexport { BLANK_OPTION, BLANK_LABEL, BLANK_TABLE_CELL, EM_DASH, TVA, TIMEPERIODS, TIME_AWARE_FREQUENCIES,\n         IRREGULAR_FREQUENCIES, TVA_FREQUENCY_LABELS, TIMEPERIODS_FREQUENCY_LABELS };\n\nconst GROUP_BY_CHAIN = 1;\nconst GROUP_BY_LEVEL = 2;\n\nexport { GROUP_BY_CHAIN, GROUP_BY_LEVEL };\n\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\nfunction getPeriodLabels() {\n    return {\n        targetperiodLabels: {\n            1: _gettext(\"Life of Program (LoP) only\"),\n            3: _gettext(\"Annual\"),\n            2: _gettext(\"Midline and endline\"),\n            5: _gettext(\"Tri-annual\"),\n            4: _gettext(\"Semi-annual\"),\n            7: _gettext(\"Monthly\"),\n            6: _gettext(\"Quarterly\")\n        },\n        timeperiodLabels: {\n            3: _gettext(\"Years\"),\n            5: _gettext(\"Tri-annual periods\"),\n            4: _gettext(\"Semi-annual periods\"),\n            7: _gettext(\"Months\"),\n            6: _gettext(\"Quarters\")\n        }\n    };\n}\n\nexport {getPeriodLabels};\n\nexport const STATUS_CODES = {\n    NO_INDICATOR_IN_UPDATE: 1\n};\n\nexport const IndicatorFilterType = Object.freeze({\n    noFilter: 0,\n    missingTarget: 1,\n    missingResults: 2,\n    missingEvidence: 3,\n\n    aboveTarget: 5,\n    belowTarget: 6,\n    onTarget: 7,\n    nonReporting: 8\n});\n\nexport const RFC_OPTIONS = getGlobal('reason_for_change_options') ?? [];","import React from 'react';\nimport { computed } from 'mobx';\nimport { observer, inject } from 'mobx-react';\nimport HeaderRow from './headers';\nimport { trimOntology } from '../../../level_utils'\n\nconst LevelNameCell = ({ name, rowCount }) => {\n    return (\n        <td className=\"logframe__cell--level\" rowSpan={ rowCount < 1 ? 1 : rowCount }>\n            { name }\n        </td>\n    )\n}\n\nconst IndicatorCell = ({ indicator, ontology }) => {\n    if (indicator == null){\n      return (\n        <td className=\"logframe__cell--indicator\">\n        </td>\n    );\n    }\n    var name;\n    var number = false;\n    if (indicator.manualNumbering) {\n        number = (indicator.number ? `${indicator.number}` : false);\n    } else if (ontology || indicator.level_order_display) {\n        number = `${trimOntology(ontology)}${indicator.level_order_display}`;\n    }\n    if (number) {\n        name = `${gettext('Indicator')} ${number}: ${indicator.name}`;\n    } else {\n        name = indicator.name;\n    }\n    return (\n        <td className=\"logframe__cell--indicator\">\n            { name }\n        </td>\n    );\n}\n\nconst MeansCell = ({ indicator }) => {\n    if (indicator == null) {\n      return (\n        <td className=\"logframe__cell--means\">\n        </td>\n    );\n    }\n    return (\n        <td className=\"logframe__cell--means\">\n            { indicator.means_of_verification }\n        </td>\n    );\n}\n\n\nconst AssumptionsCell = ({ assumptions, rowCount }) => {\n    return (\n        <td className=\"logframe__cell--assumptions\" rowSpan={ rowCount }>\n            { assumptions }\n        </td>\n    )\n}\n\n\nconst LevelSet = ({ level }) => {\n\n    const firstIndicator = level.indicators[0] || null;\n    const otherIndicators = level.indicators.slice(1) || null;\n    const rowCount  = level.indicators.length;\n    return (\n        <tbody className=\"logframe__level-set\">\n            <tr>\n                <LevelNameCell name={ level.display_name } rowCount={ rowCount } />\n                <IndicatorCell indicator={ firstIndicator } ontology={ level.ontology } />\n                <MeansCell indicator={ firstIndicator } />\n                <AssumptionsCell assumptions={ level.assumptions } rowCount={ rowCount } />\n            </tr>\n            { otherIndicators.map((indicator, idx) => {\n                return (\n                    <tr key={ idx } >\n                        <IndicatorCell indicator={ indicator } ontology={ level.ontology } key={ `ind${idx}` } />\n                        <MeansCell indicator={ indicator } key={ `means${idx}` } />\n                    </tr>\n                )\n            })}\n        </tbody>\n    )\n}\n\n\n@inject('dataStore', 'filterStore')\n@observer\nclass LogframeTable extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    @computed\n    get levels() {\n        if (this.props.dataStore.results_framework) {\n            return this.props.dataStore.getLevelsGroupedBy(this.props.filterStore.groupBy)\n        }\n        return [];\n    }\n\n    @computed\n    get unassignedLevel() {\n        if (this.props.dataStore.unassignedIndicators.length > 0) {\n            return {\n                display_name: gettext('Indicators unassigned to  a results framework level'),\n                indicators: this.props.dataStore.unassignedIndicators,\n                ontology: false,\n                assumptions: null\n            };\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <HeaderRow headers={ this.props.filterStore.headerColumns } />\n                { this.levels.map((level, idx) => <LevelSet level={ level } key={ idx } />) }\n                { this.unassignedLevel && <LevelSet level={ this.unassignedLevel } /> }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default LogframeTable;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAMA;AACA;AACA;AADA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AAGA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAGA;AAAA;AAOA;AAGA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAUA;AAGA;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAwCA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAkDA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AA5DA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAwBA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAIA;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjlBA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAKA;AAAA;AAEA;AAFA;AAAA;AAPA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AAWA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AALA;AAQA;;;;;;;;;;;;AC9MA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAFA;AAOA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAvCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAgBA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAZA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAFA;AACA;AAKA;AAkBA;AAAA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;;;AAUA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAhBA;AACA;AACA;AACA;;;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;AAjDA;;;;;AAAA;;AA4BA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAsBA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;;;AA5BA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;;;;AAxBA;AAqCA;;;;A","sourceRoot":""}