{"version":3,"file":"document_list-f8c387056464638ea1e0.js","sources":["webpack:///./js/pages/document_list/models.js","webpack:///./js/date_utils.js","webpack:///./js/pages/document_list/components/document_list.js","webpack:///./js/pages/document_list/index.js","webpack:///./js/eventbus.js"],"sourcesContent":["import { observable, computed, action } from \"mobx\";\n\n\n\nexport class DocumentListStore {\n    @observable documents = [];\n    @observable programs = [];\n    @observable allowProjectsAccess = false;\n\n    constructor(documents, programs, allowProjectsAccess) {\n        this.documents = documents;\n        this.programs = programs;\n        this.allowProjectsAccess = allowProjectsAccess;\n    }\n}\n\nexport class DocumentListUIStore {\n    @observable selectedProgramId;  // program filter selection\n    @observable selectedDocumentId;  // single document filter selection\n    @observable selectedProjectId;  // legacy URL filter for projects\n\n    constructor() {\n        this.setSelectedProgramId = this.setSelectedProgramId.bind(this);\n        this.clearSelectedProgramId = this.clearSelectedProgramId.bind(this);\n        this.setSelectedDocumentId = this.setSelectedDocumentId.bind(this);\n        this.clearSelectedDocumentId = this.clearSelectedDocumentId.bind(this);\n        this.setSelectedProjectId = this.setSelectedProjectId.bind(this);\n        this.clearSelectedProjectId = this.clearSelectedProjectId.bind(this);\n    }\n\n    @action\n    setSelectedProgramId(programId) {\n        this.selectedProgramId = programId;\n    }\n\n    @action\n    clearSelectedProgramId() {\n        this.selectedProgramId = null;\n    }\n\n    @action\n    setSelectedDocumentId(documentId) {\n        this.selectedDocumentId = documentId;\n    }\n\n    @action\n    clearSelectedDocumentId() {\n        this.selectedDocumentId = null;\n    }\n\n    @action\n    setSelectedProjectId(projectId) {\n        this.selectedProjectId = projectId;\n    }\n\n    @action\n    clearSelectedProjectId() {\n        this.selectedProjectId = null;\n    }\n}\n","/*\n  Some nice helper functions to help with date parsing and localization\n\n  In the future it may make sense to use moment.js, luxon, or date-fns,\n  but for now, just get by with the native browser APIs and save some bytes.\n\n  Confusingly, native Date() objects are actually date/time objects.\n\n  Surprisingly, the Django i18n/l10n JS tools do not provide access to the language code\n  of the current language in use.\n */\n\nconst languageCode = window.userLang; // set in base.html by Django\n\nconst n = \"numeric\",\n    s = \"short\",\n    l = \"long\",\n    d2 = \"2-digit\";\n\n\nconst DATE_MED = {\n    year: n,\n    month: s,\n    day: n\n};\n\n\n// Returns native Date()\nexport function dateFromISOString(isoDateStr) {\n    return new Date(isoDateStr);  // modern browsers can just parse it\n}\n\n// \"2017-01-01\" -> Date with local timezone (not UTC)\n// also lives in base.js (localDateFromISOStr)\nexport function localDateFromISOString(dateStr) {\n    let dateInts = dateStr.split('-').map(function(x) {return parseInt(x)});\n    return new Date(dateInts[0], dateInts[1]-1, dateInts[2]);\n}\n\n\n\n// Date() -> \"Oct 2, 2018\" (localized)\n// JS equiv of the Django template filter:   |date:\"MEDIUM_DATE_FORMAT\"\nexport function mediumDateFormatStr(date) {\n    return new Intl.DateTimeFormat(languageCode, DATE_MED).format(date);\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer } from \"mobx-react\"\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport Select from 'react-select';\nimport eventBus from '../../../eventbus';\n\nimport {dateFromISOString, mediumDateFormatStr} from \"../../../date_utils\";\n\n\n// Given the full documents list in rootStore, and the selected filters in uiStore, apply filtering (sans individual document select)\nfunction filterDocuments(rootStore, uiStore) {\n    let documents = rootStore.documents;\n\n    if (uiStore.selectedProgramId) {\n        documents = documents.filter(r => r.program === uiStore.selectedProgramId);\n    }\n\n    if (uiStore.selectedProjectId) {\n        documents = documents.filter(r => r.project && r.project.id === uiStore.selectedProjectId);\n    }\n\n    return documents\n}\n\n\n@observer\nclass ProgramFilterSelect extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onSelection = this.onSelection.bind(this);\n    }\n\n    onSelection(selectedObject) {\n        let programId = selectedObject ? selectedObject.value : null;\n        eventBus.emit('program-id-filter-selected', programId);\n    }\n\n    render() {\n        const {rootStore, uiStore} = this.props;\n        const programs = rootStore.programs;\n        const selectedProgramId = uiStore.selectedProgramId;\n\n        let programOptions = programs.map(p => {\n            return {value: p.id, label: p.name}\n        });\n\n        let selectedValue = null;\n        if (selectedProgramId) {\n            selectedValue = programOptions.find(p => p.value === selectedProgramId);\n        }\n\n        return <Select\n            options={programOptions}\n            value={selectedValue}\n            isClearable={true}\n            placeholder={gettext('Filter by program')}\n            onChange={this.onSelection}\n        />\n    }\n}\n\n\n@observer\nclass DocumentFilterSelect extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onSelection = this.onSelection.bind(this);\n    }\n\n    onSelection(selectedObject) {\n        let documentId = selectedObject ? selectedObject.value : null;\n        eventBus.emit('document-id-filter-selected', documentId);\n    }\n\n    render() {\n        const {rootStore, uiStore} = this.props;\n        const documents = filterDocuments(rootStore, uiStore);\n        const selectedDocumentId = uiStore.selectedDocumentId;\n\n        let documentOptions = documents.map(r => {\n            return {value: r.id, label: r.name}\n        });\n\n        let selectedValue = null;\n        if (selectedDocumentId) {\n            selectedValue = documentOptions.find(r => r.value === selectedDocumentId);\n        }\n\n        return <Select\n            options={documentOptions}\n            value={selectedValue}\n            isClearable={true}\n            placeholder={gettext('Find a document')}\n            onChange={this.onSelection}\n        />\n    }\n}\n\n\n@observer\nclass DocumentsFilterBar extends React.Component {\n    render() {\n        const {rootStore, uiStore, readonly} = this.props;\n\n        return <div className=\"row\">\n            <div className=\"col-3\">\n                <ProgramFilterSelect rootStore={rootStore} uiStore={uiStore} />\n            </div>\n            <div className=\"col-3\">\n                <DocumentFilterSelect rootStore={rootStore} uiStore={uiStore} />\n            </div>\n            <div className=\"col-3 text-right\">\n            {!readonly &&\n            <a href=\"/workflow/documentation_add\" className=\"btn btn-link btn-add\">\n                <i className=\"fas fa-plus-circle\"/> {gettext(\"Add document\")}\n            </a>\n            }\n            </div>\n        </div>\n    }\n}\n\n\nconst DocumentsListTable = observer(function ({rootStore, uiStore, access}) {\n    // Apply filters to displayed list of documents\n    let documents = filterDocuments(rootStore, uiStore);\n\n    // filter down by individual document select\n    if (uiStore.selectedDocumentId) {\n        documents = documents.filter(r => r.id === uiStore.selectedDocumentId);\n    }\n\n    // If no documents, don't show a table\n    if (documents.length === 0) {\n        return <div>\n            <span>No documents available</span>\n        </div>\n    }\n\n    const columns = [\n        {\n            dataField: 'name',\n            text: gettext('Document'),\n            sort: true,\n            formatter: (cell, row) => {\n                return <a href={row.url} target=\"_blank\">{row.name}</a>\n            }\n        },\n        {\n            dataField: 'create_date',\n            text: gettext('Date added'),\n            sort: true,\n            formatter: (cell, row) => {\n                return <span>{mediumDateFormatStr(dateFromISOString(row.create_date))}</span>\n            }\n        },\n        {\n            dataField: 'project.project_name',\n            text: gettext('Project'),\n            hidden: ! rootStore.allowProjectsAccess\n        },\n        {\n            dataField: 'actions',\n            isDummyField: true,\n            text: '',\n            align: 'right',\n            formatter: (cell, row) => {\n                if(access[row.program] && (access[row.program].role == 'high' || access[row.program].role == 'medium')) {\n                    return <div className=\"text-nowrap\">\n                        <a href={\"/workflow/documentation_delete/\" + row.id} className=\"btn p-0 pr-4 btn-sm btn-text text-danger\">\n                            <i className=\"fas fa-trash-alt\"/>&nbsp;{gettext(\"Delete\")}</a>\n                            <a href={\"/workflow/documentation_update/\" + row.id} className=\"btn p-0 btn-sm btn-text\">\n                                <i className=\"fas fa-edit\"/>&nbsp;{gettext(\"Edit\")}</a>\n                    </div>\n                } else {\n                    return null\n                }\n            }\n        }\n    ];\n\n    const defaultSorted = [{\n        dataField: 'create_date',\n        order: 'desc'\n    }];\n\n    const paginationOptions = {\n        prePageText: '‹',\n        nextPageText: '›',\n        firstPageText: '«',\n        lastPageText: '»',\n        sizePerPage: 50,\n        // page: 2,\n        showTotal: true,\n        paginationTotalRenderer: (from, to, size) => {\n            /* # Translators: Ex. Showing rows 1 to 50 of 92 */\n            const str = interpolate(gettext('Showing rows %(fromCount)s to %(toCount)s of %(totalCount)s'), {\n                fromCount: from,\n                toCount: to,\n                totalCount: size,\n            }, true);\n            return <span className=\"metadata__count text-muted text-small\">&nbsp;{str}</span>\n        }\n    };\n\n    return <BootstrapTable\n        keyField=\"id\"\n        data={documents}\n        columns={columns}\n        bootstrap4={true}\n        pagination={paginationFactory(paginationOptions)}\n        defaultSorted={defaultSorted}\n    />\n});\n\n\n\nexport const DocumentsView = observer(function ({rootStore, uiStore, readonly, access}) {\n    return <React.Fragment>\n        <DocumentsFilterBar rootStore={rootStore} uiStore={uiStore} readonly={readonly}/>\n        <br/>\n        <DocumentsListTable rootStore={rootStore} uiStore={uiStore} access={access}/>\n    </React.Fragment>\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport createRouter from 'router5';\nimport browserPlugin from 'router5-plugin-browser';\nimport eventBus from '../../eventbus';\n\nimport {DocumentsView} from './components/document_list';\nimport {DocumentListStore, DocumentListUIStore} from './models';\n\n// console.log(jsContext);\n\nconst {documents, programs, allowProjectsAccess, readonly, access} = jsContext;\n\n/*\n * Model/Store setup\n */\nconst rootStore = new DocumentListStore(documents, programs, allowProjectsAccess);\nconst uiStore = new DocumentListUIStore();\n\n\n/*\n * Routing\n */\n\nconst routes = [\n    {name: 'documents', path: '/?program_id&project_id&document_id'},\n];\n\n// When the URL changes due to navigation, back button press, etc\nfunction onNavigation(navRoutes) {\n    let {previousRoute, route} = navRoutes;\n    let params = route.params;\n\n    if (params.program_id) {\n        uiStore.setSelectedProgramId(parseInt(params.program_id));\n    } else {\n        uiStore.clearSelectedProgramId();\n    }\n\n    if (params.document_id) {\n        uiStore.setSelectedDocumentId(parseInt(params.document_id));\n    } else {\n        uiStore.clearSelectedDocumentId();\n    }\n\n    if (params.project_id) {\n        uiStore.setSelectedProjectId(parseInt(params.project_id));\n    } else {\n        uiStore.clearSelectedProjectId();\n    }\n}\n\nconst router = createRouter(routes, {\n    defaultRoute: 'all', // used if route not found\n    defaultParams: {},\n});\nrouter.usePlugin(browserPlugin({useHash: false, base: '/workflow/documentation_list'}));\nrouter.subscribe(onNavigation);\nrouter.start();\n\n\n/*\n * Event Handlers\n */\n\n// program filter selection\neventBus.on('program-id-filter-selected', (programId) => {\n    if (programId) {\n        router.navigate('documents', {program_id: programId});\n    } else {\n        router.navigate('documents');\n    }\n});\n\neventBus.on('document-id-filter-selected', (documentId) => {\n    const programId = uiStore.selectedProgramId;\n\n    let qs = {};\n\n    if (programId) {\n        qs.program_id = programId;\n    }\n\n    if (documentId) {\n        qs.document_id = documentId;\n    }\n\n    router.navigate('documents', qs);\n});\n\n\n/*\n * React components on page\n */\n\nconst mapped_program_access = access.programs.reduce((programs, program) => ({...programs, [program.program]: program}),{})\nReactDOM.render(<DocumentsView rootStore={rootStore} uiStore={uiStore} readonly={readonly} access={mapped_program_access}/>,\n    document.querySelector('#documents-view'));\n","// A global instance of an event bus\nimport nanobus from 'nanobus';\n\nconst globalEventBus = nanobus();\n\nexport default globalEventBus;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AAKA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAqBA;AACA;AAtBA;AAAA;AAAA;AA0BA;AACA;AA3BA;AAAA;AAAA;AA+BA;AACA;AAhCA;AAAA;AAAA;AAoCA;AACA;AArCA;AAAA;AAAA;AAyCA;AACA;AA1CA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;AAjCA;AACA;AAqCA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;AAjCA;AACA;AAqCA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAKA;;;;AAnBA;AACA;AAsBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAhBA;AAoBA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAhBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;A","sourceRoot":""}