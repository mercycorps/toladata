{"version":3,"file":"iptt_quickstart-fd228b53b1e7b59d4a01.js","sources":["webpack:///./js/pages/iptt_quickstart/index.js","webpack:///./js/models/program.js","webpack:///./js/apiv2.js","webpack:///./js/pages/iptt_quickstart/components/buttons.js","webpack:///./js/pages/iptt_quickstart/components/selects.js","webpack:///./js/models/periodDateRange.js","webpack:///./js/pages/iptt_quickstart/models/ipttQSProgram.js","webpack:///./js/pages/iptt_quickstart/components/radios.js","webpack:///./js/pages/iptt_quickstart/models/ipttQSRootStore.js","webpack:///./js/pages/iptt_quickstart/components/main.js","webpack:///./js/pages/iptt_quickstart/models/QSProgramStore.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\n\nimport QSRootStore from './models/ipttQSRootStore';\nimport { IPTTQuickstartForm } from './components/main';\n\nconst rootStore = new QSRootStore(jsContext);\n\nReactDOM.render(\n    <Provider rootStore={ rootStore }>\n        <IPTTQuickstartForm />\n    </Provider>,\n    document.querySelector('#id_div_top_quickstart_iptt')\n);","import { observable, action, runInAction, extendObservable } from 'mobx';\nimport api from '../apiv2';\nconst _gettext = (typeof gettext !== 'undefined') ?  gettext : (s) => s;\n\n/**\n *  Base program constructor\n *  JSON params:\n *      pk (string|number)\n *      name (string)\n *      results_framework (boolean)\n *      by_result_chain (string)\n *  @return {Object}\n */\n\nconst bareProgram = (\n    programJSON = {}\n) => ({\n    pk: parseInt(programJSON.pk),\n    name: programJSON.name,\n    resultsFramework: Boolean(programJSON.results_framework),\n    _resultChainFilterLabel: programJSON.by_result_chain || _gettext(\"by Outcome chain\"),\n    get resultChainFilterLabel() {\n        return this.resultsFramework ? this._resultChainFilterLabel : null\n    }\n});\n\nexport const getProgram = (\n    ...programConstructors\n) => ( programJSON = {} ) => [bareProgram, ...programConstructors].reduce(\n        (acc, fn) => extendObservable(acc, fn(programJSON)), {});\n\n/**\n * Extends program with reporting date start/end processing\n * JSON params:\n *      reporting_period_start_iso (string - ISO date format e.g. \"2018-01-14\")\n *      reporting_period_end_iso (string - ISO date format e.g. \"2018-12-02\")\n */\n\nexport const withReportingPeriod = (\n    programJSON = {}\n) => ({\n        reportingPeriodStart: new Date(programJSON.reporting_period_start_iso),\n        reportingPeriodEnd: new Date(programJSON.reporting_period_end_iso)\n    });\n\n/**\n *  Extends program with program-wide indicator ordering (rf-aware)\n *  JSON params:\n *      indicator_pks_level_order ([int])\n *      indicator_pks_chain_order ([int])\n */\n\nexport const withProgramLevelOrdering = (\n    programJSON = {}\n) => {\n    return {\n        _indicatorsLevelOrder: observable((programJSON.indicator_pks_level_order || [])),\n        _indicatorsChainOrder: observable((programJSON.indicator_pks_chain_order || [])),\n        _applyOrderUpdate(results) {\n            runInAction(() => {\n                this._indicatorsLevelOrder = results.indicator_pks_level_order || [];\n                this._indicatorsChainOrder = results.indicator_pks_chain_order || [];\n                Object.entries(results.indicators || {}).forEach(([pk, indicatorJSON]) => {\n                    if (!isNaN(parseInt(pk)) && this.indicators.has(parseInt(pk))) {\n                        this.indicators.get(parseInt(pk)).updateData(indicatorJSON);\n                    }\n                });\n                return results;\n            });\n        },\n        updateOrder() {\n            return api.programLevelOrdering(this.pk).then(this._applyOrderUpdate.bind(this));\n        },\n        get indicatorsInLevelOrder() {\n            return this._indicatorsLevelOrder.map(pk => this.indicators.get(pk));\n        },\n        get indicatorsInChainOrder() {\n            if (this.hasOwnProperty('resultsFramework') && this.resultsFramework === false) {\n                return this.indicatorsInLevelOrder;   \n            }\n            return this._indicatorsChainOrder.map(pk => this.indicators.get(pk));\n        }\n    };\n}\n\n\n/**\n *  Extends program with level-by-level indicator ordering (rf-aware)\n *  JSON params:\n *      level_pks_level_order ([int])\n *      level_pks_chain_order ([int])\n *      indicator_pks_for_level ([{pk: int, indicator_pks; [int]}])\n *      unassigned_indicator_pks ([int])\n */\n\nexport const withRFLevelOrdering = (\n    programJSON = {}\n) => {\n    return {\n        _levelsLevelOrder: observable((programJSON.level_pks_level_order || [])),\n        _levelsChainOrder: observable((programJSON.level_pks_chain_order || [])),\n        _unassignedIndicators: observable((programJSON.unassigned_indicator_pks || [])),\n        levelIndicators: observable(new Map(\n            (programJSON.indicator_pks_for_level || []).map(\n                levelMapJSON => [levelMapJSON.pk, levelMapJSON.indicator_pks]\n            ))),\n        updateOrder() {\n            return api.rfLevelOrdering(this.pk).then(results => {\n                runInAction(() => {\n                    this._levelsLevelOrder = results.level_pks_level_order || [];\n                    this._levelsChainOrder = results.level_pks_chain_order || [];\n                    this._unassignedIndicators = results.unassigned_indicator_pks || [];\n                    this._updateLevelIndicatorsOrder(results.indicator_pks_for_level);\n                    return true;\n                });\n            });\n        },\n        get levelsInLevelOrder() {\n            return this._levelsLevelOrder.map(pk => this.levels.get(pk)) || [];\n        },\n        get levelsInChainOrder() {\n            if (this.hasOwnProperty('resultsFramework') && this.resultsFramework === false) {\n                return this.levelsInLevelOrder;   \n            }\n            return this._levelsChainOrder.map(pk => this.levels.get(pk)) || [];\n        },\n        get unassignedIndicators() {\n            return this._unassignedIndicators.map(pk => this.indicators.get(pk)) || [];\n        },\n        get indicatorsInLevelOrder() {\n            if (!this.resultsFramework) {\n                return this.unassignedIndicators;\n            }\n            return Array.prototype.concat\n                .apply([], this.levelsInLevelOrder\n                                .map(level => this.levelIndicators.get(level.pk).filter(pk => this.indicators.has(pk))\n                                                            .map(pk => this.indicators.get(pk))))\n                .concat(this.unassignedIndicators);\n        },\n        get indicatorsInChainOrder() {\n            if (!this.resultsFramework) {\n                return this.unassignedIndicators;\n            }\n            return Array.prototype.concat\n                .apply([], this.levelsInChainOrder\n                                .map(level => this.levelIndicators.get(level.pk).filter(pk => this.indicators.has(pk))\n                                                            .map(pk => this.indicators.get(pk))))\n                .concat(this.unassignedIndicators);\n        },\n        _updateLevelIndicatorsOrder(orderByLevel=[]) {\n            runInAction(() => {\n                this.levelIndicators.clear();\n                orderByLevel.forEach(({pk, indicator_pks}) => {\n                    this.levelIndicators.set(pk, indicator_pks);\n                });\n            });\n        }\n    };\n}","import axios from 'axios';\nimport qs from 'qs';\n\nconst api = {\n    apiInstance: axios.create({\n        withCredentials: true,\n        baseURL: '/indicators/api/',\n        responseType: 'json',\n        headers: {\n            \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n        }\n    }),\n    documentInstance: axios.create({\n        withCredentials: true,\n        baseURL: '/indicators/api/',\n        responseType: 'document',\n        headers: {\n            \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\")\n        },\n        transformResponse: [response => new XMLSerializer().serializeToString(response)]\n    }),\n    formPostInstance: axios.create({\n        withCredentials: true,\n        baseURL: '/indicators/api/',\n        responseType: 'json',\n        headers: {\n            \"X-CSRFToken\": document.cookie.replace(/(?:(?:^|.*;\\s*)csrftoken\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\"),\n            'content-type': 'application/x-www-form-urlencoded'\n        },\n    }),\n    logFailure(failureMsg) {\n        console.log(\"api call failed:\", failureMsg);\n    },\n    getProgramPageUrl(programPk) {\n        return !isNaN(parseInt(programPk)) ? `/program/${programPk}/` : false;\n    },\n    programLevelOrdering(programPk) {\n        return this.apiInstance.get(`/program/ordering/${programPk}/`)\n        .then(response => response.data)\n        .catch(this.logFailure);\n    },\n    rfLevelOrdering(programPk) {\n        return this.apiInstance.get(`/program/level_ordering/${programPk}/`)\n        .then(response => response.data)\n        .catch(this.logFailure);\n    },\n    indicatorResultsTable(indicatorPk, editable) {\n        return this.documentInstance.get(`/result_table/${indicatorPk}/`, {params: {raw: true, edit: editable}})\n            .then(response => response.data)\n            .catch(this.logFailure);\n    },\n    updateProgramPageIndicator(indicatorPk) {\n        return this.apiInstance.get(`/program_page/indicator/${indicatorPk}/`)\n        .then(response => response.data)\n        .catch(this.logFailure);\n    },\n    updateAllProgramPageIndicators(programPk) {\n        return this.apiInstance.get(`/program_page/${programPk}/`)\n        .then(response => response.data)\n        .catch(this.logFailure);\n    },\n    ipttFilterData(programPk) {\n        return this.apiInstance.get(`/iptt/${programPk}/filter_data/`)\n                    .then(response => response.data)\n                    .catch(this.logFailure);\n    },\n    getIPTTReportData({programPk, frequency, reportType} = {}) {\n        return this.apiInstance.get(`/iptt/${programPk}/report_data/`,\n                                    {params: {frequency: frequency, report_type: reportType}})\n                    .then(response => response.data)\n                    .catch(this.logFailure);\n    },\n    savePinnedReport(reportData) {\n        return this.formPostInstance.post(`/pinned_report/`, qs.stringify(reportData))\n                    .catch(this.logFailure);\n    },\n    updateIPTTIndicator(indicatorPk) {\n        return this.apiInstance.get(`/iptt/indicator/${indicatorPk}/`)\n                    .then(response => response.data)\n                    .catch(this.logFailure);\n    }\n    \n};\n\n\nexport default api;","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\nexport const IPTTSubmit = inject('rootStore')(\n    observer(({ url, rootStore}) => {\n        const handleClick = () => window.location.href = rootStore[url];\n        const inlineCSS = {\n            width: '100%'\n        };\n        return  <div className=\"d-flex justify-content-center mb-1\">\n                <button\n                className=\"btn btn-primary\"\n                onClick={ handleClick }\n                disabled={ !rootStore[url] }\n                style={ inlineCSS }>{ gettext('View report') }</button>\n            </div>;    \n    })\n)","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport Select from 'react-select';\n\nconst IPTTSelectWrapper = (props) => {\n    return <div className=\"form-row mb-3\">\n                <label className=\"col-form-label text-uppercase\">\n                    { props.label }\n                </label>\n                { props.children }\n            </div>;\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTVAProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTVAProgram(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ gettext('Program') }>\n                    <Select options={ this.props.rootStore.tvaProgramOptions }\n                            value={ this.props.rootStore.selectedTVAProgram }\n                            onChange={ this.selectProgram }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTimeperiodsProgramSelect extends React.Component {\n    selectProgram = (selected) => {\n        this.props.rootStore.setTimeperiodsProgram(selected.value);\n    }\n    render() {\n        return <IPTTSelectWrapper label={ gettext('Program') }>\n                    <Select options={ this.props.rootStore.timeperiodsProgramOptions }\n                            value={ this.props.rootStore.selectedTimeperiodsProgram }\n                            onChange={ this.selectProgram }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}\n\n\n@inject('rootStore')\n@observer\nexport class QSTVAPeriodSelect extends React.Component {\n    selectFrequency = (selected) => {\n        this.props.rootStore.setFrequency(selected.value);\n    }\n    render() {\n\n        return <IPTTSelectWrapper label={ gettext('Target periods') }>\n                    <Select options={ this.props.rootStore.frequencyOptions }\n                            value={ this.props.rootStore.selectedFrequency }\n                            onChange={ this.selectFrequency }\n                            className=\"tola-react-select\" />\n               </IPTTSelectWrapper>;\n    }\n}","import { extendObservable } from 'mobx';\n\n\nconst bareRange = (\n    rangeJSON = {}\n) => ({\n    frequency: parseInt(rangeJSON.frequency),\n    get periodCount() {\n        return this.periods.length;\n    },\n    get currentPeriod() {\n        if ([1, 2, 8].includes(this.frequency)) {\n            return null;\n        }\n        return this.periods.filter(period => period.past).length - 1;\n    },\n    getLabel(period) {\n        if ([3, 4, 5, 6].includes(this.frequency)) {\n            return `${period.name} (${period.label})`;\n        }\n        if (this.frequency == 7) {\n            return period.name;\n        }\n    },\n    get options() {\n        return this.periods.map((period, index) => ({value: index, label: this.getLabel(period), year: period.year}));\n    }\n});\n\nexport const getPeriodDateRange = (\n    ...rangeConstructors\n) => (rangeJSON) => {\n    return [bareRange, ...rangeConstructors].reduce(\n        (acc, fn) => extendObservable(acc, fn(rangeJSON)), {});\n}\n","import { observable } from 'mobx';\n\nimport { getProgram, withReportingPeriod } from '../../../models/program';\nimport { getPeriodDateRange } from '../../../models/periodDateRange';\n\n/**\n * IPTT Quickstart page specific model constructor\n * JSON params:\n *    frequencies [int]\n *    period_date_ranges (PeriodDateRange)\n * @return {Object}\n */\n\nconst forIPTTQSDateRange = (\n    rangeJSON = {}\n) => ({\n    periods: rangeJSON.periods\n});\n\nconst QSDateRange = getPeriodDateRange(forIPTTQSDateRange);\n\nexport const forIpttQs = (\n    programJSON = {}\n) => ({\n    frequencies: observable(new Set((programJSON.frequencies || [])\n                                     .map(frequency => parseInt(frequency))\n                                     .filter(frequency => !isNaN(frequency)))),\n    periodRanges: observable(new Map(Object.entries(programJSON.period_date_ranges || {})\n                                     .map(\n        ([frequency, periodsJSON]) => {\n            let freq = parseInt(frequency);\n            return [freq, QSDateRange({frequency: freq, periods: periodsJSON})];\n        }))),\n    validFrequency(frequency) {\n        return !isNaN(parseInt(frequency)) && this.frequencies.has(parseInt(frequency));\n    },\n    _getPeriods(frequency) {\n        if (!isNaN(parseInt(frequency)) && this.periodRanges.has(parseInt(frequency))) {\n            return this.periodRanges.get(parseInt(frequency));\n        }\n        return false;\n    },\n    periodCount(frequency) {\n        let range = this._getPeriods(frequency);\n        if (range) {\n            return range.periodCount;\n        }\n        return false;\n    },\n    currentPeriod(frequency) {\n        let range = this._getPeriods(frequency);\n        if (range) {\n            return range.currentPeriod + 1;\n        }\n        return false;\n    }\n});\n\nexport default getProgram(withReportingPeriod, forIpttQs);","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport classNames from 'classnames';\n\n@inject('rootStore')\n@observer\nexport class QSTVATimeFrameRadio extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    setMostRecentCount = (e) => {\n        // eliminate leading zeros and non-digit characters then update state and store\n        let value = e.target.value.replace(/^0+/, '').replace(/[^0-9]*/gi, '');\n        this.props.rootStore.setMostRecentCount(value);\n    }\n\n    render() {\n        return <div className=\"form-group d-lg-flex pb-4\">\n                    <div className={\n                        classNames('form-check', 'form-check-inline', 'pt-1', 'pr-2',\n                            {'form-check-inline--is-disabled': this.props.rootStore.periodCountDisabled})\n                    }>\n                        <span className=\"form-check-input\">\n                            <input type=\"radio\"\n                                   checked={ this.props.rootStore.showAll }\n                                   disabled={ this.props.rootStore.periodCountDisabled }\n                                   onChange={ this.props.rootStore.setShowAll }\n                                   id=\"id_targetperiods-timeframe_0\"\n                                   />\n                        </span>\n                        <label className=\"form-check-label\" htmlFor=\"id_targetperiods-timeframe_0\">\n                            { gettext('Show all') }\n                        </label>\n                    </div>\n                    <div className={\n                        classNames('form-check', 'form-check-inline', 'pt-1',\n                            {'form-check-inline--is-disabled': this.props.rootStore.periodCountDisabled})\n                    }>\n                        <span className=\"form-check-input\">\n                            <input type=\"radio\"\n                                   checked={ this.props.rootStore.mostRecent }\n                                   disabled={ this.props.rootStore.periodCountDisabled }\n                                   onChange={ this.props.rootStore.setMostRecent }\n                                   id=\"id_targetperiods-timeframe_1\"\n                                   />\n                        </span>\n                        <label className=\"form-check-label\" htmlFor=\"id_targetperiods-timeframe_1\">\n                            { gettext('Most recent') }\n                        </label>\n                    </div>\n                    <div>\n                        <input type=\"text\" className=\"form-control\"\n                           value={ this.props.rootStore.mostRecentCountDisplay }\n                           disabled={ this.props.rootStore.periodCountDisabled }\n                           placeholder={ gettext('enter a number') }\n                           onChange={ this.setMostRecentCount }\n                           />\n                    </div>\n               </div>;\n    }\n}\n","/**\n * IPTT Quickstart React data models\n * @module: iptt_quickstart/models\n */\n\nimport { observable, computed, action, reaction } from 'mobx';\nimport QSProgramStore from './QSProgramStore';\n\nexport const BLANK_LABEL = '---------';\nexport const TVA = 1;\nexport const TIMEPERIODS = 2;\n\nconst BLANK_OPTION = {\n    value: null,\n    label: BLANK_LABEL\n};\n\n\nexport default class QSRootStore {\n    @observable tvaProgramId = null;\n    @observable timeperiodsProgramId = null;\n    @observable frequencyId = null;\n    @observable showAll = true;\n    @observable mostRecent = false;\n    @observable mostRecentCount = '';\n\n    constructor(contextData) {\n        this.programStore = new QSProgramStore(this, contextData.programs);\n        this.periodLabels = {\n            1: gettext(\"Life of Program (LoP) only\"),\n            2: gettext(\"Midline and endline\"),\n            3: gettext(\"Annual\"),\n            4: gettext(\"Semi-annual\"),\n            5: gettext(\"Tri-annual\"),\n            6: gettext(\"Quarterly\"),\n            7: gettext(\"Monthly\")\n        };\n        this.iptt_url = contextData.iptt_url;\n        const resetFrequency = reaction(\n            () => this.tvaProgramId,\n            programId => {\n                if (programId !== null && this.frequencyId !== null &&\n                    !this.programStore.getProgram(programId).frequencies.has(this.frequencyId)) {\n                    this.setFrequency(null);\n                }\n            }\n        )\n\n        this.setTVAProgram(contextData.initial_selected_program_id);\n        this.setTimeperiodsProgram(contextData.initial_selected_program_id);\n    }\n    \n    /* options for program selection in TIMEPERIODS form */\n    get timeperiodsProgramOptions() {\n        return this.programStore.programList.map(\n            program => ({value: program.pk, label: program.name})\n        );\n    }\n    \n    /* options for program selection in TVA form (must have available frequencies) */\n    get tvaProgramOptions() {\n        return this.programStore.programList.filter(\n            program => program.frequencies.size > 0\n        ).map(program => ({value: program.pk, label: program.name}));\n    }\n    \n    /* options for frequency selection in TVA form (must be TVA program, only shows that program's frequencies */\n    @computed get frequencyOptions() {\n        if (this.tvaProgramId === null) {\n            return [BLANK_OPTION];\n        }\n        return [...this.programStore.getProgram(this.tvaProgramId).frequencies]\n                .map( id => ({value: id, label: this.periodLabels[id]})\n        );\n    }\n    \n    /* GET select option (value/label) for selected Program in TVA form */\n    @computed get selectedTVAProgram() {\n        if (this.tvaProgramId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.tvaProgramId, label: this.programStore.getProgram(this.tvaProgramId).name\n        }\n    }\n    \n    /* GET select option (value/label) for selected Program in Timeperiods form */\n    @computed get selectedTimeperiodsProgram() {\n        if (this.timeperiodsProgramId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.timeperiodsProgramId,\n            label: this.programStore.getProgram(this.timeperiodsProgramId).name\n        }\n    }\n    \n    /* GET select option (value/label) for selected Frequency in TVA form */\n    @computed get selectedFrequency() {\n        if (this.tvaProgramId === null || this.frequencyId === null) {\n            return BLANK_OPTION;\n        }\n        return {\n            value: this.frequencyId,\n            label: this.periodLabels[this.frequencyId]\n        }\n    }\n    \n    /* Whether to disable the most recent and show all radio buttons */\n    @computed get periodCountDisabled() {\n        return this.tvaProgramId === null || [3, 4, 5, 6, 7].indexOf(this.frequencyId) == -1;\n    }\n    \n    /* GET most recent display - only show value if most recent is selected */\n    @computed get mostRecentCountDisplay() {\n        if (!this.periodCountDisabled && this.mostRecent) {\n            return this.mostRecentCount;\n        }\n        return '';\n    }\n\n    @computed get mostRecentCountAccurate() {\n        if (this.mostRecent && this.mostRecentCount) {\n            return Math.min(this.mostRecentCount, this.programStore.getProgram(this.tvaProgramId).currentPeriod(this.frequencyId));\n        }\n        return false\n    }\n    \n    /* SET tva program to the designated ID, and make the report type TVA */\n    @action setTVAProgram(programId) {\n        if (isNaN(parseInt(programId))) {\n            this.tvaProgramId = null;\n        } else {\n            this.tvaProgramId = parseInt(programId);\n        }\n    }\n    \n    /* SET tva program to the designated ID, and make the report type Timeperiods */\n    @action setTimeperiodsProgram(programId) {\n        if (isNaN(parseInt(programId))) {\n            this.timeperiodsProgramId = null;\n        } else {\n            this.timeperiodsProgramId = parseInt(programId);\n        }\n    }\n    \n    /* SET frequency in TVA form */\n    @action setFrequency(id) {\n        this.frequencyId = id;\n    }\n    \n    \n    @action setMostRecent = ()  => {\n        this.showAll = false;\n        this.mostRecent = true;\n        this.mostRecentCount = '';\n    }\n\n    @action setMostRecentCount = (count) => {\n        this.setMostRecent();\n        this.mostRecentCount = count;\n    }\n    \n    @action setShowAll = () => {\n        this.mostRecent = false;\n        this.showAll = true;\n        this.mostRecentCount = '';\n    }\n    \n    @computed get tvaURL() {\n        if (this.tvaProgramId !== null && this.frequencyId !== null) {\n            let program = this.programStore.getProgram(this.tvaProgramId);\n            let url = `${this.iptt_url}${program.pk}/targetperiods/?frequency=${this.frequencyId}`;\n            if (this.frequencyId == 1 || this.frequencyId == 2) {\n                return url;\n            } else if (this.showAll) {\n                return `${url}&start=0&end=${program.periodCount(this.frequencyId)-1}`;\n            } else if (this.mostRecent && this.mostRecentCount) {\n                let current = program.currentPeriod(this.frequencyId)-1;\n                let past = current - Math.max(this.mostRecentCountAccurate, 1) + 1;\n                let mrURL = `${url}&start=${past}&end=${current}`;\n                if (program.currentPeriod(this.frequencyId) == program.periodCount(this.frequencyId) && past == 0) {\n                    return `${mrURL}&mr=1`;\n                }\n                return mrURL;\n            }\n        }\n        return false;\n    }\n    \n    @computed get timeperiodsURL() {\n        if (this.timeperiodsProgramId !== null) {\n            let current = this.programStore.getProgram(this.timeperiodsProgramId).currentPeriod(7)-1;\n            return `${this.iptt_url}${this.timeperiodsProgramId}/timeperiods/` +\n                    `?frequency=7&start=${current-1}&end=${current}`;\n        }\n        return false;\n    }\n}\n","import React from 'react';\nimport { QSTVAProgramSelect, QSTVAPeriodSelect, QSTimeperiodsProgramSelect } from './selects';\nimport { QSTVATimeFrameRadio } from './radios';\nimport { IPTTSubmit } from './buttons';\n\nconst QuickstartCard = ({ children }) => {\n    return <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        { children }\n                    </div>\n                </div>\n            </div>;\n}\n\nconst TVAQuickstartForm = () => {\n    return <QuickstartCard>\n                <h5 className=\"card-title\">{\n                    /* # Translators: description of a report type, comparison with targets */\n                    gettext('Periodic targets vs. actuals')\n                }</h5>\n                <p className=\"card-subtitle text-muted mb-2\">{\n                    /* # Translators: label on a form that describes the report it will display */\n                    gettext('View results organized by target period for indicators that share the same target frequency')    \n                }</p>\n                <QSTVAProgramSelect />\n                <QSTVAPeriodSelect />\n                <QSTVATimeFrameRadio />\n                <IPTTSubmit url={'tvaURL' } />\n            </QuickstartCard>;\n}\n\nconst TimeperiodsQuickstartForm = () => {\n    return <QuickstartCard>\n                <h5 className=\"card-title\">{\n                    /* # Translators: description of a report type, showing only recent updates */\n                    gettext('Recent progress for all indicators')\n                }</h5>\n                <p className=\"card-subtitle text-muted mb-2\">{\n                    /* # Translators: label on a form describing the report it will display */\n                    gettext('View the most recent two months of results. (You can customize your time periods.) This report does not include periodic targets')\n                }</p>\n                <QSTimeperiodsProgramSelect />\n                <IPTTSubmit url={'timeperiodsURL'} />\n            </QuickstartCard>;\n}\n\nexport const IPTTQuickstartForm = () => {\n    return <div className=\"row\">\n                <TVAQuickstartForm />\n                <TimeperiodsQuickstartForm />\n           </div>;\n}","import QSProgram from './ipttQSProgram';\n\n\nexport default class QSProgramStore  {\n    constructor(rootStore, programsJSON) {\n        this.rootStore = rootStore;\n        this.programs = new Map((programsJSON || []).map(programJSON => {\n            let program = new QSProgram(programJSON);\n            return [program.pk, program];\n        }).sort(\n            (a, b) => {\n                return a[1].name.toUpperCase() < b[1].name.toUpperCase() ?\n                    -1 :\n                    a[1].name.toUpperCase() > b[1].name.toUpperCase() ?\n                    1 : 0;\n        }));\n    }\n    \n    getProgram(pk) {\n        return this.programs.get(pk);\n    }\n    \n    get programList() {\n        return [...this.programs.values()];\n    }\n\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAFA;AACA;AAWA;AAAA;AACA;AADA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AADA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA3BA;AA4BA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA1DA;AA4DA;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AA7EA;AAkFA;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAIA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AADA;AAAA;AAiBA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAZA;AACA;AADA;AAAA;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAtBA;AAFA;AACA;AAyBA;AAAA;AACA;AADA;AACA;AADA;AAGA;AACA;AAAA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AADA;AAFA;AACA;AAKA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAhCA;AAFA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AAIA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AATA;AAEA;AACA;AAJA;AAAA;AAAA;AAYA;AAAA;AAAA;AACA;AAEA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAIA;AAEA;AAAA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAtDA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AAQA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;;;AAhGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AA2CA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;;;;AAlLA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AACA;;;;;AAAA;;AA2CA;;;;;;;AAqFA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAAA;AACA;AACA;AAAA;AACA;;AAEA;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACzKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;;;;;A","sourceRoot":""}